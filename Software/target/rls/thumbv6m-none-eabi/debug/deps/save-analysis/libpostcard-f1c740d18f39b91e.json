{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3","program":"/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","postcard","--edition=2018","/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=1","-C","debuginfo=2","-C","debug-assertions=on","-C","metadata=f1c740d18f39b91e","-C","extra-filename=-f1c740d18f39b91e","--out-dir","/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps","--target","thumbv6m-none-eabi","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/debug/deps","--extern","byteorder=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps/libbyteorder-730035d219228a74.rmeta","--extern","heapless=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps/libheapless-c039b5e987859bb4.rmeta","--extern","cobs=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps/libpostcard_cobs-be2ef3cb32d577c2.rmeta","--extern","serde=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps/libserde-6303db5f85d5d3d7.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps/libpostcard-f1c740d18f39b91e.rmeta"},"prelude":{"crate_id":{"name":"postcard","disambiguator":[4560521996008296647,9772236572742136814]},"crate_root":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src","external_crates":[{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6948772717640016523,8206199524721505153]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13903862752718280198,3718181148960050896]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1517153803586975564,2091417199493542624]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","num":4,"id":{"name":"postcard_cobs","disambiguator":[3732424361778459863,7028359552544460996]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","num":5,"id":{"name":"serde","disambiguator":[13576132935127435335,6273486994137477735]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","num":6,"id":{"name":"serde_derive","disambiguator":[3443426003154805144,18422538501272665367]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","num":7,"id":{"name":"byteorder","disambiguator":[5964677151743033664,1191805427174745702]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":8,"id":{"name":"heapless","disambiguator":[15969685364878953236,13439520755602451089]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":9,"id":{"name":"generic_array","disambiguator":[3551434372089602315,1316612288215471683]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":10,"id":{"name":"typenum","disambiguator":[15357975060537762515,11335347814899673141]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":11,"id":{"name":"hash32","disambiguator":[11106152591252844062,10798671999050364467]}}],"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":0,"byte_end":4984,"line_start":1,"line_end":135,"column_start":1,"column_end":42}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":20},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4658,"byte_end":4670,"line_start":126,"line_end":126,"column_start":27,"column_end":39},"alias_span":null,"name":"Deserializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":135},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4685,"byte_end":4695,"line_start":127,"line_end":127,"column_start":14,"column_end":24},"alias_span":null,"name":"from_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":138},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4697,"byte_end":4712,"line_start":127,"line_end":127,"column_start":26,"column_end":41},"alias_span":null,"name":"from_bytes_cobs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4714,"byte_end":4729,"line_start":127,"line_end":127,"column_start":43,"column_end":58},"alias_span":null,"name":"take_from_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":142},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4731,"byte_end":4751,"line_start":127,"line_end":127,"column_start":60,"column_end":80},"alias_span":null,"name":"take_from_bytes_cobs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":441},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4770,"byte_end":4775,"line_start":128,"line_end":128,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":156},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4777,"byte_end":4783,"line_start":128,"line_end":128,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":179},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4805,"byte_end":4812,"line_start":130,"line_end":130,"column_start":5,"column_end":12},"alias_span":null,"name":"flavors","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":401},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4814,"byte_end":4835,"line_start":130,"line_end":130,"column_start":14,"column_end":35},"alias_span":null,"name":"serialize_with_flavor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4849,"byte_end":4859,"line_start":130,"line_end":130,"column_start":49,"column_end":59},"alias_span":null,"name":"Serializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":391},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4861,"byte_end":4869,"line_start":130,"line_end":130,"column_start":61,"column_end":69},"alias_span":null,"name":"to_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":387},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4871,"byte_end":4884,"line_start":130,"line_end":130,"column_start":71,"column_end":84},"alias_span":null,"name":"to_slice_cobs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4886,"byte_end":4892,"line_start":130,"line_end":130,"column_start":86,"column_end":92},"alias_span":null,"name":"to_vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":395},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4898,"byte_end":4909,"line_start":131,"line_end":131,"column_start":5,"column_end":16},"alias_span":null,"name":"to_vec_cobs","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":0,"byte_end":4984,"line_start":1,"line_end":135,"column_start":1,"column_end":42},"name":"","qualname":"::","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":149},{"krate":0,"index":165},{"krate":0,"index":406},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":430},{"krate":0,"index":433}],"decl_id":null,"docs":" # Postcard","sig":null,"attributes":[{"value":"! # Postcard","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Postcard is a `#![no_std]` focused serializer and deserializer for Serde.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":19,"byte_end":96,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":97,"byte_end":100,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Postcard aims to be convenient for developers in constrained environments, while","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":101,"byte_end":185,"line_start":5,"line_end":5,"column_start":1,"column_end":85}},{"value":"! allowing for flexibility to customize behavior as needed.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":186,"byte_end":247,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":248,"byte_end":251,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! ## Design Goals","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":252,"byte_end":271,"line_start":8,"line_end":8,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":272,"byte_end":275,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! 1. Design primarily for `#![no_std]` usage, in embedded or other constrained contexts","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":276,"byte_end":365,"line_start":10,"line_end":10,"column_start":1,"column_end":90}},{"value":"! 2. Support a maximal set of `serde` features, so `postcard` can be used as a drop in replacement","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":366,"byte_end":466,"line_start":11,"line_end":11,"column_start":1,"column_end":101}},{"value":"! 3. Avoid special differences in code between communication code written for a microcontroller or a desktop/server PC","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":467,"byte_end":587,"line_start":12,"line_end":12,"column_start":1,"column_end":121}},{"value":"! 4. Be resource efficient - memory usage, code size, developer time, and CPU time; in that order","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":588,"byte_end":687,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"! 5. Allow library users to customize the serialization and deserialization  behavior to fit their bespoke needs","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":688,"byte_end":802,"line_start":14,"line_end":14,"column_start":1,"column_end":115}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":803,"byte_end":806,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! ## Variable Length Data","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":807,"byte_end":834,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":835,"byte_end":838,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! Variable length data (such as slices) are prefixed by their length.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":839,"byte_end":910,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":911,"byte_end":914,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! Length is encoded as a [Varint]. This is done for two reasons: to minimize wasted bytes","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":915,"byte_end":1006,"line_start":20,"line_end":20,"column_start":1,"column_end":92}},{"value":"! on the wire when sending slices with items less than 127 items (typical for embedded),","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1007,"byte_end":1097,"line_start":21,"line_end":21,"column_start":1,"column_end":91}},{"value":"! and to reduce compatibility issues between 32-bit and 64-bit targets due to differing sizes","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1098,"byte_end":1193,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"! of `usize`.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1194,"byte_end":1209,"line_start":23,"line_end":23,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1210,"byte_end":1213,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! Similarly, `enum` descriminants are encoded as varints, meaning that any enum with less than","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1214,"byte_end":1310,"line_start":25,"line_end":25,"column_start":1,"column_end":97}},{"value":"! 127 variants will encode its discriminant as a single byte (rather than a `u32`).","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1311,"byte_end":1396,"line_start":26,"line_end":26,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1397,"byte_end":1400,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! Varints in `postcard` have a maximum value of the usize for that platform. In practice, this","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1401,"byte_end":1497,"line_start":28,"line_end":28,"column_start":1,"column_end":97}},{"value":"! means that 64-bit targets should not send messages with slices containing `(1 << 32) - 1` items","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1498,"byte_end":1597,"line_start":29,"line_end":29,"column_start":1,"column_end":100}},{"value":"! to 32-bit targets, which is uncommon in practice. Enum discriminants already have a fixed","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1598,"byte_end":1691,"line_start":30,"line_end":30,"column_start":1,"column_end":94}},{"value":"! maximum value of `(1 << 32) - 1` as currently defined in Rust. Varints larger than the current platform's","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1692,"byte_end":1801,"line_start":31,"line_end":31,"column_start":1,"column_end":110}},{"value":"! `usize` will cause the deserialization process to return an `Err`.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1802,"byte_end":1872,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1873,"byte_end":1876,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! [Varint]: https://developers.google.com/protocol-buffers/docs/encoding","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1877,"byte_end":1951,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1952,"byte_end":1955,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! ## Example - Serialization/Deserialization","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":1956,"byte_end":2002,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2003,"byte_end":2006,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! Postcard can serialize and deserialize messages similar to other `serde` formats.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2007,"byte_end":2092,"line_start":38,"line_end":38,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2093,"byte_end":2096,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2097,"byte_end":2108,"line_start":40,"line_end":40,"column_start":1,"column_end":12}},{"value":"! use core::ops::Deref;","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2109,"byte_end":2134,"line_start":41,"line_end":41,"column_start":1,"column_end":26}},{"value":"! use serde::{Serialize, Deserialize};","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2135,"byte_end":2175,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"! use postcard::{from_bytes, to_vec};","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2176,"byte_end":2215,"line_start":43,"line_end":43,"column_start":1,"column_end":40}},{"value":"! use heapless::{Vec, consts::*};","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2216,"byte_end":2251,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2252,"byte_end":2255,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! #[derive(Serialize, Deserialize, Debug, Eq, PartialEq)]","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2256,"byte_end":2315,"line_start":46,"line_end":46,"column_start":1,"column_end":60}},{"value":"! struct RefStruct<'a> {","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2316,"byte_end":2342,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"!     bytes: &'a [u8],","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2343,"byte_end":2367,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"!     str_s: &'a str,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2368,"byte_end":2391,"line_start":49,"line_end":49,"column_start":1,"column_end":24}},{"value":"! }","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2392,"byte_end":2397,"line_start":50,"line_end":50,"column_start":1,"column_end":6}},{"value":"! let message = \"hElLo\";","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2398,"byte_end":2424,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"! let bytes = [0x01, 0x10, 0x02, 0x20];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2425,"byte_end":2466,"line_start":52,"line_end":52,"column_start":1,"column_end":42}},{"value":"! let output: Vec<u8, U11> = to_vec(&RefStruct {","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2467,"byte_end":2517,"line_start":53,"line_end":53,"column_start":1,"column_end":51}},{"value":"!     bytes: &bytes,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2518,"byte_end":2540,"line_start":54,"line_end":54,"column_start":1,"column_end":23}},{"value":"!     str_s: message,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2541,"byte_end":2564,"line_start":55,"line_end":55,"column_start":1,"column_end":24}},{"value":"! }).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2565,"byte_end":2581,"line_start":56,"line_end":56,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2582,"byte_end":2585,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! assert_eq!(","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2586,"byte_end":2601,"line_start":58,"line_end":58,"column_start":1,"column_end":16}},{"value":"!     &[0x04, 0x01, 0x10, 0x02, 0x20, 0x05, b'h', b'E', b'l', b'L', b'o',],","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2602,"byte_end":2679,"line_start":59,"line_end":59,"column_start":1,"column_end":78}},{"value":"!     output.deref()","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2680,"byte_end":2702,"line_start":60,"line_end":60,"column_start":1,"column_end":23}},{"value":"! );","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2703,"byte_end":2709,"line_start":61,"line_end":61,"column_start":1,"column_end":7}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2710,"byte_end":2713,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! let out: RefStruct = from_bytes(output.deref()).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2714,"byte_end":2775,"line_start":63,"line_end":63,"column_start":1,"column_end":62}},{"value":"! assert_eq!(","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2776,"byte_end":2791,"line_start":64,"line_end":64,"column_start":1,"column_end":16}},{"value":"!     out,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2792,"byte_end":2804,"line_start":65,"line_end":65,"column_start":1,"column_end":13}},{"value":"!     RefStruct {","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2805,"byte_end":2824,"line_start":66,"line_end":66,"column_start":1,"column_end":20}},{"value":"!         bytes: &bytes,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2825,"byte_end":2851,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"!         str_s: message,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2852,"byte_end":2879,"line_start":68,"line_end":68,"column_start":1,"column_end":28}},{"value":"!     }","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2880,"byte_end":2889,"line_start":69,"line_end":69,"column_start":1,"column_end":10}},{"value":"! );","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2890,"byte_end":2896,"line_start":70,"line_end":70,"column_start":1,"column_end":7}},{"value":"! ```","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2897,"byte_end":2904,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2905,"byte_end":2908,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"! ## Example - Flavors","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2909,"byte_end":2933,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2934,"byte_end":2937,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"! `postcard` supports a system called `Flavors`, which are used to modify the way","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":2938,"byte_end":3021,"line_start":75,"line_end":75,"column_start":1,"column_end":84}},{"value":"! postcard serializes or processes serialized data. These flavors act as \"plugins\" or \"middlewares\"","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3022,"byte_end":3123,"line_start":76,"line_end":76,"column_start":1,"column_end":102}},{"value":"! during the serialization process, and can be combined to obtain complex protocol formats.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3124,"byte_end":3217,"line_start":77,"line_end":77,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3218,"byte_end":3221,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! Here, we serialize the given data, while simultaneously encoding it using COBS (a \"modification flavor\"),","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3222,"byte_end":3331,"line_start":79,"line_end":79,"column_start":1,"column_end":110}},{"value":"! and placing the output in a byte slice (a \"storage flavor\").","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3332,"byte_end":3396,"line_start":80,"line_end":80,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3397,"byte_end":3400,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"! Users of `postcard` can define their own Flavors that can be combined with existing Flavors.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3401,"byte_end":3497,"line_start":82,"line_end":82,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3498,"byte_end":3501,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3502,"byte_end":3513,"line_start":84,"line_end":84,"column_start":1,"column_end":12}},{"value":"! use postcard::{","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3514,"byte_end":3533,"line_start":85,"line_end":85,"column_start":1,"column_end":20}},{"value":"!     serialize_with_flavor,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3534,"byte_end":3564,"line_start":86,"line_end":86,"column_start":1,"column_end":31}},{"value":"!     flavors::{Cobs, Slice},","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3565,"byte_end":3596,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"! };","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3597,"byte_end":3603,"line_start":88,"line_end":88,"column_start":1,"column_end":7}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3604,"byte_end":3607,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! let mut buf = [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3608,"byte_end":3636,"line_start":90,"line_end":90,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3637,"byte_end":3640,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"! let data: &[u8] = &[0x01, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3641,"byte_end":3689,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"! let buffer = &mut [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3690,"byte_end":3722,"line_start":93,"line_end":93,"column_start":1,"column_end":33}},{"value":"! let res = serialize_with_flavor::<[u8], Cobs<Slice>, &mut [u8]>(","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3723,"byte_end":3791,"line_start":94,"line_end":94,"column_start":1,"column_end":69}},{"value":"!     data,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3792,"byte_end":3805,"line_start":95,"line_end":95,"column_start":1,"column_end":14}},{"value":"!     Cobs::try_new(Slice::new(buffer)).unwrap(),","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3806,"byte_end":3857,"line_start":96,"line_end":96,"column_start":1,"column_end":52}},{"value":"! ).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3858,"byte_end":3873,"line_start":97,"line_end":97,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3874,"byte_end":3877,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! assert_eq!(res, &[0x03, 0x04, 0x01, 0x03, 0x20, 0x30, 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3878,"byte_end":3943,"line_start":99,"line_end":99,"column_start":1,"column_end":66}},{"value":"! ```","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3944,"byte_end":3951,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3952,"byte_end":3955,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"! ## License","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3956,"byte_end":3970,"line_start":102,"line_end":102,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3971,"byte_end":3974,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"! Licensed under either of","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":3975,"byte_end":4003,"line_start":104,"line_end":104,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4004,"byte_end":4007,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"! - Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4008,"byte_end":4078,"line_start":106,"line_end":106,"column_start":1,"column_end":71}},{"value":"!   http://www.apache.org/licenses/LICENSE-2.0)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4079,"byte_end":4128,"line_start":107,"line_end":107,"column_start":1,"column_end":50}},{"value":"! - MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4129,"byte_end":4213,"line_start":108,"line_end":108,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4214,"byte_end":4217,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"! at your option.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4218,"byte_end":4237,"line_start":110,"line_end":110,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4238,"byte_end":4241,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"! ### Contribution","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4242,"byte_end":4262,"line_start":112,"line_end":112,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4263,"byte_end":4266,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"! Unless you explicitly state otherwise, any contribution intentionally submitted","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4267,"byte_end":4350,"line_start":114,"line_end":114,"column_start":1,"column_end":84}},{"value":"! for inclusion in the work by you, as defined in the Apache-2.0 license, shall be","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4351,"byte_end":4435,"line_start":115,"line_end":115,"column_start":1,"column_end":85}},{"value":"! dual licensed as above, without any additional terms or conditions.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4436,"byte_end":4507,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"no_std","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4558,"byte_end":4564,"line_start":118,"line_end":118,"column_start":50,"column_end":56}},{"value":"warn(missing_docs)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4567,"byte_end":4589,"line_start":119,"line_end":119,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17611,"byte_end":17623,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"Deserializer","qualname":"::de::deserializer::Deserializer","value":"Deserializer {  }","parent":null,"children":[{"krate":0,"index":22}],"decl_id":null,"docs":" A structure for deserializing a postcard message. For now, Deserializer does not\n implement the same Flavor interface as the serializer does, as messages are typically\n easier to deserialize in place. This may change in the future for consistency, or\n to support items that cannot be deserialized in-place, such as compressed message types\n","sig":null,"attributes":[{"value":"/ A structure for deserializing a postcard message. For now, Deserializer does not","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17247,"byte_end":17331,"line_start":13,"line_end":13,"column_start":1,"column_end":85}},{"value":"/ implement the same Flavor interface as the serializer does, as messages are typically","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17332,"byte_end":17421,"line_start":14,"line_end":14,"column_start":1,"column_end":90}},{"value":"/ easier to deserialize in place. This may change in the future for consistency, or","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17422,"byte_end":17507,"line_start":15,"line_end":15,"column_start":1,"column_end":86}},{"value":"/ to support items that cannot be deserialized in-place, such as compressed message types","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17508,"byte_end":17599,"line_start":16,"line_end":16,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17879,"byte_end":17889,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Deserializer>::from_bytes","value":"fn (input: &'de [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Obtain a Deserializer from a slice of bytes\n","sig":null,"attributes":[{"value":"/ Obtain a Deserializer from a slice of bytes","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17820,"byte_end":17867,"line_start":24,"line_end":24,"column_start":5,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":135},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5280,"byte_end":5290,"line_start":11,"line_end":11,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::de::from_bytes","value":"fn <'a, T> (s: &'a [u8]) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a message of type `T` from a byte slice. The unused portion (if any)\n of the byte slice is returned for further usage\n","sig":null,"attributes":[{"value":"/ Deserialize a message of type `T` from a byte slice. The unused portion (if any)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5136,"byte_end":5220,"line_start":9,"line_end":9,"column_start":1,"column_end":85}},{"value":"/ of the byte slice is returned for further usage","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5221,"byte_end":5272,"line_start":10,"line_end":10,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":138},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5617,"byte_end":5632,"line_start":22,"line_end":22,"column_start":8,"column_end":23},"name":"from_bytes_cobs","qualname":"::de::from_bytes_cobs","value":"fn <'a, T> (s: &'a mut [u8]) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a message of type `T` from a cobs-encoded byte slice. The\n unused portion (if any) of the byte slice is not returned.\n","sig":null,"attributes":[{"value":"/ Deserialize a message of type `T` from a cobs-encoded byte slice. The","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5473,"byte_end":5546,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ unused portion (if any) of the byte slice is not returned.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5547,"byte_end":5609,"line_start":21,"line_end":21,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5969,"byte_end":5989,"line_start":32,"line_end":32,"column_start":8,"column_end":28},"name":"take_from_bytes_cobs","qualname":"::de::take_from_bytes_cobs","value":"fn <'a, T> (s: &'a mut [u8]) -> Result<(T, &'a mut [u8])>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a message of type `T` from a cobs-encoded byte slice. The\n unused portion (if any) of the byte slice is returned for further usage\n","sig":null,"attributes":[{"value":"/ Deserialize a message of type `T` from a cobs-encoded byte slice. The","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5812,"byte_end":5885,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ unused portion (if any) of the byte slice is returned for further usage","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5886,"byte_end":5961,"line_start":31,"line_end":31,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":6385,"byte_end":6400,"line_start":43,"line_end":43,"column_start":8,"column_end":23},"name":"take_from_bytes","qualname":"::de::take_from_bytes","value":"fn <'a, T> (s: &'a [u8]) -> Result<(T, &'a [u8])>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a message of type `T` from a byte slice. The unused portion (if any)\n of the byte slice is returned for further usage\n","sig":null,"attributes":[{"value":"/ Deserialize a message of type `T` from a byte slice. The unused portion (if any)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":6241,"byte_end":6325,"line_start":41,"line_end":41,"column_start":1,"column_end":85}},{"value":"/ of the byte slice is returned for further usage","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":6326,"byte_end":6377,"line_start":42,"line_end":42,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":442},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29690,"byte_end":29703,"line_start":9,"line_end":9,"column_start":5,"column_end":18},"name":"WontImplement","qualname":"::error::Error::WontImplement","value":"Error::WontImplement","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" This is a feature that PostCard will never implement\n","sig":null,"attributes":[{"value":"/ This is a feature that PostCard will never implement","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29629,"byte_end":29685,"line_start":8,"line_end":8,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":444},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29786,"byte_end":29803,"line_start":11,"line_end":11,"column_start":5,"column_end":22},"name":"NotYetImplemented","qualname":"::error::Error::NotYetImplemented","value":"Error::NotYetImplemented","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" This is a feature that Postcard intends to support, but does not yet\n","sig":null,"attributes":[{"value":"/ This is a feature that Postcard intends to support, but does not yet","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29709,"byte_end":29781,"line_start":10,"line_end":10,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":446},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29846,"byte_end":29865,"line_start":13,"line_end":13,"column_start":5,"column_end":24},"name":"SerializeBufferFull","qualname":"::error::Error::SerializeBufferFull","value":"Error::SerializeBufferFull","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" The serialize buffer is full\n","sig":null,"attributes":[{"value":"/ The serialize buffer is full","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29809,"byte_end":29841,"line_start":12,"line_end":12,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":448},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29918,"byte_end":29943,"line_start":15,"line_end":15,"column_start":5,"column_end":30},"name":"SerializeSeqLengthUnknown","qualname":"::error::Error::SerializeSeqLengthUnknown","value":"Error::SerializeSeqLengthUnknown","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" The length of a sequence must be known\n","sig":null,"attributes":[{"value":"/ The length of a sequence must be known","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29871,"byte_end":29913,"line_start":14,"line_end":14,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":450},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29999,"byte_end":30023,"line_start":17,"line_end":17,"column_start":5,"column_end":29},"name":"DeserializeUnexpectedEnd","qualname":"::error::Error::DeserializeUnexpectedEnd","value":"Error::DeserializeUnexpectedEnd","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Hit the end of buffer, expected more data\n","sig":null,"attributes":[{"value":"/ Hit the end of buffer, expected more data","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29949,"byte_end":29994,"line_start":16,"line_end":16,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":452},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30115,"byte_end":30135,"line_start":19,"line_end":19,"column_start":5,"column_end":25},"name":"DeserializeBadVarint","qualname":"::error::Error::DeserializeBadVarint","value":"Error::DeserializeBadVarint","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found a varint that didn't terminate. Is the usize too big for this platform?\n","sig":null,"attributes":[{"value":"/ Found a varint that didn't terminate. Is the usize too big for this platform?","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30029,"byte_end":30110,"line_start":18,"line_end":18,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":454},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30181,"byte_end":30199,"line_start":21,"line_end":21,"column_start":5,"column_end":23},"name":"DeserializeBadBool","qualname":"::error::Error::DeserializeBadBool","value":"Error::DeserializeBadBool","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found a bool that wasn't 0 or 1\n","sig":null,"attributes":[{"value":"/ Found a bool that wasn't 0 or 1","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30141,"byte_end":30176,"line_start":20,"line_end":20,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":456},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30243,"byte_end":30261,"line_start":23,"line_end":23,"column_start":5,"column_end":23},"name":"DeserializeBadChar","qualname":"::error::Error::DeserializeBadChar","value":"Error::DeserializeBadChar","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found an invalid unicode char\n","sig":null,"attributes":[{"value":"/ Found an invalid unicode char","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30205,"byte_end":30238,"line_start":22,"line_end":22,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":458},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30304,"byte_end":30322,"line_start":25,"line_end":25,"column_start":5,"column_end":23},"name":"DeserializeBadUtf8","qualname":"::error::Error::DeserializeBadUtf8","value":"Error::DeserializeBadUtf8","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Tried to parse invalid utf-8\n","sig":null,"attributes":[{"value":"/ Tried to parse invalid utf-8","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30267,"byte_end":30299,"line_start":24,"line_end":24,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":460},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30384,"byte_end":30404,"line_start":27,"line_end":27,"column_start":5,"column_end":25},"name":"DeserializeBadOption","qualname":"::error::Error::DeserializeBadOption","value":"Error::DeserializeBadOption","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found an Option discriminant that wasn't 0 or 1\n","sig":null,"attributes":[{"value":"/ Found an Option discriminant that wasn't 0 or 1","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30328,"byte_end":30379,"line_start":26,"line_end":26,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":462},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30473,"byte_end":30491,"line_start":29,"line_end":29,"column_start":5,"column_end":23},"name":"DeserializeBadEnum","qualname":"::error::Error::DeserializeBadEnum","value":"Error::DeserializeBadEnum","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found an enum discriminant that was > u32::max_value()\n","sig":null,"attributes":[{"value":"/ Found an enum discriminant that was > u32::max_value()","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30410,"byte_end":30468,"line_start":28,"line_end":28,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":464},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30544,"byte_end":30566,"line_start":31,"line_end":31,"column_start":5,"column_end":27},"name":"DeserializeBadEncoding","qualname":"::error::Error::DeserializeBadEncoding","value":"Error::DeserializeBadEncoding","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" The original data was not well encoded\n","sig":null,"attributes":[{"value":"/ The original data was not well encoded","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30497,"byte_end":30539,"line_start":30,"line_end":30,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30606,"byte_end":30620,"line_start":33,"line_end":33,"column_start":5,"column_end":19},"name":"SerdeSerCustom","qualname":"::error::Error::SerdeSerCustom","value":"Error::SerdeSerCustom","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Serde Serialization Error\n","sig":null,"attributes":[{"value":"/ Serde Serialization Error","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30572,"byte_end":30601,"line_start":32,"line_end":32,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":468},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30662,"byte_end":30675,"line_start":35,"line_end":35,"column_start":5,"column_end":18},"name":"SerdeDeCustom","qualname":"::error::Error::SerdeDeCustom","value":"Error::SerdeDeCustom","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Serde Deserialization Error\n","sig":null,"attributes":[{"value":"/ Serde Deserialization Error","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30626,"byte_end":30657,"line_start":34,"line_end":34,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":441},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29617,"byte_end":29622,"line_start":7,"line_end":7,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{WontImplement, NotYetImplemented, SerializeBufferFull, SerializeSeqLengthUnknown, DeserializeUnexpectedEnd, DeserializeBadVarint, DeserializeBadBool, DeserializeBadChar, DeserializeBadUtf8, DeserializeBadOption, DeserializeBadEnum, DeserializeBadEncoding, SerdeSerCustom, SerdeDeCustom}","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468}],"decl_id":null,"docs":" This is the error type used by Postcard\n","sig":null,"attributes":[{"value":"/ This is the error type used by Postcard","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29532,"byte_end":29575,"line_start":5,"line_end":5,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":156},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32205,"byte_end":32211,"line_start":69,"line_end":69,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"::core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" This is the Result type used by Postcard.\n","sig":null,"attributes":[{"value":"/ This is the Result type used by Postcard.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32150,"byte_end":32195,"line_start":68,"line_end":68,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":179},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flavors","qualname":"::ser::flavors","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":211},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":230},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":244},{"krate":0,"index":248}],"decl_id":null,"docs":" # Flavors - Plugins for `postcard`","sig":null,"attributes":[{"value":"! # Flavors - Plugins for `postcard`","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48043,"byte_end":48081,"line_start":1,"line_end":1,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48082,"byte_end":48085,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! \"Flavors\" in `postcard` are used as modifiers to the serialization","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48086,"byte_end":48156,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"! process. Flavors typically modify one or both of the following:","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48157,"byte_end":48224,"line_start":4,"line_end":4,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48225,"byte_end":48228,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! 1. The output medium of the serialization, e.g. whether the data is serialized to a `[u8]` slice, or a `heapless::Vec`.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48229,"byte_end":48352,"line_start":6,"line_end":6,"column_start":1,"column_end":124}},{"value":"! 2. The format of the serialization, such as encoding the serialized output in a COBS format, performing CRC32 checksumming while serializing, etc.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48353,"byte_end":48503,"line_start":7,"line_end":7,"column_start":1,"column_end":151}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48504,"byte_end":48507,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! Flavors are implemented using the `SerFlavor` trait, which acts as a \"middleware\" for receiving the bytes as serialized by `serde`.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48508,"byte_end":48643,"line_start":9,"line_end":9,"column_start":1,"column_end":136}},{"value":"! Multiple flavors may be combined to obtain a desired combination of behavior and storage.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48644,"byte_end":48737,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"! When flavors are combined, it is expected that the storage flavor (such as `Slice` or `HVec`) is the innermost flavor.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48738,"byte_end":48860,"line_start":11,"line_end":11,"column_start":1,"column_end":123}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48861,"byte_end":48864,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Custom flavors may be defined by users of the `postcard` crate, however some commonly useful flavors have been provided in","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48865,"byte_end":48991,"line_start":13,"line_end":13,"column_start":1,"column_end":127}},{"value":"! this module. If you think your custom flavor would be useful to others, PRs adding flavors are very welcome!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":48992,"byte_end":49104,"line_start":14,"line_end":14,"column_start":1,"column_end":113}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49105,"byte_end":49108,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! ## Usability","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49109,"byte_end":49125,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49126,"byte_end":49129,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! Flavors may not always be convenient to use directly, as they may expose some implementation details of how the","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49130,"byte_end":49245,"line_start":18,"line_end":18,"column_start":1,"column_end":116}},{"value":"! inner workings of the flavor behaves. It is typical to provide a convenience method for using a flavor, to prevent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49246,"byte_end":49364,"line_start":19,"line_end":19,"column_start":1,"column_end":119}},{"value":"! the user from having to specify generic parameters, setting correct initialization values, or handling the output of","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49365,"byte_end":49485,"line_start":20,"line_end":20,"column_start":1,"column_end":121}},{"value":"! the flavor correctly. See `postcard::to_vec()` for an example of this.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49486,"byte_end":49560,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49561,"byte_end":49564,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! It is recommended to use the [`serialize_with_flavor()`](../fn.serialize_with_flavor.html) method for serialization. See it's documentation for information","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49565,"byte_end":49724,"line_start":23,"line_end":23,"column_start":1,"column_end":160}},{"value":"! regarding usage and generic type parameters.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49725,"byte_end":49773,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49774,"byte_end":49777,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! ## Examples","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49778,"byte_end":49793,"line_start":26,"line_end":26,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49794,"byte_end":49797,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! ### Using a single flavor","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49798,"byte_end":49827,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49828,"byte_end":49831,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! In the first example, we use the `Slice` flavor, to store the serialized output into a mutable `[u8]` slice.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49832,"byte_end":49944,"line_start":30,"line_end":30,"column_start":1,"column_end":113}},{"value":"! No other modification is made to the serialization process.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":49945,"byte_end":50008,"line_start":31,"line_end":31,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50009,"byte_end":50012,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50013,"byte_end":50024,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"! use postcard::{","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50025,"byte_end":50044,"line_start":34,"line_end":34,"column_start":1,"column_end":20}},{"value":"!     serialize_with_flavor,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50045,"byte_end":50075,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"!     flavors::Slice,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50076,"byte_end":50099,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"! };","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50100,"byte_end":50106,"line_start":37,"line_end":37,"column_start":1,"column_end":7}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50107,"byte_end":50110,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! let mut buf = [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50111,"byte_end":50139,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50140,"byte_end":50143,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! let data: &[u8] = &[0x01, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50144,"byte_end":50192,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"! let buffer = &mut [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50193,"byte_end":50225,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"! let res = serialize_with_flavor::<[u8], Slice, &mut [u8]>(","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50226,"byte_end":50288,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"!     data,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50289,"byte_end":50302,"line_start":44,"line_end":44,"column_start":1,"column_end":14}},{"value":"!     Slice::new(buffer)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50303,"byte_end":50329,"line_start":45,"line_end":45,"column_start":1,"column_end":27}},{"value":"! ).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50330,"byte_end":50345,"line_start":46,"line_end":46,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50346,"byte_end":50349,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! assert_eq!(res, &[0x04, 0x01, 0x00, 0x20, 0x30]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50350,"byte_end":50403,"line_start":48,"line_end":48,"column_start":1,"column_end":54}},{"value":"! ```","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50404,"byte_end":50411,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50412,"byte_end":50415,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! ### Using combined flavors","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50416,"byte_end":50446,"line_start":51,"line_end":51,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50447,"byte_end":50450,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"! In the second example, we mix `Slice` with `Cobs`, to cobs encode the output while","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50451,"byte_end":50537,"line_start":53,"line_end":53,"column_start":1,"column_end":87}},{"value":"! the data is serialized. Notice how `Slice` (the storage flavor) is the innermost flavor used.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50538,"byte_end":50635,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50636,"byte_end":50639,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50640,"byte_end":50651,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"! use postcard::{","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50652,"byte_end":50671,"line_start":57,"line_end":57,"column_start":1,"column_end":20}},{"value":"!     serialize_with_flavor,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50672,"byte_end":50702,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"!     flavors::{Cobs, Slice},","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50703,"byte_end":50734,"line_start":59,"line_end":59,"column_start":1,"column_end":32}},{"value":"! };","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50735,"byte_end":50741,"line_start":60,"line_end":60,"column_start":1,"column_end":7}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50742,"byte_end":50745,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! let mut buf = [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50746,"byte_end":50774,"line_start":62,"line_end":62,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50775,"byte_end":50778,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! let data: &[u8] = &[0x01, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50779,"byte_end":50827,"line_start":64,"line_end":64,"column_start":1,"column_end":49}},{"value":"! let buffer = &mut [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50828,"byte_end":50860,"line_start":65,"line_end":65,"column_start":1,"column_end":33}},{"value":"! let res = serialize_with_flavor::<[u8], Cobs<Slice>, &mut [u8]>(","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50861,"byte_end":50929,"line_start":66,"line_end":66,"column_start":1,"column_end":69}},{"value":"!     data,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50930,"byte_end":50943,"line_start":67,"line_end":67,"column_start":1,"column_end":14}},{"value":"!     Cobs::try_new(Slice::new(buffer)).unwrap(),","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50944,"byte_end":50995,"line_start":68,"line_end":68,"column_start":1,"column_end":52}},{"value":"! ).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":50996,"byte_end":51011,"line_start":69,"line_end":69,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51012,"byte_end":51015,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! assert_eq!(res, &[0x03, 0x04, 0x01, 0x03, 0x20, 0x30, 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51016,"byte_end":51081,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"! ```","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51082,"byte_end":51089,"line_start":72,"line_end":72,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":191},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51472,"byte_end":51481,"line_start":83,"line_end":83,"column_start":11,"column_end":20},"name":"SerFlavor","qualname":"::ser::flavors::SerFlavor","value":"SerFlavor","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" The SerFlavor trait acts as a combinator/middleware interface that can be used to pass bytes\n through storage or modification flavors. See the module level documentation for more information\n and examples.\n","sig":null,"attributes":[{"value":"/ The SerFlavor trait acts as a combinator/middleware interface that can be used to pass bytes","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51246,"byte_end":51342,"line_start":80,"line_end":80,"column_start":1,"column_end":97}},{"value":"/ through storage or modification flavors. See the module level documentation for more information","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51343,"byte_end":51443,"line_start":81,"line_end":81,"column_start":1,"column_end":101}},{"value":"/ and examples.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51444,"byte_end":51461,"line_start":82,"line_end":82,"column_start":1,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":192},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51773,"byte_end":51779,"line_start":87,"line_end":87,"column_start":10,"column_end":16},"name":"Output","qualname":"::ser::flavors::SerFlavor::Output","value":"type Output;","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" The `Output` type is what this flavor \"resolves\" to when the serialization is complete.\n For storage flavors, this is typically a concrete type. For modification flavors, this is\n typically a generic parameter for the storage flavor they are wrapped around.\n","sig":null,"attributes":[{"value":"/ The `Output` type is what this flavor \"resolves\" to when the serialization is complete.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51488,"byte_end":51579,"line_start":84,"line_end":84,"column_start":5,"column_end":96}},{"value":"/ For storage flavors, this is typically a concrete type. For modification flavors, this is","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51584,"byte_end":51677,"line_start":85,"line_end":85,"column_start":5,"column_end":98}},{"value":"/ typically a generic parameter for the storage flavor they are wrapped around.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51682,"byte_end":51763,"line_start":86,"line_end":86,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52021,"byte_end":52031,"line_start":92,"line_end":92,"column_start":8,"column_end":18},"name":"try_extend","qualname":"::ser::flavors::SerFlavor::try_extend","value":"fn (&mut self, data: &[u8]) -> core::result::Result<(), ()>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" The try_extend() trait method can be implemented when there is a more efficient way of processing\n multiple bytes at once, such as copying a slice to the output, rather than iterating over one byte\n at a time.\n","sig":null,"attributes":[{"value":"/ The try_extend() trait method can be implemented when there is a more efficient way of processing","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51786,"byte_end":51887,"line_start":89,"line_end":89,"column_start":5,"column_end":106}},{"value":"/ multiple bytes at once, such as copying a slice to the output, rather than iterating over one byte","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51892,"byte_end":51994,"line_start":90,"line_end":90,"column_start":5,"column_end":107}},{"value":"/ at a time.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51999,"byte_end":52013,"line_start":91,"line_end":91,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52301,"byte_end":52309,"line_start":99,"line_end":99,"column_start":8,"column_end":16},"name":"try_push","qualname":"::ser::flavors::SerFlavor::try_push","value":"fn (&mut self, data: u8) -> core::result::Result<(), ()>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" The try_push() trait method can be used to push a single byte to be modified and/or stored\n","sig":null,"attributes":[{"value":"/ The try_push() trait method can be used to push a single byte to be modified and/or stored","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52199,"byte_end":52293,"line_start":98,"line_end":98,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52539,"byte_end":52546,"line_start":103,"line_end":103,"column_start":8,"column_end":15},"name":"release","qualname":"::ser::flavors::SerFlavor::release","value":"fn (self) -> core::result::Result<Self::Output, ()>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" The release() trait method finalizes the modification or storage operation, and resolved into\n the type defined by `SerFlavor::Output` associated type.\n","sig":null,"attributes":[{"value":"/ The release() trait method finalizes the modification or storage operation, and resolved into","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52369,"byte_end":52466,"line_start":101,"line_end":101,"column_start":5,"column_end":102}},{"value":"/ the type defined by `SerFlavor::Output` associated type.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52471,"byte_end":52531,"line_start":102,"line_end":102,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":198},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53087,"byte_end":53092,"line_start":116,"line_end":116,"column_start":12,"column_end":17},"name":"Slice","qualname":"::ser::flavors::Slice","value":"Slice {  }","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"decl_id":null,"docs":" The `Slice` flavor is a storage flavor, storing the serialized (or otherwise modified) bytes into a plain\n `[u8]` slice. The `Slice` flavor resolves into a sub-slice of the original slice buffer.\n","sig":null,"attributes":[{"value":"/ The `Slice` flavor is a storage flavor, storing the serialized (or otherwise modified) bytes into a plain","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52873,"byte_end":52982,"line_start":114,"line_end":114,"column_start":1,"column_end":110}},{"value":"/ `[u8]` slice. The `Slice` flavor resolves into a sub-slice of the original slice buffer.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52983,"byte_end":53075,"line_start":115,"line_end":115,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53237,"byte_end":53240,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<Slice>::new","value":"fn (buf: &'a mut [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Slice` flavor from a given backing buffer\n","sig":null,"attributes":[{"value":"/ Create a new `Slice` flavor from a given backing buffer","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53166,"byte_end":53225,"line_start":122,"line_end":122,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":218},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54606,"byte_end":54610,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"HVec","qualname":"::ser::flavors::HVec","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `HVec` flavor is a wrapper type around a `heapless::Vec`. This is a stack\n allocated data structure, with a fixed maximum size and variable amount of contents\n","sig":null,"attributes":[{"value":"/ The `HVec` flavor is a wrapper type around a `heapless::Vec`. This is a stack","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54425,"byte_end":54506,"line_start":180,"line_end":180,"column_start":1,"column_end":82}},{"value":"/ allocated data structure, with a fixed maximum size and variable amount of contents","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54507,"byte_end":54594,"line_start":181,"line_end":181,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57212,"byte_end":57216,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"Cobs","qualname":"::ser::flavors::Cobs","value":"Cobs {  }","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"decl_id":null,"docs":" The `Cobs` flavor implements [Consistent Overhead Byte Stuffing] on\n the serialized data. The output of this flavor includes the termination/sentinel\n byte of `0x00`.","sig":null,"attributes":[{"value":"/ The `Cobs` flavor implements [Consistent Overhead Byte Stuffing] on","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":56810,"byte_end":56881,"line_start":276,"line_end":276,"column_start":1,"column_end":72}},{"value":"/ the serialized data. The output of this flavor includes the termination/sentinel","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":56882,"byte_end":56966,"line_start":277,"line_end":277,"column_start":1,"column_end":85}},{"value":"/ byte of `0x00`.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":56967,"byte_end":56986,"line_start":278,"line_end":278,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":56987,"byte_end":56990,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ This protocol is useful when sending data over a serial interface without framing such as a UART","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":56991,"byte_end":57091,"line_start":280,"line_end":280,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57092,"byte_end":57095,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ [Consistent Overhead Byte Stuffing]: https://en.wikipedia.org/wiki/Consistent_Overhead_Byte_Stuffing","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57096,"byte_end":57200,"line_start":282,"line_end":282,"column_start":1,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57548,"byte_end":57555,"line_start":297,"line_end":297,"column_start":12,"column_end":19},"name":"try_new","qualname":"<Cobs<B>>::try_new","value":"fn (mut bee: B) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Cobs modifier Flavor. If there is insufficient space\n to push the leading header byte, the method will return an Error\n","sig":null,"attributes":[{"value":"/ Create a new Cobs modifier Flavor. If there is insufficient space","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57394,"byte_end":57463,"line_start":295,"line_end":295,"column_start":5,"column_end":74}},{"value":"/ to push the leading header byte, the method will return an Error","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57468,"byte_end":57536,"line_start":296,"line_end":296,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59206,"byte_end":59216,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"Serializer","qualname":"::ser::serializer::Serializer","value":"Serializer { output }","parent":null,"children":[{"krate":0,"index":269}],"decl_id":null,"docs":" A `serde` compatible serializer, generic over \"Flavors\" of serializing plugins.","sig":null,"attributes":[{"value":"/ A `serde` compatible serializer, generic over \"Flavors\" of serializing plugins.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":58854,"byte_end":58937,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":58938,"byte_end":58941,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ It should rarely be necessary to directly use this type unless you are implementing your","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":58942,"byte_end":59034,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/ own [`SerFlavor`].","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59035,"byte_end":59057,"line_start":11,"line_end":11,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59058,"byte_end":59061,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ See the docs for [`SerFlavor`] for more information about \"flavors\" of serialization","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59062,"byte_end":59150,"line_start":13,"line_end":13,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59151,"byte_end":59154,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`SerFlavor`]: trait.SerFlavor.html","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59155,"byte_end":59194,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":269},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59366,"byte_end":59372,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"name":"output","qualname":"::ser::serializer::Serializer::output","value":"F","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" This is the Flavor(s) that will be used to modify or store any bytes generated\n by serialization\n","sig":null,"attributes":[{"value":"/ This is the Flavor(s) that will be used to modify or store any bytes generated","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59250,"byte_end":59332,"line_start":20,"line_end":20,"column_start":5,"column_end":87}},{"value":"/ by serialization","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59337,"byte_end":59357,"line_start":21,"line_end":21,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":387},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33906,"byte_end":33919,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"to_slice_cobs","qualname":"::ser::to_slice_cobs","value":"fn <'a, 'b, T> (value: &'b T, buf: &'a mut [u8]) -> Result<&'a mut [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a `T` to the given slice, with the resulting slice containing\n data in a serialized then COBS encoded format. The terminating sentinel `0x00` byte is included\n in the output buffer.","sig":null,"attributes":[{"value":"/ Serialize a `T` to the given slice, with the resulting slice containing","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":32877,"byte_end":32952,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ data in a serialized then COBS encoded format. The terminating sentinel `0x00` byte is included","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":32953,"byte_end":33052,"line_start":17,"line_end":17,"column_start":1,"column_end":100}},{"value":"/ in the output buffer.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33053,"byte_end":33078,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33079,"byte_end":33082,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ When successful, this function returns the slices containing:","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33083,"byte_end":33148,"line_start":20,"line_end":20,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33149,"byte_end":33152,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ 1. A slice that contains the serialized and encoded message","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33153,"byte_end":33216,"line_start":22,"line_end":22,"column_start":1,"column_end":64}},{"value":"/ 2. A slice that contains the unused portion of the given buffer","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33217,"byte_end":33284,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33285,"byte_end":33288,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33289,"byte_end":33303,"line_start":25,"line_end":25,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33304,"byte_end":33307,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33308,"byte_end":33319,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ use postcard::to_slice_cobs;","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33320,"byte_end":33352,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"/ let mut buf = [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33353,"byte_end":33381,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33382,"byte_end":33385,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let used = to_slice_cobs(&false, &mut buf).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33386,"byte_end":33442,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(used, &[0x01, 0x01, 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33443,"byte_end":33485,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33486,"byte_end":33489,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let used = to_slice_cobs(\"1\", &mut buf).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33490,"byte_end":33543,"line_start":34,"line_end":34,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(used, &[0x03, 0x01, b'1', 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33544,"byte_end":33592,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33593,"byte_end":33596,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let used = to_slice_cobs(\"Hi!\", &mut buf).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33597,"byte_end":33652,"line_start":37,"line_end":37,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(used, &[0x05, 0x03, b'H', b'i', b'!', 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33653,"byte_end":33713,"line_start":38,"line_end":38,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33714,"byte_end":33717,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let data: &[u8] = &[0x01u8, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33718,"byte_end":33768,"line_start":40,"line_end":40,"column_start":1,"column_end":51}},{"value":"/ let used = to_slice_cobs(data, &mut buf).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33769,"byte_end":33823,"line_start":41,"line_end":41,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(used, &[0x03, 0x04, 0x01, 0x03, 0x20, 0x30, 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33824,"byte_end":33890,"line_start":42,"line_end":42,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33891,"byte_end":33898,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":391},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35134,"byte_end":35142,"line_start":83,"line_end":83,"column_start":8,"column_end":16},"name":"to_slice","qualname":"::ser::to_slice","value":"fn <'a, 'b, T> (value: &'b T, buf: &'a mut [u8]) -> Result<&'a mut [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a `T` to the given slice, with the resulting slice containing\n data in a serialized format.","sig":null,"attributes":[{"value":"/ Serialize a `T` to the given slice, with the resulting slice containing","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34151,"byte_end":34226,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ data in a serialized format.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34227,"byte_end":34259,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34260,"byte_end":34263,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ When successful, this function returns the slices containing:","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34264,"byte_end":34329,"line_start":57,"line_end":57,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34330,"byte_end":34333,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ 1. A slice that contains the serialized message","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34334,"byte_end":34385,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/ 2. A slice that contains the unused portion of the given buffer","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34386,"byte_end":34453,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34454,"byte_end":34457,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34458,"byte_end":34472,"line_start":62,"line_end":62,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34473,"byte_end":34476,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34477,"byte_end":34488,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"/ use postcard::to_slice;","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34489,"byte_end":34516,"line_start":65,"line_end":65,"column_start":1,"column_end":28}},{"value":"/ let mut buf = [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34517,"byte_end":34545,"line_start":66,"line_end":66,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34546,"byte_end":34549,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ let used = to_slice(&true, &mut buf).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34550,"byte_end":34600,"line_start":68,"line_end":68,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(used, &[0x01]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34601,"byte_end":34631,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34632,"byte_end":34635,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let used = to_slice(\"Hi!\", &mut buf).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34636,"byte_end":34686,"line_start":71,"line_end":71,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(used, &[0x03, b'H', b'i', b'!']);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34687,"byte_end":34735,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34736,"byte_end":34739,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // NOTE: postcard handles `&[u8]` and `&[u8; N]` differently.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34740,"byte_end":34805,"line_start":74,"line_end":74,"column_start":1,"column_end":66}},{"value":"/ let data: &[u8] = &[0x01u8, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34806,"byte_end":34856,"line_start":75,"line_end":75,"column_start":1,"column_end":51}},{"value":"/ let used = to_slice(data, &mut buf).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34857,"byte_end":34906,"line_start":76,"line_end":76,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(used, &[0x04, 0x01, 0x00, 0x20, 0x30]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34907,"byte_end":34961,"line_start":77,"line_end":77,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34962,"byte_end":34965,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ let data: &[u8; 4] = &[0x01u8, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":34966,"byte_end":35019,"line_start":79,"line_end":79,"column_start":1,"column_end":54}},{"value":"/ let used = to_slice(data, &mut buf).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35020,"byte_end":35069,"line_start":80,"line_end":80,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(used, &[0x01, 0x00, 0x20, 0x30]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35070,"byte_end":35118,"line_start":81,"line_end":81,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35119,"byte_end":35126,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":395},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36343,"byte_end":36354,"line_start":116,"line_end":116,"column_start":8,"column_end":19},"name":"to_vec_cobs","qualname":"::ser::to_vec_cobs","value":"fn <B, T> (value: &T) -> Result<Vec<u8, B>>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a `T` to a `heapless::Vec<u8>`, with the `Vec` containing\n data in a serialized then COBS encoded format. The terminating sentinel\n `0x00` byte is included in the output `Vec`.","sig":null,"attributes":[{"value":"/ Serialize a `T` to a `heapless::Vec<u8>`, with the `Vec` containing","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35329,"byte_end":35400,"line_start":90,"line_end":90,"column_start":1,"column_end":72}},{"value":"/ data in a serialized then COBS encoded format. The terminating sentinel","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35401,"byte_end":35476,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ `0x00` byte is included in the output `Vec`.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35477,"byte_end":35525,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35526,"byte_end":35529,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35530,"byte_end":35544,"line_start":94,"line_end":94,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35545,"byte_end":35548,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35549,"byte_end":35560,"line_start":96,"line_end":96,"column_start":1,"column_end":12}},{"value":"/ use postcard::to_vec_cobs;","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35561,"byte_end":35591,"line_start":97,"line_end":97,"column_start":1,"column_end":31}},{"value":"/ use heapless::{Vec, consts::*};","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35592,"byte_end":35627,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"/ use core::ops::Deref;","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35628,"byte_end":35653,"line_start":99,"line_end":99,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35654,"byte_end":35657,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ let ser: Vec<u8, U32> = to_vec_cobs(&false).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35658,"byte_end":35715,"line_start":101,"line_end":101,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(ser.deref(), &[0x01, 0x01, 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35716,"byte_end":35765,"line_start":102,"line_end":102,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35766,"byte_end":35769,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ let ser: Vec<u8, U32> = to_vec_cobs(\"Hi!\").unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35770,"byte_end":35826,"line_start":104,"line_end":104,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(ser.deref(), &[0x05, 0x03, b'H', b'i', b'!', 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35827,"byte_end":35894,"line_start":105,"line_end":105,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35895,"byte_end":35898,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ // NOTE: postcard handles `&[u8]` and `&[u8; N]` differently.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35899,"byte_end":35964,"line_start":107,"line_end":107,"column_start":1,"column_end":66}},{"value":"/ let data: &[u8] = &[0x01u8, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35965,"byte_end":36015,"line_start":108,"line_end":108,"column_start":1,"column_end":51}},{"value":"/ let ser: Vec<u8, U32> = to_vec_cobs(data).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36016,"byte_end":36071,"line_start":109,"line_end":109,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(ser.deref(), &[0x03, 0x04, 0x01, 0x03, 0x20, 0x30, 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36072,"byte_end":36145,"line_start":110,"line_end":110,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36146,"byte_end":36149,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ let data: &[u8; 4] = &[0x01u8, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36150,"byte_end":36203,"line_start":112,"line_end":112,"column_start":1,"column_end":54}},{"value":"/ let ser: Vec<u8, U32> = to_vec_cobs(data).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36204,"byte_end":36259,"line_start":113,"line_end":113,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(ser.deref(), &[0x02, 0x01, 0x03, 0x20, 0x30, 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36260,"byte_end":36327,"line_start":114,"line_end":114,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36328,"byte_end":36335,"line_start":115,"line_end":115,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":398},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37402,"byte_end":37408,"line_start":149,"line_end":149,"column_start":8,"column_end":14},"name":"to_vec","qualname":"::ser::to_vec","value":"fn <B, T> (value: &T) -> Result<Vec<u8, B>>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a `T` to a `heapless::Vec<u8>`, with the `Vec` containing\n data in a serialized format.","sig":null,"attributes":[{"value":"/ Serialize a `T` to a `heapless::Vec<u8>`, with the `Vec` containing","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36554,"byte_end":36625,"line_start":124,"line_end":124,"column_start":1,"column_end":72}},{"value":"/ data in a serialized format.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36626,"byte_end":36658,"line_start":125,"line_end":125,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36659,"byte_end":36662,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36663,"byte_end":36677,"line_start":127,"line_end":127,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36678,"byte_end":36681,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36682,"byte_end":36693,"line_start":129,"line_end":129,"column_start":1,"column_end":12}},{"value":"/ use postcard::to_vec;","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36694,"byte_end":36719,"line_start":130,"line_end":130,"column_start":1,"column_end":26}},{"value":"/ use heapless::{Vec, consts::*};","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36720,"byte_end":36755,"line_start":131,"line_end":131,"column_start":1,"column_end":36}},{"value":"/ use core::ops::Deref;","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36756,"byte_end":36781,"line_start":132,"line_end":132,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36782,"byte_end":36785,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ let ser: Vec<u8, U32> = to_vec(&true).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36786,"byte_end":36837,"line_start":134,"line_end":134,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(ser.deref(), &[0x01]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36838,"byte_end":36875,"line_start":135,"line_end":135,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36876,"byte_end":36879,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ let ser: Vec<u8, U32> = to_vec(\"Hi!\").unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36880,"byte_end":36931,"line_start":137,"line_end":137,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(ser.deref(), &[0x03, b'H', b'i', b'!']);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36932,"byte_end":36987,"line_start":138,"line_end":138,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36988,"byte_end":36991,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ // NOTE: postcard handles `&[u8]` and `&[u8; N]` differently.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36992,"byte_end":37057,"line_start":140,"line_end":140,"column_start":1,"column_end":66}},{"value":"/ let data: &[u8] = &[0x01u8, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37058,"byte_end":37108,"line_start":141,"line_end":141,"column_start":1,"column_end":51}},{"value":"/ let ser: Vec<u8, U32> = to_vec(data).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37109,"byte_end":37159,"line_start":142,"line_end":142,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(ser.deref(), &[0x04, 0x01, 0x00, 0x20, 0x30]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37160,"byte_end":37221,"line_start":143,"line_end":143,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37222,"byte_end":37225,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ let data: &[u8; 4] = &[0x01u8, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37226,"byte_end":37279,"line_start":145,"line_end":145,"column_start":1,"column_end":54}},{"value":"/ let ser: Vec<u8, U32> = to_vec(data).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37280,"byte_end":37330,"line_start":146,"line_end":146,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(ser.deref(), &[0x01, 0x00, 0x20, 0x30]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37331,"byte_end":37386,"line_start":147,"line_end":147,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37387,"byte_end":37394,"line_start":148,"line_end":148,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":401},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39743,"byte_end":39764,"line_start":230,"line_end":230,"column_start":8,"column_end":29},"name":"serialize_with_flavor","qualname":"::ser::serialize_with_flavor","value":"fn <T, F, O> (value: &T, flavor: F) -> Result<O>","parent":null,"children":[],"decl_id":null,"docs":" `serialize_with_flavor()` has three generic parameters, `T, F, O`.","sig":null,"attributes":[{"value":"/ `serialize_with_flavor()` has three generic parameters, `T, F, O`.","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":38854,"byte_end":38924,"line_start":204,"line_end":204,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":38925,"byte_end":38928,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ * `T`: This is the type that is being serialized","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":38929,"byte_end":38981,"line_start":206,"line_end":206,"column_start":1,"column_end":53}},{"value":"/ * `F`: This is the Flavor (combination) that is used during serialization","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":38982,"byte_end":39059,"line_start":207,"line_end":207,"column_start":1,"column_end":78}},{"value":"/ * `O`: This is the resulting storage type that is returned containing the serialized data","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39060,"byte_end":39153,"line_start":208,"line_end":208,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39154,"byte_end":39157,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ For more information about how Flavors work, please see the","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39158,"byte_end":39221,"line_start":210,"line_end":210,"column_start":1,"column_end":64}},{"value":"/ [`flavors` module documentation](./flavors/index.html).","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39222,"byte_end":39281,"line_start":211,"line_end":211,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39282,"byte_end":39285,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39286,"byte_end":39297,"line_start":213,"line_end":213,"column_start":1,"column_end":12}},{"value":"/ use postcard::{","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39298,"byte_end":39317,"line_start":214,"line_end":214,"column_start":1,"column_end":20}},{"value":"/     serialize_with_flavor,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39318,"byte_end":39348,"line_start":215,"line_end":215,"column_start":1,"column_end":31}},{"value":"/     flavors::{Cobs, Slice},","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39349,"byte_end":39380,"line_start":216,"line_end":216,"column_start":1,"column_end":32}},{"value":"/ };","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39381,"byte_end":39387,"line_start":217,"line_end":217,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39388,"byte_end":39391,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39392,"byte_end":39420,"line_start":219,"line_end":219,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39421,"byte_end":39424,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ let data: &[u8] = &[0x01, 0x00, 0x20, 0x30];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39425,"byte_end":39473,"line_start":221,"line_end":221,"column_start":1,"column_end":49}},{"value":"/ let buffer = &mut [0u8; 32];","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39474,"byte_end":39506,"line_start":222,"line_end":222,"column_start":1,"column_end":33}},{"value":"/ let res = serialize_with_flavor::<[u8], Cobs<Slice>, &mut [u8]>(","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39507,"byte_end":39575,"line_start":223,"line_end":223,"column_start":1,"column_end":69}},{"value":"/     data,","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39576,"byte_end":39589,"line_start":224,"line_end":224,"column_start":1,"column_end":14}},{"value":"/     Cobs::try_new(Slice::new(buffer)).unwrap(),","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39590,"byte_end":39641,"line_start":225,"line_end":225,"column_start":1,"column_end":52}},{"value":"/ ).unwrap();","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39642,"byte_end":39657,"line_start":226,"line_end":226,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39658,"byte_end":39661,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(res, &[0x03, 0x04, 0x01, 0x03, 0x20, 0x30, 0x00]);","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39662,"byte_end":39727,"line_start":228,"line_end":228,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39728,"byte_end":39735,"line_start":229,"line_end":229,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17796,"byte_end":17808,"line_start":23,"line_end":23,"column_start":11,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17968,"byte_end":17980,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":19008,"byte_end":19017,"line_start":65,"line_end":65,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30697,"byte_end":30702,"line_start":38,"line_end":38,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32279,"byte_end":32284,"line_start":71,"line_end":71,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32422,"byte_end":32427,"line_start":80,"line_end":80,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32568,"byte_end":32573,"line_start":89,"line_end":89,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53150,"byte_end":53155,"line_start":121,"line_end":121,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53332,"byte_end":53337,"line_start":128,"line_end":128,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54096,"byte_end":54101,"line_start":162,"line_end":162,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54233,"byte_end":54238,"line_start":170,"line_end":170,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54671,"byte_end":54675,"line_start":184,"line_end":184,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55161,"byte_end":55165,"line_start":205,"line_end":205,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55310,"byte_end":55314,"line_start":213,"line_end":213,"column_start":46,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55444,"byte_end":55448,"line_start":219,"line_end":219,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57325,"byte_end":57329,"line_start":291,"line_end":291,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57782,"byte_end":57786,"line_start":306,"line_end":306,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/varint.rs","byte_start":68131,"byte_end":68142,"line_start":8,"line_end":8,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/varint.rs","byte_start":68725,"byte_end":68736,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":32840,"byte_end":32847,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":179}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17796,"byte_end":17808,"line_start":23,"line_end":23,"column_start":11,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17968,"byte_end":17980,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":19008,"byte_end":19017,"line_start":65,"line_end":65,"column_start":47,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":30},"to":{"krate":5,"index":971}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30697,"byte_end":30702,"line_start":38,"line_end":38,"column_start":18,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":441},"to":{"krate":1,"index":5889}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32279,"byte_end":32284,"line_start":71,"line_end":71,"column_start":28,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":441},"to":{"krate":5,"index":6544}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32422,"byte_end":32427,"line_start":80,"line_end":80,"column_start":27,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":441},"to":{"krate":5,"index":6028}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32568,"byte_end":32573,"line_start":89,"line_end":89,"column_start":31,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":441},"to":{"krate":5,"index":1549}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53150,"byte_end":53155,"line_start":121,"line_end":121,"column_start":10,"column_end":15},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53332,"byte_end":53337,"line_start":128,"line_end":128,"column_start":24,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":198},"to":{"krate":0,"index":191}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54096,"byte_end":54101,"line_start":162,"line_end":162,"column_start":27,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":2099}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54233,"byte_end":54238,"line_start":170,"line_end":170,"column_start":30,"column_end":35},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":2103}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54671,"byte_end":54675,"line_start":184,"line_end":184,"column_start":27,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":218},"to":{"krate":0,"index":191}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55161,"byte_end":55165,"line_start":205,"line_end":205,"column_start":43,"column_end":47},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":2099}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55310,"byte_end":55314,"line_start":213,"line_end":213,"column_start":46,"column_end":50},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":2103}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55444,"byte_end":55448,"line_start":219,"line_end":219,"column_start":38,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":1843}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57325,"byte_end":57329,"line_start":291,"line_end":291,"column_start":9,"column_end":13},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57782,"byte_end":57786,"line_start":306,"line_end":306,"column_start":27,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":240},"to":{"krate":0,"index":191}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/varint.rs","byte_start":68131,"byte_end":68142,"line_start":8,"line_end":8,"column_start":20,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":478},"to":{"krate":5,"index":1212}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/varint.rs","byte_start":68725,"byte_end":68736,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":478},"to":{"krate":4294967295,"index":4294967295}}]}