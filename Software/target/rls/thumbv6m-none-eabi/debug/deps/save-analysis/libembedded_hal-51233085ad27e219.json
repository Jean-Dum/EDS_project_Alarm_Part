{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3","program":"/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","embedded_hal","/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=1","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"unproven\"","-C","metadata=51233085ad27e219","-C","extra-filename=-51233085ad27e219","--out-dir","/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps","--target","thumbv6m-none-eabi","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/debug/deps","--extern","nb=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps/libnb-aa3c8f0852d71716.rmeta","--extern","void=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps/libvoid-2778171e46829409.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv6m-none-eabi/debug/deps/libembedded_hal-51233085ad27e219.rmeta"},"prelude":{"crate_id":{"name":"embedded_hal","disambiguator":[12305884280043103651,13622907464616288457]},"crate_root":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src","external_crates":[{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17860656607429628872,7899905306774645774]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12612412396037403104,10036660482193044370]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14692023445700134427,11043489410451781886]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","num":4,"id":{"name":"nb","disambiguator":[7924499734892593888,4823303981110679680]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","num":5,"id":{"name":"void","disambiguator":[9640493596983872406,13458916636450077426]}}],"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":0,"byte_end":29397,"line_start":1,"line_end":995,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/mod.rs","byte_start":43914,"byte_end":43915,"line_start":24,"line_end":24,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"ToggleableOutputPin, InputPin, OutputPin","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":12},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62366,"byte_end":62373,"line_start":7,"line_end":7,"column_start":14,"column_end":21},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62377,"byte_end":62402,"line_start":7,"line_end":7,"column_start":25,"column_end":50},"name":"_embedded_hal_adc_OneShot","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":20},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62429,"byte_end":62436,"line_start":8,"line_end":8,"column_start":26,"column_end":33},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62440,"byte_end":62476,"line_start":8,"line_end":8,"column_start":37,"column_end":73},"name":"_embedded_hal_blocking_delay_DelayMs","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":23},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62503,"byte_end":62510,"line_start":9,"line_end":9,"column_start":26,"column_end":33},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62514,"byte_end":62550,"line_start":9,"line_end":9,"column_start":37,"column_end":73},"name":"_embedded_hal_blocking_delay_DelayUs","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62581,"byte_end":62585,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62589,"byte_end":62620,"line_start":11,"line_end":11,"column_start":13,"column_end":44},"name":"_embedded_hal_blocking_i2c_Read","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62622,"byte_end":62627,"line_start":11,"line_end":11,"column_start":46,"column_end":51},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62631,"byte_end":62663,"line_start":11,"line_end":11,"column_start":55,"column_end":87},"name":"_embedded_hal_blocking_i2c_Write","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62669,"byte_end":62678,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62682,"byte_end":62718,"line_start":12,"line_end":12,"column_start":18,"column_end":54},"name":"_embedded_hal_blocking_i2c_WriteRead","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62775,"byte_end":62779,"line_start":15,"line_end":15,"column_start":24,"column_end":28},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62783,"byte_end":62814,"line_start":15,"line_end":15,"column_start":32,"column_end":63},"name":"_embedded_hal_blocking_rng_Read","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":49},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62842,"byte_end":62847,"line_start":16,"line_end":16,"column_start":27,"column_end":32},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62851,"byte_end":62886,"line_start":16,"line_end":16,"column_start":36,"column_end":71},"name":"_embedded_hal_blocking_serial_Write","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":64},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62917,"byte_end":62925,"line_start":18,"line_end":18,"column_start":5,"column_end":13},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62929,"byte_end":62964,"line_start":18,"line_end":18,"column_start":17,"column_end":52},"name":"_embedded_hal_blocking_spi_Transfer","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":69},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62966,"byte_end":62971,"line_start":18,"line_end":18,"column_start":54,"column_end":59},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":62975,"byte_end":63007,"line_start":18,"line_end":18,"column_start":63,"column_end":95},"name":"_embedded_hal_blocking_spi_Write","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63079,"byte_end":63087,"line_start":22,"line_end":22,"column_start":18,"column_end":26},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63091,"byte_end":63121,"line_start":22,"line_end":22,"column_start":30,"column_end":60},"name":"_embedded_hal_digital_InputPin","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":106},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63161,"byte_end":63170,"line_start":24,"line_end":24,"column_start":18,"column_end":27},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63174,"byte_end":63205,"line_start":24,"line_end":24,"column_start":31,"column_end":62},"name":"_embedded_hal_digital_OutputPin","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":112},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63274,"byte_end":63293,"line_start":27,"line_end":27,"column_start":18,"column_end":37},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63297,"byte_end":63338,"line_start":27,"line_end":27,"column_start":41,"column_end":82},"name":"_embedded_hal_digital_ToggleableOutputPin","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":247},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63356,"byte_end":63360,"line_start":28,"line_end":28,"column_start":17,"column_end":21},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63364,"byte_end":63389,"line_start":28,"line_end":28,"column_start":25,"column_end":50},"name":"_embedded_hal_serial_Read","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63407,"byte_end":63412,"line_start":29,"line_end":29,"column_start":17,"column_end":22},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63416,"byte_end":63442,"line_start":29,"line_end":29,"column_start":26,"column_end":52},"name":"_embedded_hal_serial_Write","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":258},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63457,"byte_end":63467,"line_start":30,"line_end":30,"column_start":14,"column_end":24},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63471,"byte_end":63499,"line_start":30,"line_end":30,"column_start":28,"column_end":56},"name":"_embedded_hal_spi_FullDuplex","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":270},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63516,"byte_end":63525,"line_start":31,"line_end":31,"column_start":16,"column_end":25},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63529,"byte_end":63558,"line_start":31,"line_end":31,"column_start":29,"column_end":58},"name":"_embedded_hal_timer_CountDown","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":280},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63607,"byte_end":63615,"line_start":33,"line_end":33,"column_start":19,"column_end":27},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63619,"byte_end":63650,"line_start":33,"line_end":33,"column_start":31,"column_end":62},"name":"_embedded_hal_watchdog_Watchdog","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63699,"byte_end":63714,"line_start":35,"line_end":35,"column_start":19,"column_end":34},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63718,"byte_end":63756,"line_start":35,"line_end":35,"column_start":38,"column_end":76},"name":"_embedded_hal_watchdog_WatchdogDisable","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":282},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63805,"byte_end":63819,"line_start":37,"line_end":37,"column_start":19,"column_end":33},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63823,"byte_end":63860,"line_start":37,"line_end":37,"column_start":37,"column_end":74},"name":"_embedded_hal_watchdog_WatchdogEnable","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63899,"byte_end":63906,"line_start":39,"line_end":39,"column_start":9,"column_end":16},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63910,"byte_end":63931,"line_start":39,"line_end":39,"column_start":20,"column_end":41},"name":"_embedded_hal_Capture","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63970,"byte_end":63973,"line_start":41,"line_end":41,"column_start":9,"column_end":12},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":63977,"byte_end":63994,"line_start":41,"line_end":41,"column_start":16,"column_end":33},"name":"_embedded_hal_Pwm","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":311},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":64004,"byte_end":64010,"line_start":42,"line_end":42,"column_start":9,"column_end":15},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":64014,"byte_end":64034,"line_start":42,"line_end":42,"column_start":19,"column_end":39},"name":"_embedded_hal_PwmPin","value":"","parent":{"krate":0,"index":218}},{"kind":"Use","ref_id":{"krate":0,"index":318},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":64073,"byte_end":64076,"line_start":44,"line_end":44,"column_start":9,"column_end":12},"alias_span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":64080,"byte_end":64097,"line_start":44,"line_end":44,"column_start":16,"column_end":33},"name":"_embedded_hal_Qei","value":"","parent":{"krate":0,"index":218}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":0,"byte_end":29397,"line_start":1,"line_end":995,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":18},{"krate":0,"index":104},{"krate":0,"index":209},{"krate":0,"index":218},{"krate":0,"index":245},{"krate":0,"index":256},{"krate":0,"index":267},{"krate":0,"index":279},{"krate":0,"index":288},{"krate":0,"index":299},{"krate":0,"index":311},{"krate":0,"index":318},{"krate":0,"index":363},{"krate":0,"index":377},{"krate":0,"index":376},{"krate":0,"index":374},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":368},{"krate":0,"index":369}],"decl_id":null,"docs":" A Hardware Abstraction Layer (HAL) for embedded systems","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20504,"byte_end":20526,"line_start":685,"line_end":685,"column_start":1,"column_end":23}},{"value":"deny(warnings)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20527,"byte_end":20545,"line_start":686,"line_end":686,"column_start":1,"column_end":19}},{"value":"no_std","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20546,"byte_end":20556,"line_start":687,"line_end":687,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adc","qualname":"::adc","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":12}],"decl_id":null,"docs":" Analog-digital conversion traits\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":8},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","byte_start":30942,"byte_end":30949,"line_start":39,"line_end":39,"column_start":11,"column_end":18},"name":"Channel","qualname":"::adc::Channel","value":"Channel<ADC>","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11}],"decl_id":null,"docs":" A marker trait to identify MCU pins that can be used as inputs to an ADC channel.","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","byte_start":30903,"byte_end":30931,"line_start":38,"line_end":38,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":10},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","byte_start":31232,"byte_end":31234,"line_start":45,"line_end":45,"column_start":10,"column_end":12},"name":"ID","qualname":"::adc::Channel::ID","value":"type ID;","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Channel ID type","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","byte_start":31375,"byte_end":31382,"line_start":49,"line_end":49,"column_start":8,"column_end":15},"name":"channel","qualname":"::adc::Channel::channel","value":"fn () -> Self::ID","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Get the specific ID that identifies this channel, for example `0_u8` for the first ADC\n channel, if Self::ID is u8.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":12},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","byte_start":32695,"byte_end":32702,"line_start":89,"line_end":89,"column_start":11,"column_end":18},"name":"OneShot","qualname":"::adc::OneShot","value":"OneShot<ADC, Word, Pin: Channel<ADC>>","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17}],"decl_id":null,"docs":" ADCs that sample on single channels per request, and do so at the time of the request.","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","byte_start":32656,"byte_end":32684,"line_start":88,"line_end":88,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","byte_start":32787,"byte_end":32792,"line_start":91,"line_end":91,"column_start":10,"column_end":15},"name":"Error","qualname":"::adc::OneShot::Error","value":"type Error;","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Error type returned by ADC methods\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/adc.rs","byte_start":33022,"byte_end":33026,"line_start":97,"line_end":97,"column_start":8,"column_end":12},"name":"read","qualname":"::adc::OneShot::read","value":"fn (&mut self, pin: &mut Pin) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Request that the ADC begin a conversion on the specified pin","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blocking","qualname":"::blocking","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/mod.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":26},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":63}],"decl_id":null,"docs":" Blocking API","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":19},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/delay.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"delay","qualname":"::blocking::delay","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/delay.rs","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":23}],"decl_id":null,"docs":" Delays","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":20},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/delay.rs","byte_start":34083,"byte_end":34090,"line_start":14,"line_end":14,"column_start":11,"column_end":18},"name":"DelayMs","qualname":"::blocking::delay::DelayMs","value":"DelayMs<UXX>","parent":null,"children":[{"krate":0,"index":22}],"decl_id":null,"docs":" Millisecond delay","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/delay.rs","byte_start":34152,"byte_end":34160,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"delay_ms","qualname":"::blocking::delay::DelayMs::delay_ms","value":"fn (&mut self, ms: UXX) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Pauses execution for `ms` milliseconds\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/delay.rs","byte_start":34377,"byte_end":34384,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"DelayUs","qualname":"::blocking::delay::DelayUs","value":"DelayUs<UXX>","parent":null,"children":[{"krate":0,"index":25}],"decl_id":null,"docs":" Microsecond delay","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/delay.rs","byte_start":34446,"byte_end":34454,"line_start":25,"line_end":25,"column_start":8,"column_end":16},"name":"delay_us","qualname":"::blocking::delay::DelayUs::delay_us","value":"fn (&mut self, us: UXX) -> ()","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Pauses execution for `us` microseconds\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i2c","qualname":"::blocking::i2c","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":37},{"krate":0,"index":40}],"decl_id":null,"docs":" Blocking I2C API","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":34760,"byte_end":34764,"line_start":9,"line_end":9,"column_start":11,"column_end":15},"name":"Read","qualname":"::blocking::i2c::Read","value":"Read","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"decl_id":null,"docs":" Blocking read\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":34795,"byte_end":34800,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::Read::Error","value":"type Error;","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":35380,"byte_end":35384,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"read","qualname":"::blocking::i2c::Read::read","value":"fn (&mut self, address: u8, buffer: &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads enough bytes from slave with `address` to fill `buffer`","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":35488,"byte_end":35493,"line_start":35,"line_end":35,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::i2c::Write","value":"Write","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":31},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":35524,"byte_end":35529,"line_start":37,"line_end":37,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::Write::Error","value":"type Error;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":36013,"byte_end":36018,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"write","qualname":"::blocking::i2c::Write::write","value":"fn (&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr`","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":33},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":36162,"byte_end":36171,"line_start":60,"line_end":60,"column_start":11,"column_end":20},"name":"WriteIter","qualname":"::blocking::i2c::WriteIter","value":"WriteIter","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35}],"decl_id":null,"docs":" Blocking write (iterator version)\n","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":36123,"byte_end":36151,"line_start":59,"line_end":59,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":36202,"byte_end":36207,"line_start":62,"line_end":62,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteIter::Error","value":"type Error;","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":36338,"byte_end":36343,"line_start":69,"line_end":69,"column_start":8,"column_end":13},"name":"write","qualname":"::blocking::i2c::WriteIter::write","value":"fn <B> (&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr`","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":36490,"byte_end":36499,"line_start":75,"line_end":75,"column_start":11,"column_end":20},"name":"WriteRead","qualname":"::blocking::i2c::WriteRead","value":"WriteRead","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" Blocking write + read\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":36530,"byte_end":36535,"line_start":77,"line_end":77,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteRead::Error","value":"type Error;","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":37415,"byte_end":37425,"line_start":101,"line_end":101,"column_start":8,"column_end":18},"name":"write_read","qualname":"::blocking::i2c::WriteRead::write_read","value":"fn (&mut self, address: u8, bytes: &[u8], buffer: &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr` and then reads enough bytes to fill `buffer` *in a\n single transaction*","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":40},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":37637,"byte_end":37650,"line_start":111,"line_end":111,"column_start":11,"column_end":24},"name":"WriteIterRead","qualname":"::blocking::i2c::WriteIterRead","value":"WriteIterRead","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"decl_id":null,"docs":" Blocking write (iterator version) + read\n","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":37598,"byte_end":37626,"line_start":110,"line_end":110,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":41},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":37681,"byte_end":37686,"line_start":113,"line_end":113,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteIterRead::Error","value":"type Error;","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/i2c.rs","byte_start":37910,"byte_end":37925,"line_start":121,"line_end":121,"column_start":8,"column_end":23},"name":"write_iter_read","qualname":"::blocking::i2c::WriteIterRead::write_iter_read","value":"fn <B> (&mut self, address: u8, bytes: B, buffer: &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr` and then reads enough bytes to fill `buffer` *in a\n single transaction*","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":44},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/rng.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rng","qualname":"::blocking::rng","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/rng.rs","parent":null,"children":[{"krate":0,"index":45}],"decl_id":null,"docs":" Blocking hardware random number generator\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/rng.rs","byte_start":38295,"byte_end":38299,"line_start":7,"line_end":7,"column_start":11,"column_end":15},"name":"Read","qualname":"::blocking::rng::Read","value":"Read","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" Blocking read","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/rng.rs","byte_start":38256,"byte_end":38284,"line_start":6,"line_end":6,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/rng.rs","byte_start":38330,"byte_end":38335,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::rng::Read::Error","value":"type Error;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/rng.rs","byte_start":38757,"byte_end":38761,"line_start":18,"line_end":18,"column_start":8,"column_end":12},"name":"read","qualname":"::blocking::rng::Read::read","value":"fn (&mut self, buffer: &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Reads enough bytes from hardware random number generator to fill `buffer`","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serial","qualname":"::blocking::serial","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":54}],"decl_id":null,"docs":" Blocking serial API\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":38914,"byte_end":38919,"line_start":4,"line_end":4,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::serial::Write","value":"Write<Word>","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" Write half of a serial interface (blocking variant)\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":51},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":38991,"byte_end":38996,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::serial::Write::Error","value":"type Error;","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" The type of error that can occur when writing\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":39433,"byte_end":39443,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"bwrite_all","qualname":"::blocking::serial::Write::bwrite_all","value":"fn (&mut self, buffer: &[Word]) -> Result<(), Self::Error>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Writes a slice, blocking until everything has been written","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":39577,"byte_end":39583,"line_start":19,"line_end":19,"column_start":8,"column_end":14},"name":"bflush","qualname":"::blocking::serial::Write::bflush","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Block until the serial interface has sent all buffered words\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":39660,"byte_end":39665,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"name":"write","qualname":"::blocking::serial::write","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":57}],"decl_id":null,"docs":" Blocking serial write\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":40097,"byte_end":40104,"line_start":32,"line_end":32,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::serial::write::Default","value":"Default<Word>: ::serial::Write<Word>","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to opt into default blocking write implementation","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":63},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spi","qualname":"::blocking::spi","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":78},{"krate":0,"index":87},{"krate":0,"index":95}],"decl_id":null,"docs":" Blocking SPI API\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":64},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":40682,"byte_end":40690,"line_start":4,"line_end":4,"column_start":11,"column_end":19},"name":"Transfer","qualname":"::blocking::spi::Transfer","value":"Transfer<W>","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"decl_id":null,"docs":" Blocking transfer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":66},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":40724,"byte_end":40729,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::Transfer::Error","value":"type Error;","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":40819,"byte_end":40827,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"transfer","qualname":"::blocking::spi::Transfer::transfer","value":"fn <'w> (&mut self, words: &'w mut [W]) -> Result<&'w [W], Self::Error>","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Sends `words` to the slave. Returns the `words` received from the slave\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":69},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":40928,"byte_end":40933,"line_start":13,"line_end":13,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::spi::Write","value":"Write<W>","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":71},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":40967,"byte_end":40972,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::Write::Error","value":"type Error;","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41050,"byte_end":41055,"line_start":18,"line_end":18,"column_start":8,"column_end":13},"name":"write","qualname":"::blocking::spi::Write::write","value":"fn (&mut self, words: &[W]) -> Result<(), Self::Error>","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Sends `words` to the slave, ignoring all the incoming words\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":73},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41188,"byte_end":41197,"line_start":23,"line_end":23,"column_start":11,"column_end":20},"name":"WriteIter","qualname":"::blocking::spi::WriteIter","value":"WriteIter<W>","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"decl_id":null,"docs":" Blocking write (iterator version)\n","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41149,"byte_end":41177,"line_start":22,"line_end":22,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41231,"byte_end":41236,"line_start":25,"line_end":25,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::WriteIter::Error","value":"type Error;","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41314,"byte_end":41324,"line_start":28,"line_end":28,"column_start":8,"column_end":18},"name":"write_iter","qualname":"::blocking::spi::WriteIter::write_iter","value":"fn <WI> (&mut self, words: WI) -> Result<(), Self::Error>","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":" Sends `words` to the slave, ignoring all the incoming words\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":78},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41457,"byte_end":41465,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"name":"transfer","qualname":"::blocking::spi::transfer","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":81}],"decl_id":null,"docs":" Blocking transfer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":79},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41594,"byte_end":41601,"line_start":37,"line_end":37,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::transfer::Default","value":"Default<W>: ::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::Transfer<W>` for implementers of\n `spi::FullDuplex<W>`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":87},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42078,"byte_end":42083,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"name":"write","qualname":"::blocking::spi::write","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":90}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":88},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42201,"byte_end":42208,"line_start":60,"line_end":60,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::write::Default","value":"Default<W>: ::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::Write<W>` for implementers of `spi::FullDuplex<W>`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":95},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42689,"byte_end":42699,"line_start":82,"line_end":82,"column_start":9,"column_end":19},"name":"write_iter","qualname":"::blocking::spi::write_iter","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":98}],"decl_id":null,"docs":" Blocking write (iterator version)\n","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42652,"byte_end":42680,"line_start":81,"line_end":81,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":96},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42829,"byte_end":42836,"line_start":85,"line_end":85,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::write_iter::Default","value":"Default<W>: ::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::WriteIter<W>` for implementers of\n `spi::FullDuplex<W>`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":104},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"digital","qualname":"::digital","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/mod.rs","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":126},{"krate":0,"index":151},{"krate":0,"index":191},{"krate":0,"index":208}],"decl_id":null,"docs":" Digital I/O","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":105},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::digital::v1","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":123}],"decl_id":null,"docs":" Digital I/O","sig":null,"attributes":[{"value":"deprecated(since = \"0.2.2\", note =\n             \"Deprecated because the methods cannot return errors. \\\n                                      Users should use the traits in digital::v2.\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/mod.rs","byte_start":43391,"byte_end":43568,"line_start":7,"line_end":8,"column_start":1,"column_end":85}},{"value":"allow(deprecated)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":44049,"byte_end":44070,"line_start":6,"line_end":6,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":106},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":44248,"byte_end":44257,"line_start":13,"line_end":13,"column_start":11,"column_end":20},"name":"OutputPin","qualname":"::digital::v1::OutputPin","value":"OutputPin","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108}],"decl_id":null,"docs":" Single digital push-pull output pin","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":44429,"byte_end":44436,"line_start":18,"line_end":18,"column_start":8,"column_end":15},"name":"set_low","qualname":"::digital::v1::OutputPin::set_low","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Drives the pin low","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":44621,"byte_end":44629,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"set_high","qualname":"::digital::v1::OutputPin::set_high","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Drives the pin high","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":109},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":44971,"byte_end":44988,"line_start":34,"line_end":34,"column_start":11,"column_end":28},"name":"StatefulOutputPin","qualname":"::digital::v1::StatefulOutputPin","value":"StatefulOutputPin","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111}],"decl_id":null,"docs":" Push-pull output pin that can read its output state","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":44932,"byte_end":44960,"line_start":33,"line_end":33,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":45113,"byte_end":45124,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_set_high","qualname":"::digital::v1::StatefulOutputPin::is_set_high","value":"fn (&self) -> bool","parent":{"krate":0,"index":109},"children":[],"decl_id":null,"docs":" Is the pin in drive high mode?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":45263,"byte_end":45273,"line_start":43,"line_end":43,"column_start":8,"column_end":18},"name":"is_set_low","qualname":"::digital::v1::StatefulOutputPin::is_set_low","value":"fn (&self) -> bool","parent":{"krate":0,"index":109},"children":[],"decl_id":null,"docs":" Is the pin in drive low mode?","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":112},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":45850,"byte_end":45869,"line_start":58,"line_end":58,"column_start":11,"column_end":30},"name":"ToggleableOutputPin","qualname":"::digital::v1::ToggleableOutputPin","value":"ToggleableOutputPin","parent":null,"children":[{"krate":0,"index":113}],"decl_id":null,"docs":" Output pin that can be toggled","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":45811,"byte_end":45839,"line_start":57,"line_end":57,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":45906,"byte_end":45912,"line_start":60,"line_end":60,"column_start":8,"column_end":14},"name":"toggle","qualname":"::digital::v1::ToggleableOutputPin::toggle","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":" Toggle pin output.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":114},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47049,"byte_end":47059,"line_start":106,"line_end":106,"column_start":9,"column_end":19},"name":"toggleable","qualname":"::digital::v1::toggleable","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":119},{"krate":0,"index":120}],"decl_id":null,"docs":" If you can read **and** write the output state, a pin is\n toggleable by software.","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47012,"byte_end":47040,"line_start":105,"line_end":105,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":119},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47344,"byte_end":47351,"line_start":114,"line_end":114,"column_start":15,"column_end":22},"name":"Default","qualname":"::digital::v1::toggleable::Default","value":"Default: OutputPin + StatefulOutputPin","parent":null,"children":[],"decl_id":null,"docs":" Software-driven `toggle()` implementation.","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47309,"byte_end":47329,"line_start":113,"line_end":113,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47982,"byte_end":47990,"line_start":139,"line_end":139,"column_start":11,"column_end":19},"name":"InputPin","qualname":"::digital::v1::InputPin","value":"InputPin","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125}],"decl_id":null,"docs":" Single digital input pin","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47943,"byte_end":47971,"line_start":138,"line_end":138,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":48031,"byte_end":48038,"line_start":141,"line_end":141,"column_start":8,"column_end":15},"name":"is_high","qualname":"::digital::v1::InputPin::is_high","value":"fn (&self) -> bool","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Is the input pin high?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":48093,"byte_end":48099,"line_start":144,"line_end":144,"column_start":8,"column_end":14},"name":"is_low","qualname":"::digital::v1::InputPin::is_low","value":"fn (&self) -> bool","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Is the input pin low?\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":126},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v2","qualname":"::digital::v2","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":147}],"decl_id":null,"docs":" Digital I/O","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":127},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":48275,"byte_end":48284,"line_start":6,"line_end":6,"column_start":11,"column_end":20},"name":"OutputPin","qualname":"::digital::v2::OutputPin","value":"OutputPin","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130}],"decl_id":null,"docs":" Single digital push-pull output pin\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":128},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":48315,"byte_end":48320,"line_start":8,"line_end":8,"column_start":10,"column_end":15},"name":"Error","qualname":"::digital::v2::OutputPin::Error","value":"type Error;","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":48492,"byte_end":48499,"line_start":14,"line_end":14,"column_start":8,"column_end":15},"name":"set_low","qualname":"::digital::v2::OutputPin::set_low","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Drives the pin low","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":48711,"byte_end":48719,"line_start":20,"line_end":20,"column_start":8,"column_end":16},"name":"set_high","qualname":"::digital::v2::OutputPin::set_high","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Drives the pin high","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":131},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":48947,"byte_end":48964,"line_start":27,"line_end":27,"column_start":11,"column_end":28},"name":"StatefulOutputPin","qualname":"::digital::v2::StatefulOutputPin","value":"StatefulOutputPin: OutputPin","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"decl_id":null,"docs":" Push-pull output pin that can read its output state","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":48908,"byte_end":48936,"line_start":26,"line_end":26,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":49101,"byte_end":49112,"line_start":31,"line_end":31,"column_start":8,"column_end":19},"name":"is_set_high","qualname":"::digital::v2::StatefulOutputPin::is_set_high","value":"fn (&self) -> Result<bool, Self::Error>","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Is the pin in drive high mode?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":49272,"byte_end":49282,"line_start":36,"line_end":36,"column_start":8,"column_end":18},"name":"is_set_low","qualname":"::digital::v2::StatefulOutputPin::is_set_low","value":"fn (&self) -> Result<bool, Self::Error>","parent":{"krate":0,"index":131},"children":[],"decl_id":null,"docs":" Is the pin in drive low mode?","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":134},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":49735,"byte_end":49754,"line_start":48,"line_end":48,"column_start":11,"column_end":30},"name":"ToggleableOutputPin","qualname":"::digital::v2::ToggleableOutputPin","value":"ToggleableOutputPin","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136}],"decl_id":null,"docs":" Output pin that can be toggled","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":49696,"byte_end":49724,"line_start":47,"line_end":47,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":135},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":49785,"byte_end":49790,"line_start":50,"line_end":50,"column_start":10,"column_end":15},"name":"Error","qualname":"::digital::v2::ToggleableOutputPin::Error","value":"type Error;","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":49827,"byte_end":49833,"line_start":53,"line_end":53,"column_start":8,"column_end":14},"name":"toggle","qualname":"::digital::v2::ToggleableOutputPin::toggle","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Toggle pin output.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":137},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51088,"byte_end":51098,"line_start":100,"line_end":100,"column_start":9,"column_end":19},"name":"toggleable","qualname":"::digital::v2::toggleable","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":142},{"krate":0,"index":143}],"decl_id":null,"docs":" If you can read **and** write the output state, a pin is\n toggleable by software.","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51051,"byte_end":51079,"line_start":99,"line_end":99,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":142},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51333,"byte_end":51340,"line_start":106,"line_end":106,"column_start":15,"column_end":22},"name":"Default","qualname":"::digital::v2::toggleable::Default","value":"Default: OutputPin + StatefulOutputPin","parent":null,"children":[],"decl_id":null,"docs":" Software-driven `toggle()` implementation.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":147},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51881,"byte_end":51889,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"name":"InputPin","qualname":"::digital::v2::InputPin","value":"InputPin","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"decl_id":null,"docs":" Single digital input pin","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51842,"byte_end":51870,"line_start":128,"line_end":128,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":148},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51920,"byte_end":51925,"line_start":131,"line_end":131,"column_start":10,"column_end":15},"name":"Error","qualname":"::digital::v2::InputPin::Error","value":"type Error;","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51966,"byte_end":51973,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"is_high","qualname":"::digital::v2::InputPin::is_high","value":"fn (&self) -> Result<bool, Self::Error>","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Is the input pin high?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":52049,"byte_end":52055,"line_start":137,"line_end":137,"column_start":8,"column_end":14},"name":"is_low","qualname":"::digital::v2::InputPin::is_low","value":"fn (&self) -> Result<bool, Self::Error>","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Is the input pin low?\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":151},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1_compat","qualname":"::digital::v1_compat","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":165},{"krate":0,"index":170},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":186}],"decl_id":null,"docs":" v1 compatibility wrapper\n this module adds reverse support for v2 digital traits\n v2 traits must be explicitly cast to the v1 version using `.into()`,\n and will panic on internal errors\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":154},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":52454,"byte_end":52466,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"OldOutputPin","qualname":"::digital::v1_compat::OldOutputPin","value":"OldOutputPin {  }","parent":null,"children":[{"krate":0,"index":156}],"decl_id":null,"docs":" Wrapper to allow fallible `v2::OutputPin` traits to be converted to `v1::OutputPin` traits\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":52657,"byte_end":52660,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<OldOutputPin<T>>::new","value":"fn (pin: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new OldOutputPin wrapper around a `v2::OutputPin`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":175},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":54024,"byte_end":54035,"line_start":80,"line_end":80,"column_start":12,"column_end":23},"name":"OldInputPin","qualname":"::digital::v1_compat::OldInputPin","value":"OldInputPin {  }","parent":null,"children":[{"krate":0,"index":177}],"decl_id":null,"docs":" Wrapper to allow fallible `v2::InputPin` traits to be converted to `v1::InputPin` traits\n where errors will panic.\n","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":53984,"byte_end":54012,"line_start":79,"line_end":79,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":54252,"byte_end":54255,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<OldInputPin<T>>::new","value":"fn (pin: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `OldInputPin` wrapper around a `v2::InputPin`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":191},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2_compat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v2_compat","qualname":"::digital::v2_compat","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2_compat.rs","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":199},{"krate":0,"index":203}],"decl_id":null,"docs":" v2 compatibility shims\n this module adds implicit forward support to v1 digital traits\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":209},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/fmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/fmt.rs","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":213}],"decl_id":null,"docs":" Implementation of `core::fmt::Write` for the HAL's `serial::Write`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":218},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/prelude.rs","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"decl_id":null,"docs":" The prelude is a collection of all the traits in this crate","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":245},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/serial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serial","qualname":"::serial","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/serial.rs","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":251}],"decl_id":null,"docs":" Serial interface\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":247},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/serial.rs","byte_start":64330,"byte_end":64334,"line_start":9,"line_end":9,"column_start":11,"column_end":15},"name":"Read","qualname":"::serial::Read","value":"Read<Word>","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250}],"decl_id":null,"docs":" Read half of a serial interface","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":249},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/serial.rs","byte_start":64371,"byte_end":64376,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::serial::Read::Error","value":"type Error;","parent":{"krate":0,"index":247},"children":[],"decl_id":null,"docs":" Read error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/serial.rs","byte_start":64440,"byte_end":64444,"line_start":14,"line_end":14,"column_start":8,"column_end":12},"name":"read","qualname":"::serial::Read::read","value":"fn (&mut self) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":247},"children":[],"decl_id":null,"docs":" Reads a single word from the serial interface\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":251},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/serial.rs","byte_start":64540,"byte_end":64545,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Write","qualname":"::serial::Write","value":"Write<Word>","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255}],"decl_id":null,"docs":" Write half of a serial interface\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":253},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/serial.rs","byte_start":64583,"byte_end":64588,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Error","qualname":"::serial::Write::Error","value":"type Error;","parent":{"krate":0,"index":251},"children":[],"decl_id":null,"docs":" Write error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/serial.rs","byte_start":64651,"byte_end":64656,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"write","qualname":"::serial::Write::write","value":"fn (&mut self, word: Word) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":251},"children":[],"decl_id":null,"docs":" Writes a single word to the serial interface\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/serial.rs","byte_start":64797,"byte_end":64802,"line_start":26,"line_end":26,"column_start":8,"column_end":13},"name":"flush","qualname":"::serial::Write::flush","value":"fn (&mut self) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":251},"children":[],"decl_id":null,"docs":" Ensures that none of the previously written words are still buffered\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":256},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spi","qualname":"::spi","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":322},{"krate":0,"index":334},{"krate":0,"index":333},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":336},{"krate":0,"index":348},{"krate":0,"index":347},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":350},{"krate":0,"index":361},{"krate":0,"index":360},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" Serial Peripheral Interface\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":258},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":65283,"byte_end":65293,"line_start":15,"line_end":15,"column_start":11,"column_end":21},"name":"FullDuplex","qualname":"::spi::FullDuplex","value":"FullDuplex<Word>","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262}],"decl_id":null,"docs":" Full duplex (master mode)","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":260},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":65348,"byte_end":65353,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Error","qualname":"::spi::FullDuplex::Error","value":"type Error;","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" An enumeration of SPI errors\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":65520,"byte_end":65524,"line_start":23,"line_end":23,"column_start":8,"column_end":12},"name":"read","qualname":"::spi::FullDuplex::read","value":"fn (&mut self) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Reads the word stored in the shift register","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":65612,"byte_end":65616,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"send","qualname":"::spi::FullDuplex::send","value":"fn (&mut self, word: Word) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Sends a word to the slave\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":323},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":65791,"byte_end":65798,"line_start":33,"line_end":33,"column_start":5,"column_end":12},"name":"IdleLow","qualname":"::spi::Polarity::IdleLow","value":"Polarity::IdleLow","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Clock signal low when idle\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":325},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":65840,"byte_end":65848,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"name":"IdleHigh","qualname":"::spi::Polarity::IdleHigh","value":"Polarity::IdleHigh","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Clock signal high when idle\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":322},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":65741,"byte_end":65749,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Polarity","qualname":"::spi::Polarity","value":"Polarity::{IdleLow, IdleHigh}","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":325}],"decl_id":null,"docs":" Clock polarity\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":337},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":65985,"byte_end":66009,"line_start":42,"line_end":42,"column_start":5,"column_end":29},"name":"CaptureOnFirstTransition","qualname":"::spi::Phase::CaptureOnFirstTransition","value":"Phase::CaptureOnFirstTransition","parent":{"krate":0,"index":336},"children":[],"decl_id":null,"docs":" Data in \"captured\" on the first clock transition\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":339},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":66073,"byte_end":66098,"line_start":44,"line_end":44,"column_start":5,"column_end":30},"name":"CaptureOnSecondTransition","qualname":"::spi::Phase::CaptureOnSecondTransition","value":"Phase::CaptureOnSecondTransition","parent":{"krate":0,"index":336},"children":[],"decl_id":null,"docs":" Data in \"captured\" on the second clock transition\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":336},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":65916,"byte_end":65921,"line_start":40,"line_end":40,"column_start":10,"column_end":15},"name":"Phase","qualname":"::spi::Phase","value":"Phase::{CaptureOnFirstTransition, CaptureOnSecondTransition}","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":339}],"decl_id":null,"docs":" Clock phase\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":350},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":66165,"byte_end":66169,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"Mode","qualname":"::spi::Mode","value":"Mode { polarity, phase }","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352}],"decl_id":null,"docs":" SPI mode\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":351},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":66203,"byte_end":66211,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"polarity","qualname":"::spi::Mode::polarity","value":"spi::Polarity","parent":{"krate":0,"index":350},"children":[],"decl_id":null,"docs":" Clock polarity\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":352},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":66251,"byte_end":66256,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"name":"phase","qualname":"::spi::Mode::phase","value":"spi::Phase","parent":{"krate":0,"index":350},"children":[],"decl_id":null,"docs":" Clock phase\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":263},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":66312,"byte_end":66318,"line_start":57,"line_end":57,"column_start":11,"column_end":17},"name":"MODE_0","qualname":"::spi::MODE_0","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 0, CPHA = 0\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":264},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":66459,"byte_end":66465,"line_start":63,"line_end":63,"column_start":11,"column_end":17},"name":"MODE_1","qualname":"::spi::MODE_1","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 0, CPHA = 1\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":265},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":66607,"byte_end":66613,"line_start":69,"line_end":69,"column_start":11,"column_end":17},"name":"MODE_2","qualname":"::spi::MODE_2","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 1, CPHA = 0\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":266},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/spi.rs","byte_start":66755,"byte_end":66761,"line_start":75,"line_end":75,"column_start":11,"column_end":17},"name":"MODE_3","qualname":"::spi::MODE_3","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 1, CPHA = 1\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":267},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timer","qualname":"::timer","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":275},{"krate":0,"index":276}],"decl_id":null,"docs":" Timers\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":270},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":68280,"byte_end":68289,"line_start":60,"line_end":60,"column_start":11,"column_end":20},"name":"CountDown","qualname":"::timer::CountDown","value":"CountDown","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":274}],"decl_id":null,"docs":" A count down timer","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":271},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":68345,"byte_end":68349,"line_start":62,"line_end":62,"column_start":10,"column_end":14},"name":"Time","qualname":"::timer::CountDown::Time","value":"type Time;","parent":{"krate":0,"index":270},"children":[],"decl_id":null,"docs":" The unit of time used by this timer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":68391,"byte_end":68396,"line_start":65,"line_end":65,"column_start":8,"column_end":13},"name":"start","qualname":"::timer::CountDown::start","value":"fn <T> (&mut self, count: T) -> ()","parent":{"krate":0,"index":270},"children":[],"decl_id":null,"docs":" Starts a new count down\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":68868,"byte_end":68872,"line_start":77,"line_end":77,"column_start":8,"column_end":12},"name":"wait","qualname":"::timer::CountDown::wait","value":"fn (&mut self) -> nb::Result<(), Void>","parent":{"krate":0,"index":270},"children":[],"decl_id":null,"docs":" Non-blockingly \"waits\" until the count down finishes","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":275},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":68979,"byte_end":68987,"line_start":81,"line_end":81,"column_start":11,"column_end":19},"name":"Periodic","qualname":"::timer::Periodic","value":"Periodic","parent":null,"children":[],"decl_id":null,"docs":" Marker trait that indicates that a timer is periodic\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":276},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":69039,"byte_end":69045,"line_start":84,"line_end":84,"column_start":11,"column_end":17},"name":"Cancel","qualname":"::timer::Cancel","value":"Cancel: CountDown","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278}],"decl_id":null,"docs":" Trait for cancelable countdowns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":277},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":69128,"byte_end":69133,"line_start":86,"line_end":86,"column_start":10,"column_end":15},"name":"Error","qualname":"::timer::Cancel::Error","value":"type Error;","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" Error returned when a countdown can't be canceled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":69409,"byte_end":69415,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"cancel","qualname":"::timer::Cancel::cancel","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" Tries to cancel this countdown.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":279},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"watchdog","qualname":"::watchdog","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":286}],"decl_id":null,"docs":" Traits for interactions with a processors watchdog timer.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":280},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":69695,"byte_end":69703,"line_start":8,"line_end":8,"column_start":11,"column_end":19},"name":"Watchdog","qualname":"::watchdog::Watchdog","value":"Watchdog","parent":null,"children":[{"krate":0,"index":281}],"decl_id":null,"docs":" Feeds an existing watchdog to ensure the processor isn't reset. Sometimes\n commonly referred to as \"kicking\" or \"refreshing\".\n","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":69656,"byte_end":69684,"line_start":7,"line_end":7,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":69837,"byte_end":69841,"line_start":11,"line_end":11,"column_start":8,"column_end":12},"name":"feed","qualname":"::watchdog::Watchdog::feed","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":280},"children":[],"decl_id":null,"docs":" Triggers the watchdog. This must be done once the watchdog is started\n to prevent the processor being reset.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":282},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":69988,"byte_end":70002,"line_start":18,"line_end":18,"column_start":11,"column_end":25},"name":"WatchdogEnable","qualname":"::watchdog::WatchdogEnable","value":"WatchdogEnable","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"decl_id":null,"docs":" Enables A watchdog timer to reset the processor if software is frozen or \n stalled.\n","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":69949,"byte_end":69977,"line_start":17,"line_end":17,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":283},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":70056,"byte_end":70060,"line_start":20,"line_end":20,"column_start":10,"column_end":14},"name":"Time","qualname":"::watchdog::WatchdogEnable::Time","value":"type Time;","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Unit of time used by the watchdog\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":70228,"byte_end":70233,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"start","qualname":"::watchdog::WatchdogEnable::start","value":"fn <T> (&mut self, period: T) -> ()","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Starts the watchdog with a given period, typically once this is done \n the watchdog needs to be kicked periodically or the processor is reset. \n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":286},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":70400,"byte_end":70415,"line_start":29,"line_end":29,"column_start":11,"column_end":26},"name":"WatchdogDisable","qualname":"::watchdog::WatchdogDisable","value":"WatchdogDisable","parent":null,"children":[{"krate":0,"index":287}],"decl_id":null,"docs":" Disables a running watchdog timer so the processor won't be reset.\n","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":70361,"byte_end":70389,"line_start":28,"line_end":28,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/watchdog.rs","byte_start":70455,"byte_end":70462,"line_start":31,"line_end":31,"column_start":8,"column_end":15},"name":"disable","qualname":"::watchdog::WatchdogDisable::disable","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":286},"children":[],"decl_id":null,"docs":" Disables the watchdog\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":288},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":22453,"byte_end":22460,"line_start":757,"line_end":757,"column_start":11,"column_end":18},"name":"Capture","qualname":"::Capture","value":"Capture","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":" Input capture","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":22305,"byte_end":22333,"line_start":754,"line_end":754,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":289},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":22674,"byte_end":22679,"line_start":764,"line_end":764,"column_start":10,"column_end":15},"name":"Error","qualname":"::Capture::Error","value":"type Error;","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Enumeration of `Capture` errors","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":290},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":22869,"byte_end":22876,"line_start":770,"line_end":770,"column_start":10,"column_end":17},"name":"Channel","qualname":"::Capture::Channel","value":"type Channel;","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Enumeration of channels that can be used with this `Capture` interface","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":291},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":22968,"byte_end":22972,"line_start":773,"line_end":773,"column_start":10,"column_end":14},"name":"Time","qualname":"::Capture::Time","value":"type Time;","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" A time unit that can be converted into a human time unit (e.g. seconds)\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":292},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":23036,"byte_end":23043,"line_start":776,"line_end":776,"column_start":10,"column_end":17},"name":"Capture","qualname":"::Capture::Capture","value":"type Capture;","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" The type of the value returned by `capture`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":23327,"byte_end":23334,"line_start":783,"line_end":783,"column_start":8,"column_end":15},"name":"capture","qualname":"::Capture::capture","value":"fn (&mut self, channel: Self::Channel) -> nb::Result<Self::Capture, Self::Error>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" \"Waits\" for a transition in the capture `channel` and returns the value\n of counter at that instant","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":23458,"byte_end":23465,"line_start":786,"line_end":786,"column_start":8,"column_end":15},"name":"disable","qualname":"::Capture::disable","value":"fn (&mut self, channel: Self::Channel) -> ()","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Disables a capture `channel`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":23546,"byte_end":23552,"line_start":789,"line_end":789,"column_start":8,"column_end":14},"name":"enable","qualname":"::Capture::enable","value":"fn (&mut self, channel: Self::Channel) -> ()","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Enables a capture `channel`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":23636,"byte_end":23650,"line_start":792,"line_end":792,"column_start":8,"column_end":22},"name":"get_resolution","qualname":"::Capture::get_resolution","value":"fn (&self) -> Self::Time","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Returns the current resolution\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":23730,"byte_end":23744,"line_start":795,"line_end":795,"column_start":8,"column_end":22},"name":"set_resolution","qualname":"::Capture::set_resolution","value":"fn <R> (&mut self, resolution: R) -> ()","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Sets the resolution of the capture timer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":299},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":25453,"byte_end":25456,"line_start":851,"line_end":851,"column_start":11,"column_end":14},"name":"Pwm","qualname":"::Pwm","value":"Pwm","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"decl_id":null,"docs":" Pulse Width Modulation","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":25224,"byte_end":25252,"line_start":848,"line_end":848,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":300},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":25638,"byte_end":25645,"line_start":856,"line_end":856,"column_start":10,"column_end":17},"name":"Channel","qualname":"::Pwm::Channel","value":"type Channel;","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Enumeration of channels that can be used with this `Pwm` interface","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":301},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":25737,"byte_end":25741,"line_start":859,"line_end":859,"column_start":10,"column_end":14},"name":"Time","qualname":"::Pwm::Time","value":"type Time;","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" A time unit that can be converted into a human time unit (e.g. seconds)\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":302},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":25952,"byte_end":25956,"line_start":865,"line_end":865,"column_start":10,"column_end":14},"name":"Duty","qualname":"::Pwm::Duty","value":"type Duty;","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Type for the `duty` methods","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":25999,"byte_end":26006,"line_start":868,"line_end":868,"column_start":8,"column_end":15},"name":"disable","qualname":"::Pwm::disable","value":"fn (&mut self, channel: Self::Channel) -> ()","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Disables a PWM `channel`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":26083,"byte_end":26089,"line_start":871,"line_end":871,"column_start":8,"column_end":14},"name":"enable","qualname":"::Pwm::enable","value":"fn (&mut self, channel: Self::Channel) -> ()","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Enables a PWM `channel`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":26173,"byte_end":26183,"line_start":874,"line_end":874,"column_start":8,"column_end":18},"name":"get_period","qualname":"::Pwm::get_period","value":"fn (&self) -> Self::Time","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Returns the current PWM period\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":26253,"byte_end":26261,"line_start":877,"line_end":877,"column_start":8,"column_end":16},"name":"get_duty","qualname":"::Pwm::get_duty","value":"fn (&self, channel: Self::Channel) -> Self::Duty","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Returns the current duty cycle\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":26361,"byte_end":26373,"line_start":880,"line_end":880,"column_start":8,"column_end":20},"name":"get_max_duty","qualname":"::Pwm::get_max_duty","value":"fn (&self) -> Self::Duty","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Returns the maximum duty cycle value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":26434,"byte_end":26442,"line_start":883,"line_end":883,"column_start":8,"column_end":16},"name":"set_duty","qualname":"::Pwm::set_duty","value":"fn (&mut self, channel: Self::Channel, duty: Self::Duty) -> ()","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Sets a new duty cycle\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":26535,"byte_end":26545,"line_start":886,"line_end":886,"column_start":8,"column_end":18},"name":"set_period","qualname":"::Pwm::set_period","value":"fn <P> (&mut self, period: P) -> ()","parent":{"krate":0,"index":299},"children":[],"decl_id":null,"docs":" Sets a new PWM period\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":311},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":26684,"byte_end":26690,"line_start":894,"line_end":894,"column_start":11,"column_end":17},"name":"PwmPin","qualname":"::PwmPin","value":"PwmPin","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"decl_id":null,"docs":" A single PWM channel / pin","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":312},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":26901,"byte_end":26905,"line_start":899,"line_end":899,"column_start":10,"column_end":14},"name":"Duty","qualname":"::PwmPin::Duty","value":"type Duty;","parent":{"krate":0,"index":311},"children":[],"decl_id":null,"docs":" Type for the `duty` methods","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":26948,"byte_end":26955,"line_start":902,"line_end":902,"column_start":8,"column_end":15},"name":"disable","qualname":"::PwmPin::disable","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":311},"children":[],"decl_id":null,"docs":" Disables a PWM `channel`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":27008,"byte_end":27014,"line_start":905,"line_end":905,"column_start":8,"column_end":14},"name":"enable","qualname":"::PwmPin::enable","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":311},"children":[],"decl_id":null,"docs":" Enables a PWM `channel`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":27074,"byte_end":27082,"line_start":908,"line_end":908,"column_start":8,"column_end":16},"name":"get_duty","qualname":"::PwmPin::get_duty","value":"fn (&self) -> Self::Duty","parent":{"krate":0,"index":311},"children":[],"decl_id":null,"docs":" Returns the current duty cycle\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":27158,"byte_end":27170,"line_start":911,"line_end":911,"column_start":8,"column_end":20},"name":"get_max_duty","qualname":"::PwmPin::get_max_duty","value":"fn (&self) -> Self::Duty","parent":{"krate":0,"index":311},"children":[],"decl_id":null,"docs":" Returns the maximum duty cycle value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":27231,"byte_end":27239,"line_start":914,"line_end":914,"column_start":8,"column_end":16},"name":"set_duty","qualname":"::PwmPin::set_duty","value":"fn (&mut self, duty: Self::Duty) -> ()","parent":{"krate":0,"index":311},"children":[],"decl_id":null,"docs":" Sets a new duty cycle\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":318},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":28829,"byte_end":28832,"line_start":973,"line_end":973,"column_start":11,"column_end":14},"name":"Qei","qualname":"::Qei","value":"Qei","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"decl_id":null,"docs":" Quadrature encoder interface","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":28666,"byte_end":28694,"line_start":970,"line_end":970,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":319},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":28894,"byte_end":28899,"line_start":975,"line_end":975,"column_start":10,"column_end":15},"name":"Count","qualname":"::Qei::Count","value":"type Count;","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" The type of the value returned by `count`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":28964,"byte_end":28969,"line_start":978,"line_end":978,"column_start":8,"column_end":13},"name":"count","qualname":"::Qei::count","value":"fn (&self) -> Self::Count","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" Returns the current pulse count of the encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":29037,"byte_end":29046,"line_start":981,"line_end":981,"column_start":8,"column_end":17},"name":"direction","qualname":"::Qei::direction","value":"fn (&self) -> Direction","parent":{"krate":0,"index":318},"children":[],"decl_id":null,"docs":" Returns the count direction\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":364},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":29350,"byte_end":29362,"line_start":992,"line_end":992,"column_start":5,"column_end":17},"name":"Downcounting","qualname":"::Direction::Downcounting","value":"Direction::Downcounting","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" 3, 2, 1\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":366},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":29384,"byte_end":29394,"line_start":994,"line_end":994,"column_start":5,"column_end":15},"name":"Upcounting","qualname":"::Direction::Upcounting","value":"Direction::Upcounting","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" 1, 2, 3\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":363},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":29318,"byte_end":29327,"line_start":990,"line_end":990,"column_start":10,"column_end":19},"name":"Direction","qualname":"::Direction","value":"Direction::{Downcounting, Upcounting}","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366}],"decl_id":null,"docs":" Count direction","sig":null,"attributes":[{"value":"cfg(feature = \"unproven\")","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":29232,"byte_end":29260,"line_start":988,"line_end":988,"column_start":1,"column_end":29}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":40192,"byte_end":40193,"line_start":34,"line_end":34,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41679,"byte_end":41680,"line_start":39,"line_end":39,"column_start":49,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42283,"byte_end":42284,"line_start":62,"line_end":62,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42915,"byte_end":42916,"line_start":87,"line_end":87,"column_start":50,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47448,"byte_end":47449,"line_start":117,"line_end":117,"column_start":37,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51412,"byte_end":51413,"line_start":108,"line_end":108,"column_start":37,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":52499,"byte_end":52511,"line_start":15,"line_end":15,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":52860,"byte_end":52872,"line_start":32,"line_end":32,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":53170,"byte_end":53182,"line_start":45,"line_end":45,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":53607,"byte_end":53619,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":54097,"byte_end":54108,"line_start":85,"line_end":85,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":54355,"byte_end":54366,"line_start":98,"line_end":98,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":54681,"byte_end":54692,"line_start":112,"line_end":112,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2_compat.rs","byte_start":58306,"byte_end":58307,"line_start":10,"line_end":10,"column_start":28,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2_compat.rs","byte_start":58783,"byte_end":58784,"line_start":29,"line_end":29,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2_compat.rs","byte_start":59189,"byte_end":59190,"line_start":46,"line_end":46,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/fmt.rs","byte_start":61892,"byte_end":61897,"line_start":6,"line_end":6,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20616,"byte_end":20619,"line_start":693,"line_end":693,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20629,"byte_end":20637,"line_start":694,"line_end":694,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":18}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/mod.rs","byte_start":33400,"byte_end":33405,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":19}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/mod.rs","byte_start":33415,"byte_end":33418,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":26}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/mod.rs","byte_start":33428,"byte_end":33431,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":44}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/mod.rs","byte_start":33441,"byte_end":33447,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/mod.rs","byte_start":33457,"byte_end":33460,"line_start":11,"line_end":11,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":63}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20647,"byte_end":20654,"line_start":695,"line_end":695,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":104}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/mod.rs","byte_start":43577,"byte_end":43579,"line_start":9,"line_end":9,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":105}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/mod.rs","byte_start":43615,"byte_end":43617,"line_start":12,"line_end":12,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":126}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/mod.rs","byte_start":43709,"byte_end":43718,"line_start":16,"line_end":16,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":151}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/mod.rs","byte_start":43807,"byte_end":43816,"line_start":20,"line_end":20,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":191}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20664,"byte_end":20667,"line_start":696,"line_end":696,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":209}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20677,"byte_end":20684,"line_start":697,"line_end":697,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":218}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20694,"byte_end":20700,"line_start":698,"line_end":698,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":245}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20710,"byte_end":20713,"line_start":699,"line_end":699,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":256}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20723,"byte_end":20728,"line_start":700,"line_end":700,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":267}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/lib.rs","byte_start":20738,"byte_end":20746,"line_start":701,"line_end":701,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":279}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":40122,"byte_end":40127,"line_start":32,"line_end":32,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":251},"to":{"krate":0,"index":55}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/serial.rs","byte_start":40192,"byte_end":40193,"line_start":34,"line_end":34,"column_start":55,"column_end":56},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":58},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41613,"byte_end":41623,"line_start":37,"line_end":37,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":258},"to":{"krate":0,"index":79}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":41679,"byte_end":41680,"line_start":39,"line_end":39,"column_start":49,"column_end":50},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":83},"to":{"krate":0,"index":64}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42220,"byte_end":42230,"line_start":60,"line_end":60,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":258},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42283,"byte_end":42284,"line_start":62,"line_end":62,"column_start":46,"column_end":47},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":92},"to":{"krate":0,"index":69}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42848,"byte_end":42858,"line_start":85,"line_end":85,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":258},"to":{"krate":0,"index":96}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/blocking/spi.rs","byte_start":42915,"byte_end":42916,"line_start":87,"line_end":87,"column_start":50,"column_end":51},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":100},"to":{"krate":0,"index":73}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47353,"byte_end":47362,"line_start":114,"line_end":114,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":106},"to":{"krate":0,"index":119}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47365,"byte_end":47382,"line_start":114,"line_end":114,"column_start":36,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":109},"to":{"krate":0,"index":119}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1.rs","byte_start":47448,"byte_end":47449,"line_start":117,"line_end":117,"column_start":37,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":121},"to":{"krate":0,"index":112}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":48967,"byte_end":48976,"line_start":27,"line_end":27,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":127},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51342,"byte_end":51351,"line_start":106,"line_end":106,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":127},"to":{"krate":0,"index":142}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51354,"byte_end":51371,"line_start":106,"line_end":106,"column_start":36,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":131},"to":{"krate":0,"index":142}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2.rs","byte_start":51412,"byte_end":51413,"line_start":108,"line_end":108,"column_start":37,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":144},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":52499,"byte_end":52511,"line_start":15,"line_end":15,"column_start":13,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":52860,"byte_end":52872,"line_start":32,"line_end":32,"column_start":25,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":154},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":53170,"byte_end":53182,"line_start":45,"line_end":45,"column_start":31,"column_end":43},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":154},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":53607,"byte_end":53619,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":154},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":54097,"byte_end":54108,"line_start":85,"line_end":85,"column_start":13,"column_end":24},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":54355,"byte_end":54366,"line_start":98,"line_end":98,"column_start":25,"column_end":36},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":175},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v1_compat.rs","byte_start":54681,"byte_end":54692,"line_start":112,"line_end":112,"column_start":30,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":175},"to":{"krate":0,"index":123}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2_compat.rs","byte_start":58306,"byte_end":58307,"line_start":10,"line_end":10,"column_start":28,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":195},"to":{"krate":0,"index":127}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2_compat.rs","byte_start":58783,"byte_end":58784,"line_start":29,"line_end":29,"column_start":36,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":200},"to":{"krate":0,"index":131}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/digital/v2_compat.rs","byte_start":59189,"byte_end":59190,"line_start":46,"line_end":46,"column_start":27,"column_end":28},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":204},"to":{"krate":0,"index":147}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/fmt.rs","byte_start":61892,"byte_end":61897,"line_start":6,"line_end":6,"column_start":39,"column_end":44},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":251},"to":{"krate":1,"index":7563}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-hal-0.2.3/src/timer.rs","byte_start":69048,"byte_end":69057,"line_start":84,"line_end":84,"column_start":20,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":270},"to":{"krate":0,"index":276}}]}