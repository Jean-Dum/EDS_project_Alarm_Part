{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15","program":"/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","regex_syntax","/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","opt-level=1","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"unicode-age\"","--cfg","feature=\"unicode-bool\"","--cfg","feature=\"unicode-case\"","--cfg","feature=\"unicode-gencat\"","--cfg","feature=\"unicode-perl\"","--cfg","feature=\"unicode-script\"","--cfg","feature=\"unicode-segment\"","-C","metadata=8dacae987d53140e","-C","extra-filename=-8dacae987d53140e","--out-dir","/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/debug/deps","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/debug/deps/libregex_syntax-8dacae987d53140e.rmeta"},"prelude":{"crate_id":{"name":"regex_syntax","disambiguator":[2776477696164698511,11150347489191025812]},"crate_root":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src","external_crates":[{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14071373652398347879,7103549041170480253]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5273437404553270099,5411348343046199890]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[976218546544352998,2134245565175613459]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13100362557277821204,18082047403827332368]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3605767859335716447,18368004652892255649]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7644919710974821109,7113146966867899407]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16182386318199163571,1953714320961812]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12664401352052491985,6928826529401171483]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17274879524252775070,15165904048009513825]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3349673540409454496,14630436784565510244]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14546748579478228105,1074460191194833292]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5671097699487010686,7534711367382902334]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7229860330014108182,6606161976056509340]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7609715969379266585,5596137465280250730]}}],"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":0,"byte_end":12015,"line_start":1,"line_end":310,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2591},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7193,"byte_end":7198,"line_start":160,"line_end":160,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":409},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7200,"byte_end":7206,"line_start":160,"line_end":160,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3152},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7226,"byte_end":7232,"line_start":161,"line_end":161,"column_start":18,"column_end":24},"alias_span":null,"name":"Parser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3143},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7234,"byte_end":7247,"line_start":161,"line_end":161,"column_start":26,"column_end":39},"alias_span":null,"name":"ParserBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3173},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7267,"byte_end":7283,"line_start":162,"line_end":162,"column_start":18,"column_end":34},"alias_span":null,"name":"UnicodeWordError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":12155,"byte_end":12160,"line_start":9,"line_end":9,"column_start":24,"column_end":29},"alias_span":null,"name":"visit","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":223},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":12162,"byte_end":12169,"line_start":9,"line_end":9,"column_start":31,"column_end":38},"alias_span":null,"name":"Visitor","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":774},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":314480,"byte_end":314485,"line_start":15,"line_end":15,"column_start":24,"column_end":29},"alias_span":null,"name":"visit","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":766},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":314487,"byte_end":314494,"line_start":15,"line_end":15,"column_start":31,"column_end":38},"alias_span":null,"name":"Visitor","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":3168},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":314514,"byte_end":314527,"line_start":16,"line_end":16,"column_start":18,"column_end":31},"alias_span":null,"name":"CaseFoldError","value":"","parent":{"krate":0,"index":446}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":0,"byte_end":12015,"line_start":1,"line_end":310,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":446},{"krate":0,"index":936},{"krate":0,"index":955},{"krate":0,"index":1058},{"krate":0,"index":1550},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603}],"decl_id":null,"docs":"This crate provides a robust regular expression parser.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7129,"byte_end":7151,"line_start":157,"line_end":157,"column_start":1,"column_end":23}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7152,"byte_end":7175,"line_start":158,"line_end":158,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ast","qualname":"::ast","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":157},{"krate":0,"index":218},{"krate":0,"index":1721},{"krate":0,"index":1734},{"krate":0,"index":1732},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":310},{"krate":0,"index":1736},{"krate":0,"index":1811},{"krate":0,"index":1809},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":1813},{"krate":0,"index":1824},{"krate":0,"index":1823},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":1826},{"krate":0,"index":1838},{"krate":0,"index":1837},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":343},{"krate":0,"index":1840},{"krate":0,"index":1852},{"krate":0,"index":1850},{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1854},{"krate":0,"index":1866},{"krate":0,"index":1864},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1868},{"krate":0,"index":1908},{"krate":0,"index":1906},{"krate":0,"index":1903},{"krate":0,"index":1904},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":345},{"krate":0,"index":349},{"krate":0,"index":1910},{"krate":0,"index":1922},{"krate":0,"index":1920},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":352},{"krate":0,"index":1924},{"krate":0,"index":1936},{"krate":0,"index":1934},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":354},{"krate":0,"index":1938},{"krate":0,"index":1951},{"krate":0,"index":1949},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":356},{"krate":0,"index":1953},{"krate":0,"index":1978},{"krate":0,"index":1976},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1980},{"krate":0,"index":2003},{"krate":0,"index":2001},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":2005},{"krate":0,"index":2020},{"krate":0,"index":2018},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":358},{"krate":0,"index":2022},{"krate":0,"index":2041},{"krate":0,"index":2039},{"krate":0,"index":2036},{"krate":0,"index":2037},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":360},{"krate":0,"index":2043},{"krate":0,"index":2056},{"krate":0,"index":2054},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2058},{"krate":0,"index":2073},{"krate":0,"index":2071},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2075},{"krate":0,"index":2088},{"krate":0,"index":2086},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2079},{"krate":0,"index":2080},{"krate":0,"index":2090},{"krate":0,"index":2127},{"krate":0,"index":2125},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":362},{"krate":0,"index":2129},{"krate":0,"index":2142},{"krate":0,"index":2140},{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":365},{"krate":0,"index":2144},{"krate":0,"index":2164},{"krate":0,"index":2162},{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2166},{"krate":0,"index":2181},{"krate":0,"index":2179},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":367},{"krate":0,"index":2183},{"krate":0,"index":2196},{"krate":0,"index":2194},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2198},{"krate":0,"index":2214},{"krate":0,"index":2212},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":369},{"krate":0,"index":2216},{"krate":0,"index":2250},{"krate":0,"index":2248},{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":373},{"krate":0,"index":2252},{"krate":0,"index":2265},{"krate":0,"index":2263},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":375},{"krate":0,"index":2267},{"krate":0,"index":2279},{"krate":0,"index":2277},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":377},{"krate":0,"index":2281},{"krate":0,"index":2295},{"krate":0,"index":2293},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2297},{"krate":0,"index":2313},{"krate":0,"index":2312},{"krate":0,"index":2310},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2315},{"krate":0,"index":2327},{"krate":0,"index":2325},{"krate":0,"index":2322},{"krate":0,"index":2323},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2329},{"krate":0,"index":2350},{"krate":0,"index":2348},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2352},{"krate":0,"index":2366},{"krate":0,"index":2364},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2368},{"krate":0,"index":2380},{"krate":0,"index":2378},{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2382},{"krate":0,"index":2401},{"krate":0,"index":2399},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2403},{"krate":0,"index":2423},{"krate":0,"index":2421},{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":380},{"krate":0,"index":2425},{"krate":0,"index":2438},{"krate":0,"index":2436},{"krate":0,"index":2433},{"krate":0,"index":2434},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":382},{"krate":0,"index":2440},{"krate":0,"index":2459},{"krate":0,"index":2457},{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2461},{"krate":0,"index":2474},{"krate":0,"index":2472},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2476},{"krate":0,"index":2488},{"krate":0,"index":2486},{"krate":0,"index":2483},{"krate":0,"index":2484},{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":2490},{"krate":0,"index":2502},{"krate":0,"index":2500},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":386},{"krate":0,"index":2504},{"krate":0,"index":2516},{"krate":0,"index":2514},{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2518},{"krate":0,"index":2533},{"krate":0,"index":2531},{"krate":0,"index":2528},{"krate":0,"index":2529},{"krate":0,"index":2524},{"krate":0,"index":2525},{"krate":0,"index":389},{"krate":0,"index":2535},{"krate":0,"index":2557},{"krate":0,"index":2556},{"krate":0,"index":2554},{"krate":0,"index":2551},{"krate":0,"index":2552},{"krate":0,"index":2548},{"krate":0,"index":2549},{"krate":0,"index":391},{"krate":0,"index":396}],"decl_id":null,"docs":"Defines an abstract syntax for regular expressions.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":17},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::ast::parse","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":1604},{"krate":0,"index":1629},{"krate":0,"index":1627},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":33},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":1631},{"krate":0,"index":1637},{"krate":0,"index":1635},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":1639},{"krate":0,"index":1653},{"krate":0,"index":1651},{"krate":0,"index":1655},{"krate":0,"index":1664},{"krate":0,"index":1660},{"krate":0,"index":1668},{"krate":0,"index":1678},{"krate":0,"index":1676},{"krate":0,"index":1680},{"krate":0,"index":1689},{"krate":0,"index":1687},{"krate":0,"index":53},{"krate":0,"index":58},{"krate":0,"index":100},{"krate":0,"index":1691},{"krate":0,"index":1697},{"krate":0,"index":133},{"krate":0,"index":142},{"krate":0,"index":155}],"decl_id":null,"docs":"This module provides a regular expression parser.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1631},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":65587,"byte_end":65600,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"ParserBuilder","qualname":"::ast::parse::ParserBuilder","value":"ParserBuilder {  }","parent":null,"children":[{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634}],"decl_id":null,"docs":" A builder for a regular expression parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":65878,"byte_end":65881,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserBuilder>::new","value":"fn () -> ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser builder with a default configuration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":66119,"byte_end":66124,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"build","qualname":"<ParserBuilder>::build","value":"fn (&self) -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Build a parser from this configuration with the given pattern.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":68200,"byte_end":68210,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"nest_limit","qualname":"<ParserBuilder>::nest_limit","value":"fn (&mut self, limit: u32) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the nesting limit for this parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":69150,"byte_end":69155,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"octal","qualname":"<ParserBuilder>::octal","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to support octal syntax or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":69699,"byte_end":69716,"line_start":210,"line_end":210,"column_start":12,"column_end":29},"name":"ignore_whitespace","qualname":"<ParserBuilder>::ignore_whitespace","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable verbose mode in the regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1639},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":70191,"byte_end":70197,"line_start":225,"line_end":225,"column_start":12,"column_end":18},"name":"Parser","qualname":"::ast::parse::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1642},{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650}],"decl_id":null,"docs":" A regular expression parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":74687,"byte_end":74690,"line_start":331,"line_end":331,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser>::new","value":"fn () -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser with a default configuration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":74827,"byte_end":74832,"line_start":336,"line_end":336,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser>::parse","value":"fn (&mut self, pattern: &str) -> Result<Ast>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression into an abstract syntax tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":75065,"byte_end":75084,"line_start":342,"line_end":342,"column_start":12,"column_end":31},"name":"parse_with_comments","qualname":"<Parser>::parse_with_comments","value":"fn (&mut self, pattern: &str) -> Result<ast::WithComments>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression and return an abstract syntax tree with\n all of the comments found in the pattern.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":157},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print","qualname":"::ast::print","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":1702},{"krate":0,"index":1706},{"krate":0,"index":1704},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":170},{"krate":0,"index":1712},{"krate":0,"index":1717},{"krate":0,"index":174},{"krate":0,"index":188}],"decl_id":null,"docs":"This module provides a regular expression printer for `Ast`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1708},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":267486,"byte_end":267493,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Printer","qualname":"::ast::print::Printer","value":"Printer {  }","parent":null,"children":[{"krate":0,"index":1709}],"decl_id":null,"docs":" A printer for a regular expression abstract syntax tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":267570,"byte_end":267573,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Printer>::new","value":"fn () -> Printer","parent":null,"children":[],"decl_id":null,"docs":" Create a new printer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":267920,"byte_end":267925,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"print","qualname":"<Printer>::print","value":"fn <W> (&mut self, ast: &Ast, wtr: W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Print the given `Ast` to the given writer. The writer must implement\n `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n here are a `fmt::Formatter` (which is available in `fmt::Display`\n implementations) or a `&mut String`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":223},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":285196,"byte_end":285203,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::ast::visitor::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235}],"decl_id":null,"docs":" A trait for visiting an abstract syntax tree (AST) in depth first order.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":224},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":285254,"byte_end":285260,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ast::visitor::Visitor::Output","value":"type Output;","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" The result of visiting an AST.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":225},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":285323,"byte_end":285326,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"Err","qualname":"::ast::visitor::Visitor::Err","value":"type Err;","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" An error that visiting an AST might return.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":285471,"byte_end":285477,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"finish","qualname":"::ast::visitor::Visitor::finish","value":"fn (self) -> Result<Self::Output, Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" All implementors of `Visitor` must provide a `finish` method, which\n yields the result of visiting the AST or an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":285597,"byte_end":285602,"line_start":34,"line_end":34,"column_start":8,"column_end":13},"name":"start","qualname":"::ast::visitor::Visitor::start","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called before beginning traversal of the AST.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":285717,"byte_end":285726,"line_start":38,"line_end":38,"column_start":8,"column_end":17},"name":"visit_pre","qualname":"::ast::visitor::Visitor::visit_pre","value":"fn (&mut self, _ast: &Ast) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on an `Ast` before descending into child `Ast`\n nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":285903,"byte_end":285913,"line_start":44,"line_end":44,"column_start":8,"column_end":18},"name":"visit_post","qualname":"::ast::visitor::Visitor::visit_post","value":"fn (&mut self, _ast: &Ast) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on an `Ast` after descending all of its child\n `Ast` nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":286099,"byte_end":286119,"line_start":50,"line_end":50,"column_start":8,"column_end":28},"name":"visit_alternation_in","qualname":"::ast::visitor::Visitor::visit_alternation_in","value":"fn (&mut self) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called between child nodes of an\n [`Alternation`](struct.Alternation.html).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":286319,"byte_end":286343,"line_start":57,"line_end":57,"column_start":8,"column_end":32},"name":"visit_class_set_item_pre","qualname":"::ast::visitor::Visitor::visit_class_set_item_pre","value":"fn (&mut self, _ast: &ast::ClassSetItem) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetItem`](enum.ClassSetItem.html)\n before descending into child nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":286591,"byte_end":286616,"line_start":67,"line_end":67,"column_start":8,"column_end":33},"name":"visit_class_set_item_post","qualname":"::ast::visitor::Visitor::visit_class_set_item_post","value":"fn (&mut self, _ast: &ast::ClassSetItem) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetItem`](enum.ClassSetItem.html)\n after descending into child nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":286875,"byte_end":286904,"line_start":77,"line_end":77,"column_start":8,"column_end":37},"name":"visit_class_set_binary_op_pre","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_pre","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n before descending into child nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":287166,"byte_end":287196,"line_start":87,"line_end":87,"column_start":8,"column_end":38},"name":"visit_class_set_binary_op_post","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_post","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n after descending into child nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":287461,"byte_end":287489,"line_start":96,"line_end":96,"column_start":8,"column_end":36},"name":"visit_class_set_binary_op_in","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_in","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" This method is called between the left hand and right hand child nodes\n of a [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":288355,"byte_end":288360,"line_start":119,"line_end":119,"column_start":8,"column_end":13},"name":"visit","qualname":"::ast::visitor::visit","value":"fn <V> (ast: &Ast, visitor: V) -> Result<V::Output, V::Err>","parent":null,"children":[],"decl_id":null,"docs":" Executes an implementation of `Visitor` in constant stack space.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1721},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":12673,"byte_end":12678,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"Error","qualname":"::ast::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724}],"decl_id":null,"docs":" An error that occurred while parsing a regular expression into an abstract\n syntax tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":13001,"byte_end":13005,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":13219,"byte_end":13226,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"pattern","qualname":"<Error>::pattern","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original pattern string in which this error occurred.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":13338,"byte_end":13342,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"span","qualname":"<Error>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span at which this error occurred.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":13755,"byte_end":13769,"line_start":56,"line_end":56,"column_start":12,"column_end":26},"name":"auxiliary_span","qualname":"<Error>::auxiliary_span","value":"fn (&self) -> Option<&Span>","parent":null,"children":[],"decl_id":null,"docs":" Return an auxiliary span. This span exists only for some errors that\n benefit from being able to point to two locations in the original\n regular expression. For example, \"duplicate\" errors will have the\n main error position set to the duplicate occurrence while its\n auxiliary span will be set to the initial occurrence.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1737},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":14545,"byte_end":14565,"line_start":76,"line_end":76,"column_start":5,"column_end":25},"name":"CaptureLimitExceeded","qualname":"::ast::ErrorKind::CaptureLimitExceeded","value":"ErrorKind::CaptureLimitExceeded","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" The capturing group limit was exceeded.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1739},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":14642,"byte_end":14660,"line_start":78,"line_end":78,"column_start":5,"column_end":23},"name":"ClassEscapeInvalid","qualname":"::ast::ErrorKind::ClassEscapeInvalid","value":"ErrorKind::ClassEscapeInvalid","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An invalid escape sequence was found in a character class set.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1741},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":14797,"byte_end":14814,"line_start":81,"line_end":81,"column_start":5,"column_end":22},"name":"ClassRangeInvalid","qualname":"::ast::ErrorKind::ClassRangeInvalid","value":"ErrorKind::ClassRangeInvalid","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An invalid character class range was found. An invalid range is any\n range where the start is greater than the end.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1743},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15035,"byte_end":15052,"line_start":85,"line_end":85,"column_start":5,"column_end":22},"name":"ClassRangeLiteral","qualname":"::ast::ErrorKind::ClassRangeLiteral","value":"ErrorKind::ClassRangeLiteral","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An invalid range boundary was found in a character class. Range\n boundaries must be a single literal codepoint, but this error indicates\n that something else was found, such as a nested class.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1745},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15126,"byte_end":15139,"line_start":87,"line_end":87,"column_start":5,"column_end":18},"name":"ClassUnclosed","qualname":"::ast::ErrorKind::ClassUnclosed","value":"ErrorKind::ClassUnclosed","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An opening `[` was found with no corresponding closing `]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1747},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15418,"byte_end":15430,"line_start":92,"line_end":92,"column_start":5,"column_end":17},"name":"DecimalEmpty","qualname":"::ast::ErrorKind::DecimalEmpty","value":"ErrorKind::DecimalEmpty","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" Note that this error variant is no longer used. Namely, a decimal\n number can only appear as a repetition quantifier. When the number\n in a repetition quantifier is empty, then it gets its own specialized\n error, `RepetitionCountDecimalEmpty`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1749},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15504,"byte_end":15518,"line_start":94,"line_end":94,"column_start":5,"column_end":19},"name":"DecimalInvalid","qualname":"::ast::ErrorKind::DecimalInvalid","value":"ErrorKind::DecimalInvalid","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An invalid decimal number was given where one was expected.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1751},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15567,"byte_end":15581,"line_start":96,"line_end":96,"column_start":5,"column_end":19},"name":"EscapeHexEmpty","qualname":"::ast::ErrorKind::EscapeHexEmpty","value":"ErrorKind::EscapeHexEmpty","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" A bracketed hex literal was empty.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1753},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15665,"byte_end":15681,"line_start":98,"line_end":98,"column_start":5,"column_end":21},"name":"EscapeHexInvalid","qualname":"::ast::ErrorKind::EscapeHexInvalid","value":"ErrorKind::EscapeHexInvalid","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" A bracketed hex literal did not correspond to a Unicode scalar value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1755},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15735,"byte_end":15756,"line_start":100,"line_end":100,"column_start":5,"column_end":26},"name":"EscapeHexInvalidDigit","qualname":"::ast::ErrorKind::EscapeHexInvalidDigit","value":"ErrorKind::EscapeHexInvalidDigit","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An invalid hexadecimal digit was found.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1757},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15825,"byte_end":15844,"line_start":102,"line_end":102,"column_start":5,"column_end":24},"name":"EscapeUnexpectedEof","qualname":"::ast::ErrorKind::EscapeUnexpectedEof","value":"ErrorKind::EscapeUnexpectedEof","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" EOF was found before an escape sequence was completed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1759},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15891,"byte_end":15909,"line_start":104,"line_end":104,"column_start":5,"column_end":23},"name":"EscapeUnrecognized","qualname":"::ast::ErrorKind::EscapeUnrecognized","value":"ErrorKind::EscapeUnrecognized","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An unrecognized escape sequence.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1761},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":15984,"byte_end":16004,"line_start":106,"line_end":106,"column_start":5,"column_end":25},"name":"FlagDanglingNegation","qualname":"::ast::ErrorKind::FlagDanglingNegation","value":"ErrorKind::FlagDanglingNegation","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" A dangling negation was used when setting flags, e.g., `i-`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1763},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":16054,"byte_end":16067,"line_start":108,"line_end":108,"column_start":5,"column_end":18},"name":"FlagDuplicate","qualname":"::ast::ErrorKind::FlagDuplicate","value":"ErrorKind::FlagDuplicate { original }","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" A flag was used twice, e.g., `i-i`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1765},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":16273,"byte_end":16293,"line_start":114,"line_end":114,"column_start":5,"column_end":25},"name":"FlagRepeatedNegation","qualname":"::ast::ErrorKind::FlagRepeatedNegation","value":"ErrorKind::FlagRepeatedNegation { original }","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" The negation operator was used twice, e.g., `-i-s`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1767},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":16514,"byte_end":16531,"line_start":120,"line_end":120,"column_start":5,"column_end":22},"name":"FlagUnexpectedEof","qualname":"::ast::ErrorKind::FlagUnexpectedEof","value":"ErrorKind::FlagUnexpectedEof","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" Expected a flag but got EOF, e.g., `(?`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1769},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":16575,"byte_end":16591,"line_start":122,"line_end":122,"column_start":5,"column_end":21},"name":"FlagUnrecognized","qualname":"::ast::ErrorKind::FlagUnrecognized","value":"ErrorKind::FlagUnrecognized","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" Unrecognized flag, e.g., `a`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1771},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":16641,"byte_end":16659,"line_start":124,"line_end":124,"column_start":5,"column_end":23},"name":"GroupNameDuplicate","qualname":"::ast::ErrorKind::GroupNameDuplicate","value":"ErrorKind::GroupNameDuplicate { original }","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" A duplicate capture name was found.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1773},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":16901,"byte_end":16915,"line_start":130,"line_end":130,"column_start":5,"column_end":19},"name":"GroupNameEmpty","qualname":"::ast::ErrorKind::GroupNameEmpty","value":"ErrorKind::GroupNameEmpty","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" A capture group name is empty, e.g., `(?P<>abc)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1775},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":17121,"byte_end":17137,"line_start":134,"line_end":134,"column_start":5,"column_end":21},"name":"GroupNameInvalid","qualname":"::ast::ErrorKind::GroupNameInvalid","value":"ErrorKind::GroupNameInvalid","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An invalid character was seen for a capture group name. This includes\n errors where the first character is a digit (even though subsequent\n characters are allowed to be digits).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1777},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":17210,"byte_end":17232,"line_start":136,"line_end":136,"column_start":5,"column_end":27},"name":"GroupNameUnexpectedEof","qualname":"::ast::ErrorKind::GroupNameUnexpectedEof","value":"ErrorKind::GroupNameUnexpectedEof","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" A closing `>` could not be found for a capture group name.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1779},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":17358,"byte_end":17371,"line_start":140,"line_end":140,"column_start":5,"column_end":18},"name":"GroupUnclosed","qualname":"::ast::ErrorKind::GroupUnclosed","value":"ErrorKind::GroupUnclosed","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An unclosed group, e.g., `(ab`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1781},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":17417,"byte_end":17430,"line_start":142,"line_end":142,"column_start":5,"column_end":18},"name":"GroupUnopened","qualname":"::ast::ErrorKind::GroupUnopened","value":"ErrorKind::GroupUnopened","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An unopened group, e.g., `ab)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1783},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":17542,"byte_end":17559,"line_start":145,"line_end":145,"column_start":5,"column_end":22},"name":"NestLimitExceeded","qualname":"::ast::ErrorKind::NestLimitExceeded","value":"ErrorKind::NestLimitExceeded(u32)","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" The nest limit was exceeded. The limit stored here is the limit\n configured in the parser.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1786},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":17709,"byte_end":17731,"line_start":148,"line_end":148,"column_start":5,"column_end":27},"name":"RepetitionCountInvalid","qualname":"::ast::ErrorKind::RepetitionCountInvalid","value":"ErrorKind::RepetitionCountInvalid","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" The range provided in a counted repetition operator is invalid. The\n range is invalid if the start is greater than the end.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1788},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":17852,"byte_end":17879,"line_start":151,"line_end":151,"column_start":5,"column_end":32},"name":"RepetitionCountDecimalEmpty","qualname":"::ast::ErrorKind::RepetitionCountDecimalEmpty","value":"ErrorKind::RepetitionCountDecimalEmpty","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An opening `{` was not followed by a valid decimal value.\n For example, `x{}` or `x{]}` would fail.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1790},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":17953,"byte_end":17976,"line_start":153,"line_end":153,"column_start":5,"column_end":28},"name":"RepetitionCountUnclosed","qualname":"::ast::ErrorKind::RepetitionCountUnclosed","value":"ErrorKind::RepetitionCountUnclosed","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" An opening `{` was found with no corresponding closing `}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1792},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":18290,"byte_end":18307,"line_start":158,"line_end":158,"column_start":5,"column_end":22},"name":"RepetitionMissing","qualname":"::ast::ErrorKind::RepetitionMissing","value":"ErrorKind::RepetitionMissing","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" A repetition operator was applied to a missing sub-expression. This\n occurs, for example, in the regex consisting of just a `*` or even\n `(?i)*`. It is, however, possible to create a repetition operating on\n an empty sub-expression. For example, `()*` is still considered valid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1794},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":18438,"byte_end":18457,"line_start":161,"line_end":161,"column_start":5,"column_end":24},"name":"UnicodeClassInvalid","qualname":"::ast::ErrorKind::UnicodeClassInvalid","value":"ErrorKind::UnicodeClassInvalid","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" The Unicode class is not valid. This typically occurs when a `\\p` is\n followed by something other than a `{`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1796},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":18666,"byte_end":18690,"line_start":165,"line_end":165,"column_start":5,"column_end":29},"name":"UnsupportedBackreference","qualname":"::ast::ErrorKind::UnsupportedBackreference","value":"ErrorKind::UnsupportedBackreference","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" When octal support is disabled, this error is produced when an octal\n escape is used. The octal escape is assumed to be an invocation of\n a backreference, which is the common case.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1798},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":19047,"byte_end":19068,"line_start":171,"line_end":171,"column_start":5,"column_end":26},"name":"UnsupportedLookAround","qualname":"::ast::ErrorKind::UnsupportedLookAround","value":"ErrorKind::UnsupportedLookAround","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" When syntax similar to PCRE's look-around is used, this error is\n returned. Some example syntaxes that are rejected include, but are\n not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and\n `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this\n error is used to improve the user experience.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1800},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":19348,"byte_end":19363,"line_start":178,"line_end":178,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::ast::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1736},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":14212,"byte_end":14221,"line_start":69,"line_end":69,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::ast::ErrorKind","value":"ErrorKind::{CaptureLimitExceeded, ClassEscapeInvalid, ClassRangeInvalid, ClassRangeLiteral, ClassUnclosed, DecimalEmpty, DecimalInvalid, EscapeHexEmpty, EscapeHexInvalid, EscapeHexInvalidDigit, EscapeUnexpectedEof, EscapeUnrecognized, FlagDanglingNegation, FlagDuplicate, FlagRepeatedNegation, FlagUnexpectedEof, FlagUnrecognized, GroupNameDuplicate, GroupNameEmpty, GroupNameInvalid, GroupNameUnexpectedEof, GroupUnclosed, GroupUnopened, NestLimitExceeded, RepetitionCountInvalid, RepetitionCountDecimalEmpty, RepetitionCountUnclosed, RepetitionMissing, UnicodeClassInvalid, UnsupportedBackreference, UnsupportedLookAround, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1737},{"krate":0,"index":1739},{"krate":0,"index":1741},{"krate":0,"index":1743},{"krate":0,"index":1745},{"krate":0,"index":1747},{"krate":0,"index":1749},{"krate":0,"index":1751},{"krate":0,"index":1753},{"krate":0,"index":1755},{"krate":0,"index":1757},{"krate":0,"index":1759},{"krate":0,"index":1761},{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1767},{"krate":0,"index":1769},{"krate":0,"index":1771},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1783},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800}],"decl_id":null,"docs":" The type of an error that occurred while building an AST.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1813},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":25604,"byte_end":25608,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"Span","qualname":"::ast::Span","value":"Span { start, end }","parent":null,"children":[{"krate":0,"index":1814},{"krate":0,"index":1815}],"decl_id":null,"docs":" Span represents the position information of a single AST item.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1814},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":25650,"byte_end":25655,"line_start":325,"line_end":325,"column_start":9,"column_end":14},"name":"start","qualname":"::ast::Span::start","value":"ast::Position","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" The start byte offset.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1815},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":25704,"byte_end":25707,"line_start":327,"line_end":327,"column_start":9,"column_end":12},"name":"end","qualname":"::ast::Span::end","value":"ast::Position","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" The end byte offset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1826},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26353,"byte_end":26361,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"Position","qualname":"::ast::Position","value":"Position { offset, line, column }","parent":null,"children":[{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829}],"decl_id":null,"docs":" A single position in a regular expression.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1827},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26503,"byte_end":26509,"line_start":356,"line_end":356,"column_start":9,"column_end":15},"name":"offset","qualname":"::ast::Position::offset","value":"usize","parent":{"krate":0,"index":1826},"children":[],"decl_id":null,"docs":" The absolute offset of this position, starting at `0` from the\n beginning of the regular expression pattern string.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1828},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26568,"byte_end":26572,"line_start":358,"line_end":358,"column_start":9,"column_end":13},"name":"line","qualname":"::ast::Position::line","value":"usize","parent":{"krate":0,"index":1826},"children":[],"decl_id":null,"docs":" The line number, starting at `1`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1829},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26645,"byte_end":26651,"line_start":360,"line_end":360,"column_start":9,"column_end":15},"name":"column","qualname":"::ast::Position::column","value":"usize","parent":{"krate":0,"index":1826},"children":[],"decl_id":null,"docs":" The approximate column number, starting at `1`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":27235,"byte_end":27238,"line_start":387,"line_end":387,"column_start":12,"column_end":15},"name":"new","qualname":"<Span>::new","value":"fn (start: Position, end: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span with the given positions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":27412,"byte_end":27417,"line_start":392,"line_end":392,"column_start":12,"column_end":17},"name":"splat","qualname":"<Span>::splat","value":"fn (pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span using the given position as the start and end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":27582,"byte_end":27592,"line_start":398,"line_end":398,"column_start":12,"column_end":22},"name":"with_start","qualname":"<Span>::with_start","value":"fn (self, pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span by replacing the starting the position with the one\n given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":27769,"byte_end":27777,"line_start":404,"line_end":404,"column_start":12,"column_end":20},"name":"with_end","qualname":"<Span>::with_end","value":"fn (self, pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span by replacing the ending the position with the one\n given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":27932,"byte_end":27943,"line_start":409,"line_end":409,"column_start":12,"column_end":23},"name":"is_one_line","qualname":"<Span>::is_one_line","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this span occurs on a single line.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":28172,"byte_end":28180,"line_start":415,"line_end":415,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Span>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this span is empty. That is, it points to\n a single position in the concrete syntax of a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":28623,"byte_end":28626,"line_start":429,"line_end":429,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"fn (offset: usize, line: usize, column: usize) -> Position","parent":null,"children":[],"decl_id":null,"docs":" Create a new position with the given information.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1840},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":29068,"byte_end":29080,"line_start":441,"line_end":441,"column_start":12,"column_end":24},"name":"WithComments","qualname":"::ast::WithComments","value":"WithComments { ast, comments }","parent":null,"children":[{"krate":0,"index":1841},{"krate":0,"index":1842}],"decl_id":null,"docs":" An abstract syntax tree for a singular expression along with comments\n found.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1841},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":29115,"byte_end":29118,"line_start":443,"line_end":443,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::WithComments::ast","value":"ast::Ast","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":" The actual ast.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1842},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":29196,"byte_end":29204,"line_start":445,"line_end":445,"column_start":9,"column_end":17},"name":"comments","qualname":"::ast::WithComments::comments","value":"std::vec::Vec<ast::Comment>","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":" All comments found in the original regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1854},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":29427,"byte_end":29434,"line_start":453,"line_end":453,"column_start":12,"column_end":19},"name":"Comment","qualname":"::ast::Comment","value":"Comment { span, comment }","parent":null,"children":[{"krate":0,"index":1855},{"krate":0,"index":1856}],"decl_id":null,"docs":" A comment from a regular expression with an associated span.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1855},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":29524,"byte_end":29528,"line_start":455,"line_end":455,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Comment::span","value":"ast::Span","parent":{"krate":0,"index":1854},"children":[],"decl_id":null,"docs":" The span of this comment, including the beginning `#` and ending `\\n`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1856},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":29685,"byte_end":29692,"line_start":458,"line_end":458,"column_start":9,"column_end":16},"name":"comment","qualname":"::ast::Comment::comment","value":"std::string::String","parent":{"krate":0,"index":1854},"children":[],"decl_id":null,"docs":" The comment text, starting with the first character following the `#`\n and ending with the last character preceding the `\\n`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1869},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30139,"byte_end":30144,"line_start":471,"line_end":471,"column_start":5,"column_end":10},"name":"Empty","qualname":"::ast::Ast::Empty","value":"Ast::Empty(Span)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" An empty regex that matches everything.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1872},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30195,"byte_end":30200,"line_start":473,"line_end":473,"column_start":5,"column_end":10},"name":"Flags","qualname":"::ast::Ast::Flags","value":"Ast::Flags(SetFlags)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" A set of flags, e.g., `(?is)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1875},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30285,"byte_end":30292,"line_start":475,"line_end":475,"column_start":5,"column_end":12},"name":"Literal","qualname":"::ast::Ast::Literal","value":"Ast::Literal(Literal)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" A single character literal, which includes escape sequences.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1878},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30342,"byte_end":30345,"line_start":477,"line_end":477,"column_start":5,"column_end":8},"name":"Dot","qualname":"::ast::Ast::Dot","value":"Ast::Dot(Span)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" The \"any character\" class.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1881},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30396,"byte_end":30405,"line_start":479,"line_end":479,"column_start":5,"column_end":14},"name":"Assertion","qualname":"::ast::Ast::Assertion","value":"Ast::Assertion(Assertion)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" A single zero-width assertion.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1884},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30571,"byte_end":30576,"line_start":482,"line_end":482,"column_start":5,"column_end":10},"name":"Class","qualname":"::ast::Ast::Class","value":"Ast::Class(Class)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" A single character class. This includes all forms of character classes\n except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1887},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30663,"byte_end":30673,"line_start":484,"line_end":484,"column_start":5,"column_end":15},"name":"Repetition","qualname":"::ast::Ast::Repetition","value":"Ast::Repetition(Repetition)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" A repetition operator applied to an arbitrary regular expression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1890},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30729,"byte_end":30734,"line_start":486,"line_end":486,"column_start":5,"column_end":10},"name":"Group","qualname":"::ast::Ast::Group","value":"Ast::Group(Group)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" A grouped regular expression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1893},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30794,"byte_end":30805,"line_start":488,"line_end":488,"column_start":5,"column_end":16},"name":"Alternation","qualname":"::ast::Ast::Alternation","value":"Ast::Alternation(Alternation)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" An alternation of regular expressions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1896},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30872,"byte_end":30878,"line_start":490,"line_end":490,"column_start":5,"column_end":11},"name":"Concat","qualname":"::ast::Ast::Concat","value":"Ast::Concat(Concat)","parent":{"krate":0,"index":1868},"children":[],"decl_id":null,"docs":" A concatenation of regular expressions.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1868},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30081,"byte_end":30084,"line_start":469,"line_end":469,"column_start":10,"column_end":13},"name":"Ast","qualname":"::ast::Ast","value":"Ast::{Empty, Flags, Literal, Dot, Assertion, Class, Repetition, Group, Alternation, Concat}","parent":null,"children":[{"krate":0,"index":1869},{"krate":0,"index":1872},{"krate":0,"index":1875},{"krate":0,"index":1878},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1887},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1896}],"decl_id":null,"docs":" An abstract syntax tree for a single regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30967,"byte_end":30971,"line_start":495,"line_end":495,"column_start":12,"column_end":16},"name":"span","qualname":"<Ast>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this abstract syntax tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":31531,"byte_end":31539,"line_start":511,"line_end":511,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Ast>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this Ast is empty.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1910},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":32745,"byte_end":32756,"line_start":553,"line_end":553,"column_start":12,"column_end":23},"name":"Alternation","qualname":"::ast::Alternation","value":"Alternation { span, asts }","parent":null,"children":[{"krate":0,"index":1911},{"krate":0,"index":1912}],"decl_id":null,"docs":" An alternation of regular expressions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1911},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":32805,"byte_end":32809,"line_start":555,"line_end":555,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Alternation::span","value":"ast::Span","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" The span of this alternation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1912},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":32868,"byte_end":32872,"line_start":557,"line_end":557,"column_start":9,"column_end":13},"name":"asts","qualname":"::ast::Alternation::asts","value":"std::vec::Vec<ast::Ast>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" The alternate regular expressions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":33186,"byte_end":33194,"line_start":566,"line_end":566,"column_start":12,"column_end":20},"name":"into_ast","qualname":"<Alternation>::into_ast","value":"fn (mut self) -> Ast","parent":null,"children":[],"decl_id":null,"docs":" Return this alternation as an AST.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1924},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":33483,"byte_end":33489,"line_start":577,"line_end":577,"column_start":12,"column_end":18},"name":"Concat","qualname":"::ast::Concat","value":"Concat { span, asts }","parent":null,"children":[{"krate":0,"index":1925},{"krate":0,"index":1926}],"decl_id":null,"docs":" A concatenation of regular expressions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1925},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":33540,"byte_end":33544,"line_start":579,"line_end":579,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Concat::span","value":"ast::Span","parent":{"krate":0,"index":1924},"children":[],"decl_id":null,"docs":" The span of this concatenation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1926},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":33607,"byte_end":33611,"line_start":581,"line_end":581,"column_start":9,"column_end":13},"name":"asts","qualname":"::ast::Concat::asts","value":"std::vec::Vec<ast::Ast>","parent":{"krate":0,"index":1924},"children":[],"decl_id":null,"docs":" The concatenation regular expressions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":33921,"byte_end":33929,"line_start":590,"line_end":590,"column_start":12,"column_end":20},"name":"into_ast","qualname":"<Concat>::into_ast","value":"fn (mut self) -> Ast","parent":null,"children":[],"decl_id":null,"docs":" Return this concatenation as an AST.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1938},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":34375,"byte_end":34382,"line_start":605,"line_end":605,"column_start":12,"column_end":19},"name":"Literal","qualname":"::ast::Literal","value":"Literal { span, kind, c }","parent":null,"children":[{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941}],"decl_id":null,"docs":" A single literal expression.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1939},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":34427,"byte_end":34431,"line_start":607,"line_end":607,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Literal::span","value":"ast::Span","parent":{"krate":0,"index":1938},"children":[],"decl_id":null,"docs":" The span of this literal.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1940},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":34481,"byte_end":34485,"line_start":609,"line_end":609,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Literal::kind","value":"ast::LiteralKind","parent":{"krate":0,"index":1938},"children":[],"decl_id":null,"docs":" The kind of this literal.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1941},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":34572,"byte_end":34573,"line_start":611,"line_end":611,"column_start":9,"column_end":10},"name":"c","qualname":"::ast::Literal::c","value":"char","parent":{"krate":0,"index":1938},"children":[],"decl_id":null,"docs":" The Unicode scalar value corresponding to this literal.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":34756,"byte_end":34760,"line_start":617,"line_end":617,"column_start":12,"column_end":16},"name":"byte","qualname":"<Literal>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" If this literal was written as a `\\x` hex escape, then this returns\n the corresponding byte value. Otherwise, this returns `None`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1954},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":35166,"byte_end":35174,"line_start":631,"line_end":631,"column_start":5,"column_end":13},"name":"Verbatim","qualname":"::ast::LiteralKind::Verbatim","value":"LiteralKind::Verbatim","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" The literal is written verbatim, e.g., `a` or `☃`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1956},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":35279,"byte_end":35290,"line_start":634,"line_end":634,"column_start":5,"column_end":16},"name":"Punctuation","qualname":"::ast::LiteralKind::Punctuation","value":"LiteralKind::Punctuation","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" The literal is written as an escape because it is punctuation, e.g.,\n `\\*` or `\\[`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1958},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":35361,"byte_end":35366,"line_start":636,"line_end":636,"column_start":5,"column_end":10},"name":"Octal","qualname":"::ast::LiteralKind::Octal","value":"LiteralKind::Octal","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" The literal is written as an octal escape, e.g., `\\141`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1960},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":35545,"byte_end":35553,"line_start":640,"line_end":640,"column_start":5,"column_end":13},"name":"HexFixed","qualname":"::ast::LiteralKind::HexFixed","value":"LiteralKind::HexFixed(HexLiteralKind)","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" The literal is written as a hex code with a fixed number of digits\n depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or\n `\\U00000061`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1963},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":35767,"byte_end":35775,"line_start":644,"line_end":644,"column_start":5,"column_end":13},"name":"HexBrace","qualname":"::ast::LiteralKind::HexBrace","value":"LiteralKind::HexBrace(HexLiteralKind)","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" The literal is written as a hex code with a bracketed number of\n digits. The only restriction is that the bracketed hex code must refer\n to a valid Unicode scalar value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1966},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":35890,"byte_end":35897,"line_start":647,"line_end":647,"column_start":5,"column_end":12},"name":"Special","qualname":"::ast::LiteralKind::Special","value":"LiteralKind::Special(SpecialLiteralKind)","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" The literal is written as a specially recognized escape, e.g., `\\f`\n or `\\n`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1953},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":35087,"byte_end":35098,"line_start":629,"line_end":629,"column_start":10,"column_end":21},"name":"LiteralKind","qualname":"::ast::LiteralKind","value":"LiteralKind::{Verbatim, Punctuation, Octal, HexFixed, HexBrace, Special}","parent":null,"children":[{"krate":0,"index":1954},{"krate":0,"index":1956},{"krate":0,"index":1958},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1966}],"decl_id":null,"docs":" The kind of a single literal expression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1981},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36178,"byte_end":36182,"line_start":657,"line_end":657,"column_start":5,"column_end":9},"name":"Bell","qualname":"::ast::SpecialLiteralKind::Bell","value":"SpecialLiteralKind::Bell","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Bell, spelled `\\a` (`\\x07`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1983},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36230,"byte_end":36238,"line_start":659,"line_end":659,"column_start":5,"column_end":13},"name":"FormFeed","qualname":"::ast::SpecialLiteralKind::FormFeed","value":"SpecialLiteralKind::FormFeed","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Form feed, spelled `\\f` (`\\x0C`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1985},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36280,"byte_end":36283,"line_start":661,"line_end":661,"column_start":5,"column_end":8},"name":"Tab","qualname":"::ast::SpecialLiteralKind::Tab","value":"SpecialLiteralKind::Tab","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Tab, spelled `\\t` (`\\x09`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1987},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36331,"byte_end":36339,"line_start":663,"line_end":663,"column_start":5,"column_end":13},"name":"LineFeed","qualname":"::ast::SpecialLiteralKind::LineFeed","value":"SpecialLiteralKind::LineFeed","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Line feed, spelled `\\n` (`\\x0A`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1989},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36393,"byte_end":36407,"line_start":665,"line_end":665,"column_start":5,"column_end":19},"name":"CarriageReturn","qualname":"::ast::SpecialLiteralKind::CarriageReturn","value":"SpecialLiteralKind::CarriageReturn","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Carriage return, spelled `\\r` (`\\x0D`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1991},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36458,"byte_end":36469,"line_start":667,"line_end":667,"column_start":5,"column_end":16},"name":"VerticalTab","qualname":"::ast::SpecialLiteralKind::VerticalTab","value":"SpecialLiteralKind::VerticalTab","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Vertical tab, spelled `\\v` (`\\x0B`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1993},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36582,"byte_end":36587,"line_start":670,"line_end":670,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::SpecialLiteralKind::Space","value":"SpecialLiteralKind::Space","parent":{"krate":0,"index":1980},"children":[],"decl_id":null,"docs":" Space, spelled `\\ ` (`\\x20`). Note that this can only appear when\n parsing in verbose mode.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1980},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36116,"byte_end":36134,"line_start":655,"line_end":655,"column_start":10,"column_end":28},"name":"SpecialLiteralKind","qualname":"::ast::SpecialLiteralKind","value":"SpecialLiteralKind::{Bell, FormFeed, Tab, LineFeed, CarriageReturn, VerticalTab, Space}","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1983},{"krate":0,"index":1985},{"krate":0,"index":1987},{"krate":0,"index":1989},{"krate":0,"index":1991},{"krate":0,"index":1993}],"decl_id":null,"docs":" The type of a special literal.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2006},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36965,"byte_end":36966,"line_start":682,"line_end":682,"column_start":5,"column_end":6},"name":"X","qualname":"::ast::HexLiteralKind::X","value":"HexLiteralKind::X","parent":{"krate":0,"index":2005},"children":[],"decl_id":null,"docs":" A `\\x` prefix. When used without brackets, this form is limited to\n two digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2008},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":37068,"byte_end":37080,"line_start":685,"line_end":685,"column_start":5,"column_end":17},"name":"UnicodeShort","qualname":"::ast::HexLiteralKind::UnicodeShort","value":"HexLiteralKind::UnicodeShort","parent":{"krate":0,"index":2005},"children":[],"decl_id":null,"docs":" A `\\u` prefix. When used without brackets, this form is limited to\n four digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2010},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":37183,"byte_end":37194,"line_start":688,"line_end":688,"column_start":5,"column_end":16},"name":"UnicodeLong","qualname":"::ast::HexLiteralKind::UnicodeLong","value":"HexLiteralKind::UnicodeLong","parent":{"krate":0,"index":2005},"children":[],"decl_id":null,"docs":" A `\\U` prefix. When used without brackets, this form is limited to\n eight digits.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2005},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":36849,"byte_end":36863,"line_start":679,"line_end":679,"column_start":10,"column_end":24},"name":"HexLiteralKind","qualname":"::ast::HexLiteralKind","value":"HexLiteralKind::{X, UnicodeShort, UnicodeLong}","parent":null,"children":[{"krate":0,"index":2006},{"krate":0,"index":2008},{"krate":0,"index":2010}],"decl_id":null,"docs":" The type of a Unicode hex literal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":37420,"byte_end":37426,"line_start":695,"line_end":695,"column_start":12,"column_end":18},"name":"digits","qualname":"<HexLiteralKind>::digits","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of digits that must be used with this literal form when\n used without brackets. When used with brackets, there is no\n restriction on the number of digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2023},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":37777,"byte_end":37784,"line_start":708,"line_end":708,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::Class::Unicode","value":"Class::Unicode(ClassUnicode)","parent":{"krate":0,"index":2022},"children":[],"decl_id":null,"docs":" A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2026},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":37856,"byte_end":37860,"line_start":710,"line_end":710,"column_start":5,"column_end":9},"name":"Perl","qualname":"::ast::Class::Perl","value":"Class::Perl(ClassPerl)","parent":{"krate":0,"index":2022},"children":[],"decl_id":null,"docs":" A perl character class, e.g., `\\d` or `\\W`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2029},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38039,"byte_end":38048,"line_start":714,"line_end":714,"column_start":5,"column_end":14},"name":"Bracketed","qualname":"::ast::Class::Bracketed","value":"Class::Bracketed(ClassBracketed)","parent":{"krate":0,"index":2022},"children":[],"decl_id":null,"docs":" A bracketed character class set, which may contain zero or more\n character ranges and/or zero or more nested classes. e.g.,\n `[a-zA-Z\\pL]`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2022},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":37702,"byte_end":37707,"line_start":706,"line_end":706,"column_start":10,"column_end":15},"name":"Class","qualname":"::ast::Class","value":"Class::{Unicode, Perl, Bracketed}","parent":null,"children":[{"krate":0,"index":2023},{"krate":0,"index":2026},{"krate":0,"index":2029}],"decl_id":null,"docs":" A single character class expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38142,"byte_end":38146,"line_start":719,"line_end":719,"column_start":12,"column_end":16},"name":"span","qualname":"<Class>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2043},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38421,"byte_end":38430,"line_start":730,"line_end":730,"column_start":12,"column_end":21},"name":"ClassPerl","qualname":"::ast::ClassPerl","value":"ClassPerl { span, kind, negated }","parent":null,"children":[{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046}],"decl_id":null,"docs":" A Perl character class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2044},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38473,"byte_end":38477,"line_start":732,"line_end":732,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassPerl::span","value":"ast::Span","parent":{"krate":0,"index":2043},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2045},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38525,"byte_end":38529,"line_start":734,"line_end":734,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassPerl::kind","value":"ast::ClassPerlKind","parent":{"krate":0,"index":2043},"children":[],"decl_id":null,"docs":" The kind of Perl class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2046},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38646,"byte_end":38653,"line_start":737,"line_end":737,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassPerl::negated","value":"bool","parent":{"krate":0,"index":2043},"children":[],"decl_id":null,"docs":" Whether the class is negated or not. e.g., `\\d` is not negated but\n `\\D` is.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2059},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38799,"byte_end":38804,"line_start":744,"line_end":744,"column_start":5,"column_end":10},"name":"Digit","qualname":"::ast::ClassPerlKind::Digit","value":"ClassPerlKind::Digit","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":" Decimal numbers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2061},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38830,"byte_end":38835,"line_start":746,"line_end":746,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::ClassPerlKind::Space","value":"ClassPerlKind::Space","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":" Whitespace.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2063},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38866,"byte_end":38870,"line_start":748,"line_end":748,"column_start":5,"column_end":9},"name":"Word","qualname":"::ast::ClassPerlKind::Word","value":"ClassPerlKind::Word","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":" Word characters.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2058},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38754,"byte_end":38767,"line_start":742,"line_end":742,"column_start":10,"column_end":23},"name":"ClassPerlKind","qualname":"::ast::ClassPerlKind","value":"ClassPerlKind::{Digit, Space, Word}","parent":null,"children":[{"krate":0,"index":2059},{"krate":0,"index":2061},{"krate":0,"index":2063}],"decl_id":null,"docs":" The available Perl character classes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2075},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38955,"byte_end":38965,"line_start":753,"line_end":753,"column_start":12,"column_end":22},"name":"ClassAscii","qualname":"::ast::ClassAscii","value":"ClassAscii { span, kind, negated }","parent":null,"children":[{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078}],"decl_id":null,"docs":" An ASCII character class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2076},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39008,"byte_end":39012,"line_start":755,"line_end":755,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassAscii::span","value":"ast::Span","parent":{"krate":0,"index":2075},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2077},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39061,"byte_end":39065,"line_start":757,"line_end":757,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassAscii::kind","value":"ast::ClassAsciiKind","parent":{"krate":0,"index":2075},"children":[],"decl_id":null,"docs":" The kind of ASCII class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2078},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39202,"byte_end":39209,"line_start":760,"line_end":760,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassAscii::negated","value":"bool","parent":{"krate":0,"index":2075},"children":[],"decl_id":null,"docs":" Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated\n but `[[:^alpha:]]` is.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2091},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39354,"byte_end":39359,"line_start":767,"line_end":767,"column_start":5,"column_end":10},"name":"Alnum","qualname":"::ast::ClassAsciiKind::Alnum","value":"ClassAsciiKind::Alnum","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[0-9A-Za-z]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2093},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39384,"byte_end":39389,"line_start":769,"line_end":769,"column_start":5,"column_end":10},"name":"Alpha","qualname":"::ast::ClassAsciiKind::Alpha","value":"ClassAsciiKind::Alpha","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[A-Za-z]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2095},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39417,"byte_end":39422,"line_start":771,"line_end":771,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::ast::ClassAsciiKind::Ascii","value":"ClassAsciiKind::Ascii","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[\\x00-\\x7F]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2097},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39444,"byte_end":39449,"line_start":773,"line_end":773,"column_start":5,"column_end":10},"name":"Blank","qualname":"::ast::ClassAsciiKind::Blank","value":"ClassAsciiKind::Blank","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[ \\t]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2099},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39481,"byte_end":39486,"line_start":775,"line_end":775,"column_start":5,"column_end":10},"name":"Cntrl","qualname":"::ast::ClassAsciiKind::Cntrl","value":"ClassAsciiKind::Cntrl","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[\\x00-\\x1F\\x7F]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2101},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39508,"byte_end":39513,"line_start":777,"line_end":777,"column_start":5,"column_end":10},"name":"Digit","qualname":"::ast::ClassAsciiKind::Digit","value":"ClassAsciiKind::Digit","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[0-9]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2103},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39535,"byte_end":39540,"line_start":779,"line_end":779,"column_start":5,"column_end":10},"name":"Graph","qualname":"::ast::ClassAsciiKind::Graph","value":"ClassAsciiKind::Graph","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[!-~]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2105},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39562,"byte_end":39567,"line_start":781,"line_end":781,"column_start":5,"column_end":10},"name":"Lower","qualname":"::ast::ClassAsciiKind::Lower","value":"ClassAsciiKind::Lower","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[a-z]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2107},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39589,"byte_end":39594,"line_start":783,"line_end":783,"column_start":5,"column_end":10},"name":"Print","qualname":"::ast::ClassAsciiKind::Print","value":"ClassAsciiKind::Print","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[ -~]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2109},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39626,"byte_end":39631,"line_start":785,"line_end":785,"column_start":5,"column_end":10},"name":"Punct","qualname":"::ast::ClassAsciiKind::Punct","value":"ClassAsciiKind::Punct","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[!-/:-@\\[-`{-~]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2111},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39661,"byte_end":39666,"line_start":787,"line_end":787,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::ClassAsciiKind::Space","value":"ClassAsciiKind::Space","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[\\t\\n\\v\\f\\r ]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2113},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39688,"byte_end":39693,"line_start":789,"line_end":789,"column_start":5,"column_end":10},"name":"Upper","qualname":"::ast::ClassAsciiKind::Upper","value":"ClassAsciiKind::Upper","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[A-Z]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2115},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39722,"byte_end":39726,"line_start":791,"line_end":791,"column_start":5,"column_end":9},"name":"Word","qualname":"::ast::ClassAsciiKind::Word","value":"ClassAsciiKind::Word","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[0-9A-Za-z_]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2117},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39754,"byte_end":39760,"line_start":793,"line_end":793,"column_start":5,"column_end":11},"name":"Xdigit","qualname":"::ast::ClassAsciiKind::Xdigit","value":"ClassAsciiKind::Xdigit","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" `[0-9A-Fa-f]`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2090},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39311,"byte_end":39325,"line_start":765,"line_end":765,"column_start":10,"column_end":24},"name":"ClassAsciiKind","qualname":"::ast::ClassAsciiKind","value":"ClassAsciiKind::{Alnum, Alpha, Ascii, Blank, Cntrl, Digit, Graph, Lower, Print, Punct, Space, Upper, Word, Xdigit}","parent":null,"children":[{"krate":0,"index":2091},{"krate":0,"index":2093},{"krate":0,"index":2095},{"krate":0,"index":2097},{"krate":0,"index":2099},{"krate":0,"index":2101},{"krate":0,"index":2103},{"krate":0,"index":2105},{"krate":0,"index":2107},{"krate":0,"index":2109},{"krate":0,"index":2111},{"krate":0,"index":2113},{"krate":0,"index":2115},{"krate":0,"index":2117}],"decl_id":null,"docs":" The available ASCII character classes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":40131,"byte_end":40140,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"from_name","qualname":"<ClassAsciiKind>::from_name","value":"fn (name: &str) -> Option<ClassAsciiKind>","parent":null,"children":[],"decl_id":null,"docs":" Return the corresponding ClassAsciiKind variant for the given name.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2129},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":40866,"byte_end":40878,"line_start":828,"line_end":828,"column_start":12,"column_end":24},"name":"ClassUnicode","qualname":"::ast::ClassUnicode","value":"ClassUnicode { span, negated, kind }","parent":null,"children":[{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132}],"decl_id":null,"docs":" A Unicode character class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2130},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":40921,"byte_end":40925,"line_start":830,"line_end":830,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassUnicode::span","value":"ast::Span","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2131},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":41482,"byte_end":41489,"line_start":840,"line_end":840,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassUnicode::negated","value":"bool","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" Whether this class is negated or not.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2132},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":41540,"byte_end":41544,"line_start":842,"line_end":842,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassUnicode::kind","value":"ast::ClassUnicodeKind","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" The kind of Unicode class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":41806,"byte_end":41816,"line_start":850,"line_end":850,"column_start":12,"column_end":22},"name":"is_negated","qualname":"<ClassUnicode>::is_negated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this class has been negated.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2145},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":42232,"byte_end":42241,"line_start":865,"line_end":865,"column_start":5,"column_end":14},"name":"OneLetter","qualname":"::ast::ClassUnicodeKind::OneLetter","value":"ClassUnicodeKind::OneLetter(char)","parent":{"krate":0,"index":2144},"children":[],"decl_id":null,"docs":" A one letter abbreviated class, e.g., `\\pN`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2148},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":42341,"byte_end":42346,"line_start":868,"line_end":868,"column_start":5,"column_end":10},"name":"Named","qualname":"::ast::ClassUnicodeKind::Named","value":"ClassUnicodeKind::Named(String)","parent":{"krate":0,"index":2144},"children":[],"decl_id":null,"docs":" A binary property, general category or script. The string may be\n empty.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2151},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":42409,"byte_end":42419,"line_start":870,"line_end":870,"column_start":5,"column_end":15},"name":"NamedValue","qualname":"::ast::ClassUnicodeKind::NamedValue","value":"ClassUnicodeKind::NamedValue { op, name, value }","parent":{"krate":0,"index":2144},"children":[],"decl_id":null,"docs":" A property name and an associated value.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2144},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":42156,"byte_end":42172,"line_start":863,"line_end":863,"column_start":10,"column_end":26},"name":"ClassUnicodeKind","qualname":"::ast::ClassUnicodeKind","value":"ClassUnicodeKind::{OneLetter, Named, NamedValue}","parent":null,"children":[{"krate":0,"index":2145},{"krate":0,"index":2148},{"krate":0,"index":2151}],"decl_id":null,"docs":" The available forms of Unicode character classes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2167},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":42885,"byte_end":42890,"line_start":884,"line_end":884,"column_start":5,"column_end":10},"name":"Equal","qualname":"::ast::ClassUnicodeOpKind::Equal","value":"ClassUnicodeOpKind::Equal","parent":{"krate":0,"index":2166},"children":[],"decl_id":null,"docs":" A property set to a specific value, e.g., `\\p{scx=Katakana}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2169},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":42988,"byte_end":42993,"line_start":887,"line_end":887,"column_start":5,"column_end":10},"name":"Colon","qualname":"::ast::ClassUnicodeOpKind::Colon","value":"ClassUnicodeOpKind::Colon","parent":{"krate":0,"index":2166},"children":[],"decl_id":null,"docs":" A property set to a specific value using a colon, e.g.,\n `\\p{scx:Katakana}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2171},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":43076,"byte_end":43084,"line_start":889,"line_end":889,"column_start":5,"column_end":13},"name":"NotEqual","qualname":"::ast::ClassUnicodeOpKind::NotEqual","value":"ClassUnicodeOpKind::NotEqual","parent":{"krate":0,"index":2166},"children":[],"decl_id":null,"docs":" A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2166},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":42790,"byte_end":42808,"line_start":882,"line_end":882,"column_start":10,"column_end":28},"name":"ClassUnicodeOpKind","qualname":"::ast::ClassUnicodeOpKind","value":"ClassUnicodeOpKind::{Equal, Colon, NotEqual}","parent":null,"children":[{"krate":0,"index":2167},{"krate":0,"index":2169},{"krate":0,"index":2171}],"decl_id":null,"docs":" The type of op used in a Unicode character class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":43175,"byte_end":43183,"line_start":894,"line_end":894,"column_start":12,"column_end":20},"name":"is_equal","qualname":"<ClassUnicodeOpKind>::is_equal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the op is an equality op or not.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2183},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":43442,"byte_end":43456,"line_start":904,"line_end":904,"column_start":12,"column_end":26},"name":"ClassBracketed","qualname":"::ast::ClassBracketed","value":"ClassBracketed { span, negated, kind }","parent":null,"children":[{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186}],"decl_id":null,"docs":" A bracketed character class, e.g., `[a-z0-9]`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2184},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":43499,"byte_end":43503,"line_start":906,"line_end":906,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassBracketed::span","value":"ast::Span","parent":{"krate":0,"index":2183},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2185},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":43615,"byte_end":43622,"line_start":909,"line_end":909,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassBracketed::negated","value":"bool","parent":{"krate":0,"index":2183},"children":[],"decl_id":null,"docs":" Whether this class is negated or not. e.g., `[a]` is not negated but\n `[^a]` is.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2186},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":43790,"byte_end":43794,"line_start":912,"line_end":912,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassBracketed::kind","value":"ast::ClassSet","parent":{"krate":0,"index":2183},"children":[],"decl_id":null,"docs":" The type of this set. A set is either a normal union of things, e.g.,\n `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2199},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":44259,"byte_end":44263,"line_start":925,"line_end":925,"column_start":5,"column_end":9},"name":"Item","qualname":"::ast::ClassSet::Item","value":"ClassSet::Item(ClassSetItem)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" An item, which can be a single literal, range, nested character class\n or a union of items.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2202},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":44339,"byte_end":44347,"line_start":927,"line_end":927,"column_start":5,"column_end":13},"name":"BinaryOp","qualname":"::ast::ClassSet::BinaryOp","value":"ClassSet::BinaryOp(ClassSetBinaryOp)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" A single binary operation (i.e., &&, -- or ~~).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2198},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":44137,"byte_end":44145,"line_start":922,"line_end":922,"column_start":10,"column_end":18},"name":"ClassSet","qualname":"::ast::ClassSet","value":"ClassSet::{Item, BinaryOp}","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2202}],"decl_id":null,"docs":" A character class set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":44431,"byte_end":44436,"line_start":932,"line_end":932,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassSet>::union","value":"fn (ast: ClassSetUnion) -> ClassSet","parent":null,"children":[],"decl_id":null,"docs":" Build a set from a union.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":44591,"byte_end":44595,"line_start":937,"line_end":937,"column_start":12,"column_end":16},"name":"span","qualname":"<ClassSet>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class set.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2217},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45338,"byte_end":45343,"line_start":961,"line_end":961,"column_start":5,"column_end":10},"name":"Empty","qualname":"::ast::ClassSetItem::Empty","value":"ClassSetItem::Empty(Span)","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" An empty item.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2220},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45381,"byte_end":45388,"line_start":963,"line_end":963,"column_start":5,"column_end":12},"name":"Literal","qualname":"::ast::ClassSetItem::Literal","value":"ClassSetItem::Literal(Literal)","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" A single literal.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2223},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45441,"byte_end":45446,"line_start":965,"line_end":965,"column_start":5,"column_end":10},"name":"Range","qualname":"::ast::ClassSetItem::Range","value":"ClassSetItem::Range(ClassSetRange)","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" A range between two literals.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2226},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45535,"byte_end":45540,"line_start":967,"line_end":967,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::ast::ClassSetItem::Ascii","value":"ClassSetItem::Ascii(ClassAscii)","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2229},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45621,"byte_end":45628,"line_start":969,"line_end":969,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::ClassSetItem::Unicode","value":"ClassSetItem::Unicode(ClassUnicode)","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2232},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45700,"byte_end":45704,"line_start":971,"line_end":971,"column_start":5,"column_end":9},"name":"Perl","qualname":"::ast::ClassSetItem::Perl","value":"ClassSetItem::Perl(ClassPerl)","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" A perl character class, e.g., `\\d` or `\\W`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2235},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45883,"byte_end":45892,"line_start":975,"line_end":975,"column_start":5,"column_end":14},"name":"Bracketed","qualname":"::ast::ClassSetItem::Bracketed","value":"ClassSetItem::Bracketed(Box<ClassBracketed>)","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" A bracketed character class set, which may contain zero or more\n character ranges and/or zero or more nested classes. e.g.,\n `[a-zA-Z\\pL]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2238},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45945,"byte_end":45950,"line_start":977,"line_end":977,"column_start":5,"column_end":10},"name":"Union","qualname":"::ast::ClassSetItem::Union","value":"ClassSetItem::Union(ClassSetUnion)","parent":{"krate":0,"index":2216},"children":[],"decl_id":null,"docs":" A union of items.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2216},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45065,"byte_end":45077,"line_start":955,"line_end":955,"column_start":10,"column_end":22},"name":"ClassSetItem","qualname":"::ast::ClassSetItem","value":"ClassSetItem::{Empty, Literal, Range, Ascii, Unicode, Perl, Bracketed, Union}","parent":null,"children":[{"krate":0,"index":2217},{"krate":0,"index":2220},{"krate":0,"index":2223},{"krate":0,"index":2226},{"krate":0,"index":2229},{"krate":0,"index":2232},{"krate":0,"index":2235},{"krate":0,"index":2238}],"decl_id":null,"docs":" A single component of a character class set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":46059,"byte_end":46063,"line_start":982,"line_end":982,"column_start":12,"column_end":16},"name":"span","qualname":"<ClassSetItem>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class set item.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2252},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":46633,"byte_end":46646,"line_start":998,"line_end":998,"column_start":12,"column_end":25},"name":"ClassSetRange","qualname":"::ast::ClassSetRange","value":"ClassSetRange { span, start, end }","parent":null,"children":[{"krate":0,"index":2253},{"krate":0,"index":2254},{"krate":0,"index":2255}],"decl_id":null,"docs":" A single character class range in a set.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2253},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":46689,"byte_end":46693,"line_start":1000,"line_end":1000,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetRange::span","value":"ast::Span","parent":{"krate":0,"index":2252},"children":[],"decl_id":null,"docs":" The span of this range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2254},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":46742,"byte_end":46747,"line_start":1002,"line_end":1002,"column_start":9,"column_end":14},"name":"start","qualname":"::ast::ClassSetRange::start","value":"ast::Literal","parent":{"krate":0,"index":2252},"children":[],"decl_id":null,"docs":" The start of this range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2255},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":46797,"byte_end":46800,"line_start":1004,"line_end":1004,"column_start":9,"column_end":12},"name":"end","qualname":"::ast::ClassSetRange::end","value":"ast::Literal","parent":{"krate":0,"index":2252},"children":[],"decl_id":null,"docs":" The end of this range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":47023,"byte_end":47031,"line_start":1012,"line_end":1012,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<ClassSetRange>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class range is valid.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2267},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":47194,"byte_end":47207,"line_start":1019,"line_end":1019,"column_start":12,"column_end":25},"name":"ClassSetUnion","qualname":"::ast::ClassSetUnion","value":"ClassSetUnion { span, items }","parent":null,"children":[{"krate":0,"index":2268},{"krate":0,"index":2269}],"decl_id":null,"docs":" A union of items inside a character class set.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2268},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":47309,"byte_end":47313,"line_start":1022,"line_end":1022,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetUnion::span","value":"ast::Span","parent":{"krate":0,"index":2267},"children":[],"decl_id":null,"docs":" The span of the items in this operation. e.g., the `a-z0-9` in\n `[^a-z0-9]`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2269},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":47384,"byte_end":47389,"line_start":1024,"line_end":1024,"column_start":9,"column_end":14},"name":"items","qualname":"::ast::ClassSetUnion::items","value":"std::vec::Vec<ast::ClassSetItem>","parent":{"krate":0,"index":2267},"children":[],"decl_id":null,"docs":" The sequence of items that make up this union.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":47955,"byte_end":47959,"line_start":1038,"line_end":1038,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassSetUnion>::push","value":"fn (&mut self, item: ClassSetItem) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a new item in this union.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":48474,"byte_end":48483,"line_start":1052,"line_end":1052,"column_start":12,"column_end":21},"name":"into_item","qualname":"<ClassSetUnion>::into_item","value":"fn (mut self) -> ClassSetItem","parent":null,"children":[],"decl_id":null,"docs":" Return this union as a character class set item.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2281},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":48796,"byte_end":48812,"line_start":1063,"line_end":1063,"column_start":12,"column_end":28},"name":"ClassSetBinaryOp","qualname":"::ast::ClassSetBinaryOp","value":"ClassSetBinaryOp { span, kind, lhs, rhs }","parent":null,"children":[{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285}],"decl_id":null,"docs":" A Unicode character class set operation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2282},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":48899,"byte_end":48903,"line_start":1065,"line_end":1065,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetBinaryOp::span","value":"ast::Span","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2283},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":48959,"byte_end":48963,"line_start":1067,"line_end":1067,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassSetBinaryOp::kind","value":"ast::ClassSetBinaryOpKind","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" The type of this set operation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2284},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":49040,"byte_end":49043,"line_start":1069,"line_end":1069,"column_start":9,"column_end":12},"name":"lhs","qualname":"::ast::ClassSetBinaryOp::lhs","value":"std::boxed::Box<ast::ClassSet>","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" The left hand side of the operation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2285},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":49114,"byte_end":49117,"line_start":1071,"line_end":1071,"column_start":9,"column_end":12},"name":"rhs","qualname":"::ast::ClassSetBinaryOp::rhs","value":"std::boxed::Box<ast::ClassSet>","parent":{"krate":0,"index":2281},"children":[],"decl_id":null,"docs":" The right hand side of the operation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2298},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":49517,"byte_end":49529,"line_start":1082,"line_end":1082,"column_start":5,"column_end":17},"name":"Intersection","qualname":"::ast::ClassSetBinaryOpKind::Intersection","value":"ClassSetBinaryOpKind::Intersection","parent":{"krate":0,"index":2297},"children":[],"decl_id":null,"docs":" The intersection of two sets, e.g., `\\pN&&[a-z]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2300},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":49591,"byte_end":49601,"line_start":1084,"line_end":1084,"column_start":5,"column_end":15},"name":"Difference","qualname":"::ast::ClassSetBinaryOpKind::Difference","value":"ClassSetBinaryOpKind::Difference","parent":{"krate":0,"index":2297},"children":[],"decl_id":null,"docs":" The difference of two sets, e.g., `\\pN--[0-9]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2302},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":49779,"byte_end":49798,"line_start":1088,"line_end":1088,"column_start":5,"column_end":24},"name":"SymmetricDifference","qualname":"::ast::ClassSetBinaryOpKind::SymmetricDifference","value":"ClassSetBinaryOpKind::SymmetricDifference","parent":{"krate":0,"index":2297},"children":[],"decl_id":null,"docs":" The symmetric difference of two sets. The symmetric difference is the\n set of elements belonging to one but not both sets.\n e.g., `[\\pL~~[:ascii:]]`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2297},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":49432,"byte_end":49452,"line_start":1080,"line_end":1080,"column_start":10,"column_end":30},"name":"ClassSetBinaryOpKind","qualname":"::ast::ClassSetBinaryOpKind","value":"ClassSetBinaryOpKind::{Intersection, Difference, SymmetricDifference}","parent":null,"children":[{"krate":0,"index":2298},{"krate":0,"index":2300},{"krate":0,"index":2302}],"decl_id":null,"docs":" The type of a Unicode character class set operation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2315},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":49888,"byte_end":49897,"line_start":1093,"line_end":1093,"column_start":12,"column_end":21},"name":"Assertion","qualname":"::ast::Assertion","value":"Assertion { span, kind }","parent":null,"children":[{"krate":0,"index":2316},{"krate":0,"index":2317}],"decl_id":null,"docs":" A single zero-width assertion.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2316},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":49944,"byte_end":49948,"line_start":1095,"line_end":1095,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Assertion::span","value":"ast::Span","parent":{"krate":0,"index":2315},"children":[],"decl_id":null,"docs":" The span of this assertion.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2317},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50011,"byte_end":50015,"line_start":1097,"line_end":1097,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Assertion::kind","value":"ast::AssertionKind","parent":{"krate":0,"index":2315},"children":[],"decl_id":null,"docs":" The assertion kind, e.g., `\\b` or `^`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2330},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50138,"byte_end":50147,"line_start":1104,"line_end":1104,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::ast::AssertionKind::StartLine","value":"AssertionKind::StartLine","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" `^`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2332},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50165,"byte_end":50172,"line_start":1106,"line_end":1106,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::ast::AssertionKind::EndLine","value":"AssertionKind::EndLine","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" `$`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2334},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50191,"byte_end":50200,"line_start":1108,"line_end":1108,"column_start":5,"column_end":14},"name":"StartText","qualname":"::ast::AssertionKind::StartText","value":"AssertionKind::StartText","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" `\\A`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2336},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50219,"byte_end":50226,"line_start":1110,"line_end":1110,"column_start":5,"column_end":12},"name":"EndText","qualname":"::ast::AssertionKind::EndText","value":"AssertionKind::EndText","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" `\\z`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2338},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50245,"byte_end":50257,"line_start":1112,"line_end":1112,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::ast::AssertionKind::WordBoundary","value":"AssertionKind::WordBoundary","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" `\\b`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2340},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50276,"byte_end":50291,"line_start":1114,"line_end":1114,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::ast::AssertionKind::NotWordBoundary","value":"AssertionKind::NotWordBoundary","parent":{"krate":0,"index":2329},"children":[],"decl_id":null,"docs":" `\\B`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2329},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50106,"byte_end":50119,"line_start":1102,"line_end":1102,"column_start":10,"column_end":23},"name":"AssertionKind","qualname":"::ast::AssertionKind","value":"AssertionKind::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary}","parent":null,"children":[{"krate":0,"index":2330},{"krate":0,"index":2332},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2338},{"krate":0,"index":2340}],"decl_id":null,"docs":" An assertion kind.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2352},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50406,"byte_end":50416,"line_start":1119,"line_end":1119,"column_start":12,"column_end":22},"name":"Repetition","qualname":"::ast::Repetition","value":"Repetition { span, op, greedy, ast }","parent":null,"children":[{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2356}],"decl_id":null,"docs":" A repetition operation applied to a regular expression.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2353},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50463,"byte_end":50467,"line_start":1121,"line_end":1121,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Repetition::span","value":"ast::Span","parent":{"krate":0,"index":2352},"children":[],"decl_id":null,"docs":" The span of this operation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2354},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50513,"byte_end":50515,"line_start":1123,"line_end":1123,"column_start":9,"column_end":11},"name":"op","qualname":"::ast::Repetition::op","value":"ast::RepetitionOp","parent":{"krate":0,"index":2352},"children":[],"decl_id":null,"docs":" The actual operation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2355},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50599,"byte_end":50605,"line_start":1125,"line_end":1125,"column_start":9,"column_end":15},"name":"greedy","qualname":"::ast::Repetition::greedy","value":"bool","parent":{"krate":0,"index":2352},"children":[],"decl_id":null,"docs":" Whether this operation was applied greedily or not.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2356},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50670,"byte_end":50673,"line_start":1127,"line_end":1127,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::Repetition::ast","value":"std::boxed::Box<ast::Ast>","parent":{"krate":0,"index":2352},"children":[],"decl_id":null,"docs":" The regular expression under repetition.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2368},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50774,"byte_end":50786,"line_start":1132,"line_end":1132,"column_start":12,"column_end":24},"name":"RepetitionOp","qualname":"::ast::RepetitionOp","value":"RepetitionOp { span, kind }","parent":null,"children":[{"krate":0,"index":2369},{"krate":0,"index":2370}],"decl_id":null,"docs":" The repetition operator itself.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2369},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50889,"byte_end":50893,"line_start":1135,"line_end":1135,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::RepetitionOp::span","value":"ast::Span","parent":{"krate":0,"index":2368},"children":[],"decl_id":null,"docs":" The span of this operator. This includes things like `+`, `*?` and\n `{m,n}`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2370},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":50940,"byte_end":50944,"line_start":1137,"line_end":1137,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::RepetitionOp::kind","value":"ast::RepetitionKind","parent":{"krate":0,"index":2368},"children":[],"decl_id":null,"docs":" The type of operation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2383},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51085,"byte_end":51094,"line_start":1144,"line_end":1144,"column_start":5,"column_end":14},"name":"ZeroOrOne","qualname":"::ast::RepetitionKind::ZeroOrOne","value":"RepetitionKind::ZeroOrOne","parent":{"krate":0,"index":2382},"children":[],"decl_id":null,"docs":" `?`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2385},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51112,"byte_end":51122,"line_start":1146,"line_end":1146,"column_start":5,"column_end":15},"name":"ZeroOrMore","qualname":"::ast::RepetitionKind::ZeroOrMore","value":"RepetitionKind::ZeroOrMore","parent":{"krate":0,"index":2382},"children":[],"decl_id":null,"docs":" `*`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2387},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51140,"byte_end":51149,"line_start":1148,"line_end":1148,"column_start":5,"column_end":14},"name":"OneOrMore","qualname":"::ast::RepetitionKind::OneOrMore","value":"RepetitionKind::OneOrMore","parent":{"krate":0,"index":2382},"children":[],"decl_id":null,"docs":" `+`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2389},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51171,"byte_end":51176,"line_start":1150,"line_end":1150,"column_start":5,"column_end":10},"name":"Range","qualname":"::ast::RepetitionKind::Range","value":"RepetitionKind::Range(RepetitionRange)","parent":{"krate":0,"index":2382},"children":[],"decl_id":null,"docs":" `{m,n}`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2382},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51052,"byte_end":51066,"line_start":1142,"line_end":1142,"column_start":10,"column_end":24},"name":"RepetitionKind","qualname":"::ast::RepetitionKind","value":"RepetitionKind::{ZeroOrOne, ZeroOrMore, OneOrMore, Range}","parent":null,"children":[{"krate":0,"index":2383},{"krate":0,"index":2385},{"krate":0,"index":2387},{"krate":0,"index":2389}],"decl_id":null,"docs":" The kind of a repetition operator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2404},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51315,"byte_end":51322,"line_start":1157,"line_end":1157,"column_start":5,"column_end":12},"name":"Exactly","qualname":"::ast::RepetitionRange::Exactly","value":"RepetitionRange::Exactly(u32)","parent":{"krate":0,"index":2403},"children":[],"decl_id":null,"docs":" `{m}`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2407},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51348,"byte_end":51355,"line_start":1159,"line_end":1159,"column_start":5,"column_end":12},"name":"AtLeast","qualname":"::ast::RepetitionRange::AtLeast","value":"RepetitionRange::AtLeast(u32)","parent":{"krate":0,"index":2403},"children":[],"decl_id":null,"docs":" `{m,}`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2410},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51382,"byte_end":51389,"line_start":1161,"line_end":1161,"column_start":5,"column_end":12},"name":"Bounded","qualname":"::ast::RepetitionRange::Bounded","value":"RepetitionRange::Bounded(u32, u32)","parent":{"krate":0,"index":2403},"children":[],"decl_id":null,"docs":" `{m,n}`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2403},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51279,"byte_end":51294,"line_start":1155,"line_end":1155,"column_start":10,"column_end":25},"name":"RepetitionRange","qualname":"::ast::RepetitionRange","value":"RepetitionRange::{Exactly, AtLeast, Bounded}","parent":null,"children":[{"krate":0,"index":2404},{"krate":0,"index":2407},{"krate":0,"index":2410}],"decl_id":null,"docs":" A range repetition operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51639,"byte_end":51647,"line_start":1169,"line_end":1169,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<RepetitionRange>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this repetition range is valid.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2425},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":52117,"byte_end":52122,"line_start":1184,"line_end":1184,"column_start":12,"column_end":17},"name":"Group","qualname":"::ast::Group","value":"Group { span, kind, ast }","parent":null,"children":[{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2428}],"decl_id":null,"docs":" A grouped regular expression.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2426},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":52165,"byte_end":52169,"line_start":1186,"line_end":1186,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Group::span","value":"ast::Span","parent":{"krate":0,"index":2425},"children":[],"decl_id":null,"docs":" The span of this group.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2427},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":52217,"byte_end":52221,"line_start":1188,"line_end":1188,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Group::kind","value":"ast::GroupKind","parent":{"krate":0,"index":2425},"children":[],"decl_id":null,"docs":" The kind of this group.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2428},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":52288,"byte_end":52291,"line_start":1190,"line_end":1190,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::Group::ast","value":"std::boxed::Box<ast::Ast>","parent":{"krate":0,"index":2425},"children":[],"decl_id":null,"docs":" The regular expression in this group.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":52462,"byte_end":52467,"line_start":1196,"line_end":1196,"column_start":12,"column_end":17},"name":"flags","qualname":"<Group>::flags","value":"fn (&self) -> Option<&Flags>","parent":null,"children":[],"decl_id":null,"docs":" If this group is non-capturing, then this returns the (possibly empty)\n set of flags. Otherwise, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":52696,"byte_end":52708,"line_start":1204,"line_end":1204,"column_start":12,"column_end":24},"name":"is_capturing","qualname":"<Group>::is_capturing","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this group is capturing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":53070,"byte_end":53083,"line_start":1214,"line_end":1214,"column_start":12,"column_end":25},"name":"capture_index","qualname":"<Group>::capture_index","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture index of this group, if this is a capturing group.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2441},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":53415,"byte_end":53427,"line_start":1227,"line_end":1227,"column_start":5,"column_end":17},"name":"CaptureIndex","qualname":"::ast::GroupKind::CaptureIndex","value":"GroupKind::CaptureIndex(u32)","parent":{"krate":0,"index":2440},"children":[],"decl_id":null,"docs":" `(a)`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2444},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":53460,"byte_end":53471,"line_start":1229,"line_end":1229,"column_start":5,"column_end":16},"name":"CaptureName","qualname":"::ast::GroupKind::CaptureName","value":"GroupKind::CaptureName(CaptureName)","parent":{"krate":0,"index":2440},"children":[],"decl_id":null,"docs":" `(?P<name>a)`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2447},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":53519,"byte_end":53531,"line_start":1231,"line_end":1231,"column_start":5,"column_end":17},"name":"NonCapturing","qualname":"::ast::GroupKind::NonCapturing","value":"GroupKind::NonCapturing(Flags)","parent":{"krate":0,"index":2440},"children":[],"decl_id":null,"docs":" `(?:a)` and `(?i:a)`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2440},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":53385,"byte_end":53394,"line_start":1225,"line_end":1225,"column_start":10,"column_end":19},"name":"GroupKind","qualname":"::ast::GroupKind","value":"GroupKind::{CaptureIndex, CaptureName, NonCapturing}","parent":null,"children":[{"krate":0,"index":2441},{"krate":0,"index":2444},{"krate":0,"index":2447}],"decl_id":null,"docs":" The kind of a group.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2461},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":53715,"byte_end":53726,"line_start":1239,"line_end":1239,"column_start":12,"column_end":23},"name":"CaptureName","qualname":"::ast::CaptureName","value":"CaptureName { span, name, index }","parent":null,"children":[{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464}],"decl_id":null,"docs":" A capture name.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2462},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":53776,"byte_end":53780,"line_start":1241,"line_end":1241,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::CaptureName::span","value":"ast::Span","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" The span of this capture name.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2463},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":53822,"byte_end":53826,"line_start":1243,"line_end":1243,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::CaptureName::name","value":"std::string::String","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" The capture name.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2464},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":53871,"byte_end":53876,"line_start":1245,"line_end":1245,"column_start":9,"column_end":14},"name":"index","qualname":"::ast::CaptureName::index","value":"u32","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" The capture index.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2476},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":54013,"byte_end":54021,"line_start":1250,"line_end":1250,"column_start":12,"column_end":20},"name":"SetFlags","qualname":"::ast::SetFlags","value":"SetFlags { span, flags }","parent":null,"children":[{"krate":0,"index":2477},{"krate":0,"index":2478}],"decl_id":null,"docs":" A group of flags that is not applied to a particular regular expression.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2477},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":54101,"byte_end":54105,"line_start":1252,"line_end":1252,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::SetFlags::span","value":"ast::Span","parent":{"krate":0,"index":2476},"children":[],"decl_id":null,"docs":" The span of these flags, including the grouping parentheses.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2478},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":54159,"byte_end":54164,"line_start":1254,"line_end":1254,"column_start":9,"column_end":14},"name":"flags","qualname":"::ast::SetFlags::flags","value":"ast::Flags","parent":{"krate":0,"index":2476},"children":[],"decl_id":null,"docs":" The actual sequence of flags.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2490},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":54329,"byte_end":54334,"line_start":1261,"line_end":1261,"column_start":12,"column_end":17},"name":"Flags","qualname":"::ast::Flags","value":"Flags { span, items }","parent":null,"children":[{"krate":0,"index":2491},{"krate":0,"index":2492}],"decl_id":null,"docs":" A group of flags.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2491},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":54386,"byte_end":54390,"line_start":1263,"line_end":1263,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Flags::span","value":"ast::Span","parent":{"krate":0,"index":2490},"children":[],"decl_id":null,"docs":" The span of this group of flags.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2492},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":54499,"byte_end":54504,"line_start":1266,"line_end":1266,"column_start":9,"column_end":14},"name":"items","qualname":"::ast::Flags::items","value":"std::vec::Vec<ast::FlagsItem>","parent":{"krate":0,"index":2490},"children":[],"decl_id":null,"docs":" A sequence of flag items. Each item is either a flag or a negation\n operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":54794,"byte_end":54802,"line_start":1275,"line_end":1275,"column_start":12,"column_end":20},"name":"add_item","qualname":"<Flags>::add_item","value":"fn (&mut self, item: FlagsItem) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Add the given item to this sequence of flags.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":55374,"byte_end":55384,"line_start":1294,"line_end":1294,"column_start":12,"column_end":22},"name":"flag_state","qualname":"<Flags>::flag_state","value":"fn (&self, flag: Flag) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the state of the given flag in this set.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2504},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":55902,"byte_end":55911,"line_start":1313,"line_end":1313,"column_start":12,"column_end":21},"name":"FlagsItem","qualname":"::ast::FlagsItem","value":"FlagsItem { span, kind }","parent":null,"children":[{"krate":0,"index":2505},{"krate":0,"index":2506}],"decl_id":null,"docs":" A single item in a group of flags.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2505},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":55953,"byte_end":55957,"line_start":1315,"line_end":1315,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::FlagsItem::span","value":"ast::Span","parent":{"krate":0,"index":2504},"children":[],"decl_id":null,"docs":" The span of this item.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2506},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56004,"byte_end":56008,"line_start":1317,"line_end":1317,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::FlagsItem::kind","value":"ast::FlagsItemKind","parent":{"krate":0,"index":2504},"children":[],"decl_id":null,"docs":" The kind of this item.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2519},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56233,"byte_end":56241,"line_start":1325,"line_end":1325,"column_start":5,"column_end":13},"name":"Negation","qualname":"::ast::FlagsItemKind::Negation","value":"FlagsItemKind::Negation","parent":{"krate":0,"index":2518},"children":[],"decl_id":null,"docs":" A negation operator applied to all subsequent flags in the enclosing\n group.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2521},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56281,"byte_end":56285,"line_start":1327,"line_end":1327,"column_start":5,"column_end":9},"name":"Flag","qualname":"::ast::FlagsItemKind::Flag","value":"FlagsItemKind::Flag(Flag)","parent":{"krate":0,"index":2518},"children":[],"decl_id":null,"docs":" A single flag in a group.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2518},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56121,"byte_end":56134,"line_start":1322,"line_end":1322,"column_start":10,"column_end":23},"name":"FlagsItemKind","qualname":"::ast::FlagsItemKind","value":"FlagsItemKind::{Negation, Flag}","parent":null,"children":[{"krate":0,"index":2519},{"krate":0,"index":2521}],"decl_id":null,"docs":" The kind of an item in a group of flags.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56398,"byte_end":56409,"line_start":1332,"line_end":1332,"column_start":12,"column_end":23},"name":"is_negation","qualname":"<FlagsItemKind>::is_negation","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this item is a negation operator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2536},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56633,"byte_end":56648,"line_start":1344,"line_end":1344,"column_start":5,"column_end":20},"name":"CaseInsensitive","qualname":"::ast::Flag::CaseInsensitive","value":"Flag::CaseInsensitive","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" `i`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2538},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56666,"byte_end":56675,"line_start":1346,"line_end":1346,"column_start":5,"column_end":14},"name":"MultiLine","qualname":"::ast::Flag::MultiLine","value":"Flag::MultiLine","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" `m`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2540},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56693,"byte_end":56710,"line_start":1348,"line_end":1348,"column_start":5,"column_end":22},"name":"DotMatchesNewLine","qualname":"::ast::Flag::DotMatchesNewLine","value":"Flag::DotMatchesNewLine","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" `s`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2542},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56728,"byte_end":56737,"line_start":1350,"line_end":1350,"column_start":5,"column_end":14},"name":"SwapGreed","qualname":"::ast::Flag::SwapGreed","value":"Flag::SwapGreed","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" `U`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2544},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56755,"byte_end":56762,"line_start":1352,"line_end":1352,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::Flag::Unicode","value":"Flag::Unicode","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" `u`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2546},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56780,"byte_end":56796,"line_start":1354,"line_end":1354,"column_start":5,"column_end":21},"name":"IgnoreWhitespace","qualname":"::ast::Flag::IgnoreWhitespace","value":"Flag::IgnoreWhitespace","parent":{"krate":0,"index":2535},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2535},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56610,"byte_end":56614,"line_start":1342,"line_end":1342,"column_start":10,"column_end":14},"name":"Flag","qualname":"::ast::Flag","value":"Flag::{CaseInsensitive, MultiLine, DotMatchesNewLine, SwapGreed, Unicode, IgnoreWhitespace}","parent":null,"children":[{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2540},{"krate":0,"index":2542},{"krate":0,"index":2544},{"krate":0,"index":2546}],"decl_id":null,"docs":" A single flag.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":409},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":303350,"byte_end":303356,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for dealing with errors returned by this crate.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2592},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":303628,"byte_end":303633,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Parse","qualname":"::error::Error::Parse","value":"Error::Parse(ast::Error)","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" An error that occurred while translating concrete syntax into abstract\n syntax (AST).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2595},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":303777,"byte_end":303786,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"name":"Translate","qualname":"::error::Error::Translate","value":"Error::Translate(hir::Error)","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" An error that occurred while translating abstract syntax into a high\n level intermediate representation (HIR).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2598},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":304078,"byte_end":304093,"line_start":27,"line_end":27,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2591},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":303515,"byte_end":303520,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Parse, Translate, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":2592},{"krate":0,"index":2595},{"krate":0,"index":2598}],"decl_id":null,"docs":" This error type encompasses any error that can be returned by this crate.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":446},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hir","qualname":"::hir","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":523},{"krate":0,"index":626},{"krate":0,"index":660},{"krate":0,"index":761},{"krate":0,"index":2754},{"krate":0,"index":2767},{"krate":0,"index":2765},{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2758},{"krate":0,"index":2759},{"krate":0,"index":803},{"krate":0,"index":2769},{"krate":0,"index":2794},{"krate":0,"index":2792},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":2796},{"krate":0,"index":2808},{"krate":0,"index":2806},{"krate":0,"index":2803},{"krate":0,"index":2804},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2810},{"krate":0,"index":2846},{"krate":0,"index":2844},{"krate":0,"index":2841},{"krate":0,"index":2842},{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":816},{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":2848},{"krate":0,"index":2864},{"krate":0,"index":2862},{"krate":0,"index":2859},{"krate":0,"index":2860},{"krate":0,"index":2855},{"krate":0,"index":2856},{"krate":0,"index":856},{"krate":0,"index":2866},{"krate":0,"index":2882},{"krate":0,"index":2880},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":858},{"krate":0,"index":2884},{"krate":0,"index":2895},{"krate":0,"index":2893},{"krate":0,"index":2890},{"krate":0,"index":2891},{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":862},{"krate":0,"index":2897},{"krate":0,"index":2901},{"krate":0,"index":876},{"krate":0,"index":2904},{"krate":0,"index":2929},{"krate":0,"index":2928},{"krate":0,"index":2926},{"krate":0,"index":2923},{"krate":0,"index":2924},{"krate":0,"index":2919},{"krate":0,"index":2920},{"krate":0,"index":2909},{"krate":0,"index":2907},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":890},{"krate":0,"index":2931},{"krate":0,"index":2942},{"krate":0,"index":2940},{"krate":0,"index":2937},{"krate":0,"index":2938},{"krate":0,"index":2933},{"krate":0,"index":2934},{"krate":0,"index":894},{"krate":0,"index":2944},{"krate":0,"index":2948},{"krate":0,"index":909},{"krate":0,"index":2951},{"krate":0,"index":2976},{"krate":0,"index":2975},{"krate":0,"index":2973},{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2956},{"krate":0,"index":2954},{"krate":0,"index":913},{"krate":0,"index":920},{"krate":0,"index":924},{"krate":0,"index":2978},{"krate":0,"index":2995},{"krate":0,"index":2993},{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2987},{"krate":0,"index":2988},{"krate":0,"index":2997},{"krate":0,"index":3014},{"krate":0,"index":3012},{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":926},{"krate":0,"index":3016},{"krate":0,"index":3028},{"krate":0,"index":3026},{"krate":0,"index":3023},{"krate":0,"index":3024},{"krate":0,"index":3019},{"krate":0,"index":3020},{"krate":0,"index":3030},{"krate":0,"index":3048},{"krate":0,"index":3046},{"krate":0,"index":3043},{"krate":0,"index":3044},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3050},{"krate":0,"index":3063},{"krate":0,"index":3061},{"krate":0,"index":3058},{"krate":0,"index":3059},{"krate":0,"index":3054},{"krate":0,"index":3055},{"krate":0,"index":928},{"krate":0,"index":3065},{"krate":0,"index":3084},{"krate":0,"index":3082},{"krate":0,"index":3079},{"krate":0,"index":3080},{"krate":0,"index":3075},{"krate":0,"index":3076},{"krate":0,"index":3086},{"krate":0,"index":3106},{"krate":0,"index":3104},{"krate":0,"index":3101},{"krate":0,"index":3102},{"krate":0,"index":3097},{"krate":0,"index":3098},{"krate":0,"index":930},{"krate":0,"index":3108},{"krate":0,"index":3119},{"krate":0,"index":3117},{"krate":0,"index":3114},{"krate":0,"index":3115},{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":933},{"krate":0,"index":934}],"decl_id":null,"docs":"Defines a high-level intermediate representation for regular expressions.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":491},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409728,"byte_end":409733,"line_start":338,"line_end":338,"column_start":10,"column_end":15},"name":"Bound","qualname":"::hir::interval::Interval::Bound","value":"type Bound: Bound;","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":523},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"literal","qualname":"::hir::literal","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":2651},{"krate":0,"index":2662},{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2655},{"krate":0,"index":2656},{"krate":0,"index":2664},{"krate":0,"index":2672},{"krate":0,"index":2669},{"krate":0,"index":2670},{"krate":0,"index":2667},{"krate":0,"index":533},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624}],"decl_id":null,"docs":"Provides routines for extracting literal prefixes and suffixes from an `Hir`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2651},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":416915,"byte_end":416923,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"Literals","qualname":"::hir::literal::Literals","value":"Literals {  }","parent":null,"children":[{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654}],"decl_id":null,"docs":" A set of literal byte strings extracted from a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2664},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":417237,"byte_end":417244,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"Literal","qualname":"::hir::literal::Literal","value":"Literal {  }","parent":null,"children":[{"krate":0,"index":2665},{"krate":0,"index":2666}],"decl_id":null,"docs":" A single member of a set of literals extracted from a regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":417374,"byte_end":417379,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"empty","qualname":"<Literals>::empty","value":"fn () -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty set of literals using default limits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":417556,"byte_end":417564,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<Literals>::prefixes","value":"fn (expr: &Hir) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of literal prefixes extracted from the given `Hir`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":417773,"byte_end":417781,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<Literals>::suffixes","value":"fn (expr: &Hir) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of literal suffixes extracted from the given `Hir`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":417979,"byte_end":417989,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"limit_size","qualname":"<Literals>::limit_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the approximate size limit (in bytes) of this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":418374,"byte_end":418388,"line_start":83,"line_end":83,"column_start":12,"column_end":26},"name":"set_limit_size","qualname":"<Literals>::set_limit_size","value":"fn (&mut self, size: usize) -> &mut Literals","parent":null,"children":[],"decl_id":null,"docs":" Set the approximate size limit (in bytes) of this set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":418552,"byte_end":418563,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"limit_class","qualname":"<Literals>::limit_class","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the character class size limit for this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":419117,"byte_end":419132,"line_start":103,"line_end":103,"column_start":12,"column_end":27},"name":"set_limit_class","qualname":"<Literals>::set_limit_class","value":"fn (&mut self, size: usize) -> &mut Literals","parent":null,"children":[],"decl_id":null,"docs":" Limits the size of character(or byte) classes considered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":419314,"byte_end":419322,"line_start":109,"line_end":109,"column_start":12,"column_end":20},"name":"literals","qualname":"<Literals>::literals","value":"fn (&self) -> &[Literal]","parent":null,"children":[],"decl_id":null,"docs":" Returns the set of literals as a slice. Its order is unspecified.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":419501,"byte_end":419508,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"name":"min_len","qualname":"<Literals>::min_len","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the smallest literal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":419873,"byte_end":419885,"line_start":129,"line_end":129,"column_start":12,"column_end":24},"name":"all_complete","qualname":"<Literals>::all_complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members in this set are complete.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":420052,"byte_end":420064,"line_start":134,"line_end":134,"column_start":12,"column_end":24},"name":"any_complete","qualname":"<Literals>::any_complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any member in this set is complete.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":420210,"byte_end":420224,"line_start":139,"line_end":139,"column_start":12,"column_end":26},"name":"contains_empty","qualname":"<Literals>::contains_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this set contains an empty literal.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":420388,"byte_end":420396,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Literals>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this set is empty or if all of its members is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":420576,"byte_end":420584,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"to_empty","qualname":"<Literals>::to_empty","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty set of literals using this set's limits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":420829,"byte_end":420850,"line_start":156,"line_end":156,"column_start":12,"column_end":33},"name":"longest_common_prefix","qualname":"<Literals>::longest_common_prefix","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest common prefix of all members in this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":421304,"byte_end":421325,"line_start":172,"line_end":172,"column_start":12,"column_end":33},"name":"longest_common_suffix","qualname":"<Literals>::longest_common_suffix","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest common suffix of all members in this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":422158,"byte_end":422169,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"trim_suffix","qualname":"<Literals>::trim_suffix","value":"fn (&self, num_bytes: usize) -> Option<Literals>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of literals with the given number of bytes trimmed\n from the suffix of each literal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":423066,"byte_end":423086,"line_start":224,"line_end":224,"column_start":12,"column_end":32},"name":"unambiguous_prefixes","qualname":"<Literals>::unambiguous_prefixes","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of prefixes of this set of literals that are\n guaranteed to be unambiguous.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":425655,"byte_end":425675,"line_start":291,"line_end":291,"column_start":12,"column_end":32},"name":"unambiguous_suffixes","qualname":"<Literals>::unambiguous_suffixes","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of suffixes of this set of literals that are\n guaranteed to be unambiguous.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":426366,"byte_end":426380,"line_start":309,"line_end":309,"column_start":12,"column_end":26},"name":"union_prefixes","qualname":"<Literals>::union_prefixes","value":"fn (&mut self, expr: &Hir) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions the prefixes from the given expression to this set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":427037,"byte_end":427051,"line_start":324,"line_end":324,"column_start":12,"column_end":26},"name":"union_suffixes","qualname":"<Literals>::union_suffixes","value":"fn (&mut self, expr: &Hir) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions the suffixes from the given expression to this set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":427501,"byte_end":427506,"line_start":336,"line_end":336,"column_start":12,"column_end":17},"name":"union","qualname":"<Literals>::union","value":"fn (&mut self, lits: Literals) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions this set with another set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":428142,"byte_end":428155,"line_start":355,"line_end":355,"column_start":12,"column_end":25},"name":"cross_product","qualname":"<Literals>::cross_product","value":"fn (&mut self, lits: &Literals) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends this set with another set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":429889,"byte_end":429898,"line_start":404,"line_end":404,"column_start":12,"column_end":21},"name":"cross_add","qualname":"<Literals>::cross_add","value":"fn (&mut self, bytes: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the bytes given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":431153,"byte_end":431156,"line_start":442,"line_end":442,"column_start":12,"column_end":15},"name":"add","qualname":"<Literals>::add","value":"fn (&mut self, lit: Literal) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds the given literal to this set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":431494,"byte_end":431508,"line_start":453,"line_end":453,"column_start":12,"column_end":26},"name":"add_char_class","qualname":"<Literals>::add_char_class","value":"fn (&mut self, cls: &hir::ClassUnicode) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the character class given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":432936,"byte_end":432950,"line_start":498,"line_end":498,"column_start":12,"column_end":26},"name":"add_byte_class","qualname":"<Literals>::add_byte_class","value":"fn (&mut self, cls: &hir::ClassBytes) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the byte class given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":433646,"byte_end":433649,"line_start":520,"line_end":520,"column_start":12,"column_end":15},"name":"cut","qualname":"<Literals>::cut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cuts every member of this set. When a member is cut, it can never\n be extended.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":433789,"byte_end":433796,"line_start":527,"line_end":527,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Literals>::reverse","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reverses all members in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":433941,"byte_end":433946,"line_start":534,"line_end":534,"column_start":12,"column_end":17},"name":"clear","qualname":"<Literals>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears this set of all members.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444343,"byte_end":444346,"line_start":852,"line_end":852,"column_start":12,"column_end":15},"name":"new","qualname":"<Literal>::new","value":"fn (bytes: Vec<u8>) -> Literal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new complete literal with the bytes given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444481,"byte_end":444486,"line_start":857,"line_end":857,"column_start":12,"column_end":17},"name":"empty","qualname":"<Literal>::empty","value":"fn () -> Literal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new complete empty literal.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444610,"byte_end":444616,"line_start":862,"line_end":862,"column_start":12,"column_end":18},"name":"is_cut","qualname":"<Literal>::is_cut","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this literal was \"cut.\"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444696,"byte_end":444699,"line_start":867,"line_end":867,"column_start":12,"column_end":15},"name":"cut","qualname":"<Literal>::cut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cuts this literal.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":626},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print","qualname":"::hir::print","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":635},{"krate":0,"index":2674},{"krate":0,"index":2678},{"krate":0,"index":2676},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":641},{"krate":0,"index":2684},{"krate":0,"index":2689},{"krate":0,"index":645},{"krate":0,"index":654}],"decl_id":null,"docs":"This module provides a regular expression printer for `Hir`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2680},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":472962,"byte_end":472969,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"Printer","qualname":"::hir::print::Printer","value":"Printer {  }","parent":null,"children":[{"krate":0,"index":2681}],"decl_id":null,"docs":" A printer for a regular expression's high-level intermediate\n representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":473046,"byte_end":473049,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<Printer>::new","value":"fn () -> Printer","parent":null,"children":[],"decl_id":null,"docs":" Create a new printer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":473396,"byte_end":473401,"line_start":67,"line_end":67,"column_start":12,"column_end":17},"name":"print","qualname":"<Printer>::print","value":"fn <W> (&mut self, hir: &Hir, wtr: W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Print the given `Ast` to the given writer. The writer must implement\n `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n here are a `fmt::Formatter` (which is available in `fmt::Display`\n implementations) or a `&mut String`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":660},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"translate","qualname":"::hir::translate","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":670},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":2693},{"krate":0,"index":2698},{"krate":0,"index":2696},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":2700},{"krate":0,"index":2706},{"krate":0,"index":2704},{"krate":0,"index":691},{"krate":0,"index":2708},{"krate":0,"index":2726},{"krate":0,"index":2724},{"krate":0,"index":694},{"krate":0,"index":699},{"krate":0,"index":2728},{"krate":0,"index":2737},{"krate":0,"index":2733},{"krate":0,"index":717},{"krate":0,"index":2741},{"krate":0,"index":2752},{"krate":0,"index":2751},{"krate":0,"index":2749},{"krate":0,"index":2747},{"krate":0,"index":749},{"krate":0,"index":757},{"krate":0,"index":759}],"decl_id":null,"docs":"Defines a translator that converts an `Ast` to an `Hir`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2693},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":483445,"byte_end":483462,"line_start":16,"line_end":16,"column_start":12,"column_end":29},"name":"TranslatorBuilder","qualname":"::hir::translate::TranslatorBuilder","value":"TranslatorBuilder {  }","parent":null,"children":[{"krate":0,"index":2694},{"krate":0,"index":2695}],"decl_id":null,"docs":" A builder for constructing an AST->HIR translator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":483742,"byte_end":483745,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<TranslatorBuilder>::new","value":"fn () -> TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new translator builder with a default c onfiguration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":483963,"byte_end":483968,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"build","qualname":"<TranslatorBuilder>::build","value":"fn (&self) -> Translator","parent":null,"children":[],"decl_id":null,"docs":" Build a translator using the current configuration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":484831,"byte_end":484849,"line_start":56,"line_end":56,"column_start":12,"column_end":30},"name":"allow_invalid_utf8","qualname":"<TranslatorBuilder>::allow_invalid_utf8","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" When enabled, translation will permit the construction of a regular\n expression that may match invalid UTF-8.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":485040,"byte_end":485056,"line_start":62,"line_end":62,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<TranslatorBuilder>::case_insensitive","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the case insensitive flag (`i`) by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":485286,"byte_end":485296,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"multi_line","qualname":"<TranslatorBuilder>::multi_line","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the multi-line matching flag (`m`) by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":485536,"byte_end":485556,"line_start":75,"line_end":75,"column_start":12,"column_end":32},"name":"dot_matches_new_line","qualname":"<TranslatorBuilder>::dot_matches_new_line","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"dot matches any character\" flag (`s`) by\n default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":485806,"byte_end":485816,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"swap_greed","qualname":"<TranslatorBuilder>::swap_greed","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"swap greed\" flag (`U`) by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":486028,"byte_end":486035,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"unicode","qualname":"<TranslatorBuilder>::unicode","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the Unicode flag (`u`) by default.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2700},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":486533,"byte_end":486543,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"Translator","qualname":"::hir::translate::Translator","value":"Translator {  }","parent":null,"children":[{"krate":0,"index":2701},{"krate":0,"index":2702},{"krate":0,"index":2703}],"decl_id":null,"docs":" A translator maps abstract syntax to a high level intermediate\n representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":486885,"byte_end":486888,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<Translator>::new","value":"fn () -> Translator","parent":null,"children":[],"decl_id":null,"docs":" Create a new translator using the default configuration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":487415,"byte_end":487424,"line_start":129,"line_end":129,"column_start":12,"column_end":21},"name":"translate","qualname":"<Translator>::translate","value":"fn (&mut self, pattern: &str, ast: &Ast) -> Result<Hir>","parent":null,"children":[],"decl_id":null,"docs":" Translate the given abstract syntax tree (AST) into a high level\n intermediate representation (HIR).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":766},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":591101,"byte_end":591108,"line_start":13,"line_end":13,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::hir::visitor::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773}],"decl_id":null,"docs":" A trait for visiting the high-level IR (HIR) in depth first order.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":767},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":591159,"byte_end":591165,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::hir::visitor::Visitor::Output","value":"type Output;","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" The result of visiting an HIR.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":768},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":591228,"byte_end":591231,"line_start":17,"line_end":17,"column_start":10,"column_end":13},"name":"Err","qualname":"::hir::visitor::Visitor::Err","value":"type Err;","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" An error that visiting an HIR might return.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":591376,"byte_end":591382,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"finish","qualname":"::hir::visitor::Visitor::finish","value":"fn (self) -> Result<Self::Output, Self::Err>","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" All implementors of `Visitor` must provide a `finish` method, which\n yields the result of visiting the HIR or an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":591502,"byte_end":591507,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"start","qualname":"::hir::visitor::Visitor::start","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" This method is called before beginning traversal of the HIR.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":591622,"byte_end":591631,"line_start":28,"line_end":28,"column_start":8,"column_end":17},"name":"visit_pre","qualname":"::hir::visitor::Visitor::visit_pre","value":"fn (&mut self, _hir: &Hir) -> Result<(), Self::Err>","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" This method is called on an `Hir` before descending into child `Hir`\n nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":591808,"byte_end":591818,"line_start":34,"line_end":34,"column_start":8,"column_end":18},"name":"visit_post","qualname":"::hir::visitor::Visitor::visit_post","value":"fn (&mut self, _hir: &Hir) -> Result<(), Self::Err>","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" This method is called on an `Hir` after descending all of its child\n `Hir` nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":591967,"byte_end":591987,"line_start":39,"line_end":39,"column_start":8,"column_end":28},"name":"visit_alternation_in","qualname":"::hir::visitor::Visitor::visit_alternation_in","value":"fn (&mut self) -> Result<(), Self::Err>","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" This method is called between child nodes of an alternation.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":774},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":592797,"byte_end":592802,"line_start":59,"line_end":59,"column_start":8,"column_end":13},"name":"visit","qualname":"::hir::visitor::visit","value":"fn <V> (hir: &Hir, visitor: V) -> Result<V::Output, V::Err>","parent":null,"children":[],"decl_id":null,"docs":" Executes an implementation of `Visitor` in constant stack space.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2754},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":314726,"byte_end":314731,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"Error","qualname":"::hir::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":2755},{"krate":0,"index":2756},{"krate":0,"index":2757}],"decl_id":null,"docs":" An error that can occur while translating an `Ast` to a `Hir`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":315101,"byte_end":315105,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":315319,"byte_end":315326,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"pattern","qualname":"<Error>::pattern","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original pattern string in which this error occurred.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":315438,"byte_end":315442,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"span","qualname":"<Error>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span at which this error occurred.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2770},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":315766,"byte_end":315783,"line_start":60,"line_end":60,"column_start":5,"column_end":22},"name":"UnicodeNotAllowed","qualname":"::hir::ErrorKind::UnicodeNotAllowed","value":"ErrorKind::UnicodeNotAllowed","parent":{"krate":0,"index":2769},"children":[],"decl_id":null,"docs":" This error occurs when a Unicode feature is used when Unicode\n support is disabled. For example `(?-u:\\pL)` would trigger this error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2772},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":315939,"byte_end":315950,"line_start":63,"line_end":63,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::hir::ErrorKind::InvalidUtf8","value":"ErrorKind::InvalidUtf8","parent":{"krate":0,"index":2769},"children":[],"decl_id":null,"docs":" This error occurs when translating a pattern that could match a byte\n sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2774},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":316047,"byte_end":316070,"line_start":66,"line_end":66,"column_start":5,"column_end":28},"name":"UnicodePropertyNotFound","qualname":"::hir::ErrorKind::UnicodePropertyNotFound","value":"ErrorKind::UnicodePropertyNotFound","parent":{"krate":0,"index":2769},"children":[],"decl_id":null,"docs":" This occurs when an unrecognized Unicode property name could not\n be found.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2776},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":316168,"byte_end":316196,"line_start":69,"line_end":69,"column_start":5,"column_end":33},"name":"UnicodePropertyValueNotFound","qualname":"::hir::ErrorKind::UnicodePropertyValueNotFound","value":"ErrorKind::UnicodePropertyValueNotFound","parent":{"krate":0,"index":2769},"children":[],"decl_id":null,"docs":" This occurs when an unrecognized Unicode property value could not\n be found.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2778},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":316390,"byte_end":316414,"line_start":73,"line_end":73,"column_start":5,"column_end":29},"name":"UnicodePerlClassNotFound","qualname":"::hir::ErrorKind::UnicodePerlClassNotFound","value":"ErrorKind::UnicodePerlClassNotFound","parent":{"krate":0,"index":2769},"children":[],"decl_id":null,"docs":" This occurs when a Unicode-aware Perl character class (`\\w`, `\\s` or\n `\\d`) could not be found. This can occur when the `unicode-perl`\n crate feature is not enabled.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2780},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":316589,"byte_end":316611,"line_start":77,"line_end":77,"column_start":5,"column_end":27},"name":"UnicodeCaseUnavailable","qualname":"::hir::ErrorKind::UnicodeCaseUnavailable","value":"ErrorKind::UnicodeCaseUnavailable","parent":{"krate":0,"index":2769},"children":[],"decl_id":null,"docs":" This occurs when the Unicode simple case mapping tables are not\n available, and the regular expression required Unicode aware case\n insensitivity.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2782},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":316819,"byte_end":316839,"line_start":83,"line_end":83,"column_start":5,"column_end":25},"name":"EmptyClassNotAllowed","qualname":"::hir::ErrorKind::EmptyClassNotAllowed","value":"ErrorKind::EmptyClassNotAllowed","parent":{"krate":0,"index":2769},"children":[],"decl_id":null,"docs":" This occurs when the translator attempts to construct a character class\n that is empty.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2784},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":317119,"byte_end":317134,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::hir::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":2769},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2769},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":315601,"byte_end":315610,"line_start":57,"line_end":57,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::hir::ErrorKind","value":"ErrorKind::{UnicodeNotAllowed, InvalidUtf8, UnicodePropertyNotFound, UnicodePropertyValueNotFound, UnicodePerlClassNotFound, UnicodeCaseUnavailable, EmptyClassNotAllowed, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":2770},{"krate":0,"index":2772},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2780},{"krate":0,"index":2782},{"krate":0,"index":2784}],"decl_id":null,"docs":" The type of an error that occurred while building an `Hir`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2796},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":320753,"byte_end":320756,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"Hir","qualname":"::hir::Hir","value":"Hir {  }","parent":null,"children":[{"krate":0,"index":2797},{"krate":0,"index":2798}],"decl_id":null,"docs":" A high-level intermediate representation (HIR) for a regular expression.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2811},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":321110,"byte_end":321115,"line_start":187,"line_end":187,"column_start":5,"column_end":10},"name":"Empty","qualname":"::hir::HirKind::Empty","value":"HirKind::Empty","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" The empty regular expression, which matches everything, including the\n empty string.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2813},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":321193,"byte_end":321200,"line_start":189,"line_end":189,"column_start":5,"column_end":12},"name":"Literal","qualname":"::hir::HirKind::Literal","value":"HirKind::Literal(Literal)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" A single literal character that matches exactly this character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2816},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":321401,"byte_end":321406,"line_start":193,"line_end":193,"column_start":5,"column_end":10},"name":"Class","qualname":"::hir::HirKind::Class","value":"HirKind::Class(Class)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" A single character class that matches any of the characters in the\n class. A class can either consist of Unicode scalar values as\n characters, or it can use bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2819},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":321498,"byte_end":321504,"line_start":195,"line_end":195,"column_start":5,"column_end":11},"name":"Anchor","qualname":"::hir::HirKind::Anchor","value":"HirKind::Anchor(Anchor)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" An anchor assertion. An anchor assertion match always has zero length.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2822},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":321656,"byte_end":321668,"line_start":198,"line_end":198,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::hir::HirKind::WordBoundary","value":"HirKind::WordBoundary(WordBoundary)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" A word boundary assertion, which may or may not be Unicode aware. A\n word boundary assertion match always has zero length.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2825},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":321750,"byte_end":321760,"line_start":200,"line_end":200,"column_start":5,"column_end":15},"name":"Repetition","qualname":"::hir::HirKind::Repetition","value":"HirKind::Repetition(Repetition)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" A repetition operation applied to a child expression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2828},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":321849,"byte_end":321854,"line_start":202,"line_end":202,"column_start":5,"column_end":10},"name":"Group","qualname":"::hir::HirKind::Group","value":"HirKind::Group(Group)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" A possibly capturing group, which contains a child expression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2831},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":322088,"byte_end":322094,"line_start":208,"line_end":208,"column_start":5,"column_end":11},"name":"Concat","qualname":"::hir::HirKind::Concat","value":"HirKind::Concat(Vec<Hir>)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" A concatenation of expressions. A concatenation always has at least two\n child expressions.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2834},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":322379,"byte_end":322390,"line_start":214,"line_end":214,"column_start":5,"column_end":16},"name":"Alternation","qualname":"::hir::HirKind::Alternation","value":"HirKind::Alternation(Vec<Hir>)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" An alternation of expressions. An alternation always has at least two\n child expressions.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2810},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":320996,"byte_end":321003,"line_start":184,"line_end":184,"column_start":10,"column_end":17},"name":"HirKind","qualname":"::hir::HirKind","value":"HirKind::{Empty, Literal, Class, Anchor, WordBoundary, Repetition, Group, Concat, Alternation}","parent":null,"children":[{"krate":0,"index":2811},{"krate":0,"index":2813},{"krate":0,"index":2816},{"krate":0,"index":2819},{"krate":0,"index":2822},{"krate":0,"index":2825},{"krate":0,"index":2828},{"krate":0,"index":2831},{"krate":0,"index":2834}],"decl_id":null,"docs":" The kind of an arbitrary `Hir` expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":322483,"byte_end":322487,"line_start":219,"line_end":219,"column_start":12,"column_end":16},"name":"kind","qualname":"<Hir>::kind","value":"fn (&self) -> &HirKind","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying HIR kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":322642,"byte_end":322651,"line_start":225,"line_end":225,"column_start":12,"column_end":21},"name":"into_kind","qualname":"<Hir>::into_kind","value":"fn (mut self) -> HirKind","parent":null,"children":[],"decl_id":null,"docs":" Consumes ownership of this HIR expression and returns its underlying\n `HirKind`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":322893,"byte_end":322898,"line_start":233,"line_end":233,"column_start":12,"column_end":17},"name":"empty","qualname":"<Hir>::empty","value":"fn () -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty HIR expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":323717,"byte_end":323724,"line_start":254,"line_end":254,"column_start":12,"column_end":19},"name":"literal","qualname":"<Hir>::literal","value":"fn (lit: Literal) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a literal HIR expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":324436,"byte_end":324441,"line_start":275,"line_end":275,"column_start":12,"column_end":17},"name":"class","qualname":"<Hir>::class","value":"fn (class: Class) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a class HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":325091,"byte_end":325097,"line_start":292,"line_end":292,"column_start":12,"column_end":18},"name":"anchor","qualname":"<Hir>::anchor","value":"fn (anchor: Anchor) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates an anchor assertion HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":326313,"byte_end":326326,"line_start":325,"line_end":325,"column_start":12,"column_end":25},"name":"word_boundary","qualname":"<Hir>::word_boundary","value":"fn (word_boundary: WordBoundary) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a word boundary assertion HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":327286,"byte_end":327296,"line_start":348,"line_end":348,"column_start":12,"column_end":22},"name":"repetition","qualname":"<Hir>::repetition","value":"fn (rep: Repetition) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a repetition HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":328431,"byte_end":328436,"line_start":375,"line_end":375,"column_start":12,"column_end":17},"name":"group","qualname":"<Hir>::group","value":"fn (group: Group) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a group HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":329363,"byte_end":329369,"line_start":394,"line_end":394,"column_start":12,"column_end":18},"name":"concat","qualname":"<Hir>::concat","value":"fn (mut exprs: Vec<Hir>) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns the concatenation of the given expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":333337,"byte_end":333348,"line_start":487,"line_end":487,"column_start":12,"column_end":23},"name":"alternation","qualname":"<Hir>::alternation","value":"fn (mut exprs: Vec<Hir>) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns the alternation of the given expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":336026,"byte_end":336029,"line_start":554,"line_end":554,"column_start":12,"column_end":15},"name":"dot","qualname":"<Hir>::dot","value":"fn (bytes: bool) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Build an HIR expression for `.`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":336884,"byte_end":336887,"line_start":576,"line_end":576,"column_start":12,"column_end":15},"name":"any","qualname":"<Hir>::any","value":"fn (bytes: bool) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Build an HIR expression for `(?s).`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":337474,"byte_end":337488,"line_start":592,"line_end":592,"column_start":12,"column_end":26},"name":"is_always_utf8","qualname":"<Hir>::is_always_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR will always match valid UTF-8.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":337771,"byte_end":337788,"line_start":601,"line_end":601,"column_start":12,"column_end":29},"name":"is_all_assertions","qualname":"<Hir>::is_all_assertions","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this entire HIR expression is made up of\n zero-width assertions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":338056,"byte_end":338073,"line_start":608,"line_end":608,"column_start":12,"column_end":29},"name":"is_anchored_start","qualname":"<Hir>::is_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match from the\n beginning of text. This includes expressions like `^foo`, `^(foo|bar)`,\n `^foo|^bar` but not `^foo|bar`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":338333,"byte_end":338348,"line_start":615,"line_end":615,"column_start":12,"column_end":27},"name":"is_anchored_end","qualname":"<Hir>::is_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match at the end\n of text. This includes expressions like `foo$`, `(foo|bar)$`,\n `foo$|bar$` but not `foo$|bar`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":338940,"byte_end":338962,"line_start":628,"line_end":628,"column_start":12,"column_end":34},"name":"is_line_anchored_start","qualname":"<Hir>::is_line_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match from the\n beginning of text or the beginning of a line. This includes expressions\n like `^foo`, `(?m)^foo`, `^(foo|bar)`, `^(foo|bar)`, `(?m)^foo|^bar`\n but not `^foo|bar` or `(?m)^foo|bar`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":339560,"byte_end":339580,"line_start":641,"line_end":641,"column_start":12,"column_end":32},"name":"is_line_anchored_end","qualname":"<Hir>::is_line_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match at the\n end of text or the end of a line. This includes expressions like\n `foo$`, `(?m)foo$`, `(foo|bar)$`, `(?m)(foo|bar)$`, `foo$|bar$`,\n `(?m)(foo|bar)$`, but not `foo$|bar` or `(?m)foo$|bar`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":339938,"byte_end":339959,"line_start":649,"line_end":649,"column_start":12,"column_end":33},"name":"is_any_anchored_start","qualname":"<Hir>::is_any_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR contains any sub-expression that\n is required to match at the beginning of text. Specifically, this\n returns true if the `^` symbol (when multiline mode is disabled) or the\n `\\A` escape appear anywhere in the regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":340312,"byte_end":340331,"line_start":657,"line_end":657,"column_start":12,"column_end":31},"name":"is_any_anchored_end","qualname":"<Hir>::is_any_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR contains any sub-expression that is\n required to match at the end of text. Specifically, this returns true\n if the `$` symbol (when multiline mode is disabled) or the `\\z` escape\n appear anywhere in the regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":340647,"byte_end":340661,"line_start":666,"line_end":666,"column_start":12,"column_end":26},"name":"is_match_empty","qualname":"<Hir>::is_match_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if the empty string is part of the language\n matched by this regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":341086,"byte_end":341096,"line_start":676,"line_end":676,"column_start":12,"column_end":22},"name":"is_literal","qualname":"<Hir>::is_literal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is a simple literal. This is only\n true when this HIR expression is either itself a `Literal` or a\n concatenation of only `Literal`s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":341651,"byte_end":341673,"line_start":688,"line_end":688,"column_start":12,"column_end":34},"name":"is_alternation_literal","qualname":"<Hir>::is_alternation_literal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is either a simple literal or an\n alternation of simple literals. This is only\n true when this HIR expression is either itself a `Literal` or a\n concatenation of only `Literal`s or an alternation of only `Literal`s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":342075,"byte_end":342083,"line_start":699,"line_end":699,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HirKind>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is the empty regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":342316,"byte_end":342328,"line_start":708,"line_end":708,"column_start":12,"column_end":24},"name":"has_subexprs","qualname":"<HirKind>::has_subexprs","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this kind has any (including possibly\n empty) subexpressions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2849},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":343588,"byte_end":343595,"line_start":745,"line_end":745,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::Literal::Unicode","value":"Literal::Unicode(char)","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" A single character represented by a Unicode scalar value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2852},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":343668,"byte_end":343672,"line_start":747,"line_end":747,"column_start":5,"column_end":9},"name":"Byte","qualname":"::hir::Literal::Byte","value":"Literal::Byte(u8)","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" A single character represented by an arbitrary byte.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2848},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":343508,"byte_end":343515,"line_start":743,"line_end":743,"column_start":10,"column_end":17},"name":"Literal","qualname":"::hir::Literal","value":"Literal::{Unicode, Byte}","parent":null,"children":[{"krate":0,"index":2849},{"krate":0,"index":2852}],"decl_id":null,"docs":" The high-level intermediate representation of a literal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":343803,"byte_end":343813,"line_start":753,"line_end":753,"column_start":12,"column_end":22},"name":"is_unicode","qualname":"<Literal>::is_unicode","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this literal corresponds to a Unicode\n scalar value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2867},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":345019,"byte_end":345026,"line_start":781,"line_end":781,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::Class::Unicode","value":"Class::Unicode(ClassUnicode)","parent":{"krate":0,"index":2866},"children":[],"decl_id":null,"docs":" A set of characters represented by Unicode scalar values.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2870},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":345139,"byte_end":345144,"line_start":784,"line_end":784,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::hir::Class::Bytes","value":"Class::Bytes(ClassBytes)","parent":{"krate":0,"index":2866},"children":[],"decl_id":null,"docs":" A set of characters represented by arbitrary bytes (one byte per\n character).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2866},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":344941,"byte_end":344946,"line_start":779,"line_end":779,"column_start":10,"column_end":15},"name":"Class","qualname":"::hir::Class","value":"Class::{Unicode, Bytes}","parent":null,"children":[{"krate":0,"index":2867},{"krate":0,"index":2870}],"decl_id":null,"docs":" The high-level intermediate representation of a character class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":345500,"byte_end":345516,"line_start":794,"line_end":794,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<Class>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply Unicode simple case folding to this character class, in place.\n The character class will be expanded to include all simple case folded\n character variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":345889,"byte_end":345895,"line_start":805,"line_end":805,"column_start":12,"column_end":18},"name":"negate","qualname":"<Class>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this character class in place.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":346600,"byte_end":346614,"line_start":823,"line_end":823,"column_start":12,"column_end":26},"name":"is_always_utf8","qualname":"<Class>::is_always_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class will only ever match\n valid UTF-8.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2884},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":346877,"byte_end":346889,"line_start":833,"line_end":833,"column_start":12,"column_end":24},"name":"ClassUnicode","qualname":"::hir::ClassUnicode","value":"ClassUnicode {  }","parent":null,"children":[{"krate":0,"index":2885}],"decl_id":null,"docs":" A set of characters represented by Unicode scalar values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":347127,"byte_end":347130,"line_start":842,"line_end":842,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassUnicode>::new","value":"fn <I> (ranges: I) -> ClassUnicode","parent":null,"children":[],"decl_id":null,"docs":" Create a new class from a sequence of ranges.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":347344,"byte_end":347349,"line_start":850,"line_end":850,"column_start":12,"column_end":17},"name":"empty","qualname":"<ClassUnicode>::empty","value":"fn () -> ClassUnicode","parent":null,"children":[],"decl_id":null,"docs":" Create a new class with no ranges.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":347459,"byte_end":347463,"line_start":855,"line_end":855,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassUnicode>::push","value":"fn (&mut self, range: ClassUnicodeRange) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new range to this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":347672,"byte_end":347676,"line_start":862,"line_end":862,"column_start":12,"column_end":16},"name":"iter","qualname":"<ClassUnicode>::iter","value":"fn (&self) -> ClassUnicodeIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all ranges in this class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":347815,"byte_end":347821,"line_start":867,"line_end":867,"column_start":12,"column_end":18},"name":"ranges","qualname":"<ClassUnicode>::ranges","value":"fn (&self) -> &[ClassUnicodeRange]","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying ranges as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":348557,"byte_end":348573,"line_start":884,"line_end":884,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<ClassUnicode>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters, according to Unicode's \"simple\" mapping. For example, if\n this class consists of the range `a-z`, then applying case folding will\n result in the class containing both the ranges `a-z` and `A-Z`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":349246,"byte_end":349266,"line_start":900,"line_end":900,"column_start":12,"column_end":32},"name":"try_case_fold_simple","qualname":"<ClassUnicode>::try_case_fold_simple","value":"fn (&mut self) -> result::Result<(), CaseFoldError>","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters, according to Unicode's \"simple\" mapping. For example, if\n this class consists of the range `a-z`, then applying case folding will\n result in the class containing both the ranges `a-z` and `A-Z`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":349568,"byte_end":349574,"line_start":910,"line_end":910,"column_start":12,"column_end":18},"name":"negate","qualname":"<ClassUnicode>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this character class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":349710,"byte_end":349715,"line_start":915,"line_end":915,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassUnicode>::union","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union this character class with the given character class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":349894,"byte_end":349903,"line_start":921,"line_end":921,"column_start":12,"column_end":21},"name":"intersect","qualname":"<ClassUnicode>::intersect","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this character class with the given character class, in\n place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":350077,"byte_end":350087,"line_start":926,"line_end":926,"column_start":12,"column_end":22},"name":"difference","qualname":"<ClassUnicode>::difference","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Subtract the given character class from this character class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":350656,"byte_end":350676,"line_start":938,"line_end":938,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<ClassUnicode>::symmetric_difference","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the symmetric difference of the given character classes, in\n place.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2897},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":350936,"byte_end":350952,"line_start":947,"line_end":947,"column_start":12,"column_end":28},"name":"ClassUnicodeIter","qualname":"::hir::ClassUnicodeIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all ranges in a Unicode character class.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2904},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":351419,"byte_end":351436,"line_start":962,"line_end":962,"column_start":12,"column_end":29},"name":"ClassUnicodeRange","qualname":"::hir::ClassUnicodeRange","value":"ClassUnicodeRange {  }","parent":null,"children":[{"krate":0,"index":2905},{"krate":0,"index":2906}],"decl_id":null,"docs":" A single range of characters represented by Unicode scalar values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":353865,"byte_end":353868,"line_start":1045,"line_end":1045,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassUnicodeRange>::new","value":"fn (start: char, end: char) -> ClassUnicodeRange","parent":null,"children":[],"decl_id":null,"docs":" Create a new Unicode scalar value range for a character class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":354119,"byte_end":354124,"line_start":1053,"line_end":1053,"column_start":12,"column_end":17},"name":"start","qualname":"<ClassUnicodeRange>::start","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Return the start of this range.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":354319,"byte_end":354322,"line_start":1061,"line_end":1061,"column_start":12,"column_end":15},"name":"end","qualname":"<ClassUnicodeRange>::end","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Return the end of this range.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2931},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":354522,"byte_end":354532,"line_start":1069,"line_end":1069,"column_start":12,"column_end":22},"name":"ClassBytes","qualname":"::hir::ClassBytes","value":"ClassBytes {  }","parent":null,"children":[{"krate":0,"index":2932}],"decl_id":null,"docs":" A set of characters represented by arbitrary bytes (where one byte\n corresponds to one character).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":354766,"byte_end":354769,"line_start":1078,"line_end":1078,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassBytes>::new","value":"fn <I> (ranges: I) -> ClassBytes","parent":null,"children":[],"decl_id":null,"docs":" Create a new class from a sequence of ranges.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":354977,"byte_end":354982,"line_start":1086,"line_end":1086,"column_start":12,"column_end":17},"name":"empty","qualname":"<ClassBytes>::empty","value":"fn () -> ClassBytes","parent":null,"children":[],"decl_id":null,"docs":" Create a new class with no ranges.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":355088,"byte_end":355092,"line_start":1091,"line_end":1091,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassBytes>::push","value":"fn (&mut self, range: ClassBytesRange) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new range to this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":355299,"byte_end":355303,"line_start":1098,"line_end":1098,"column_start":12,"column_end":16},"name":"iter","qualname":"<ClassBytes>::iter","value":"fn (&self) -> ClassBytesIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all ranges in this class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":355438,"byte_end":355444,"line_start":1103,"line_end":1103,"column_start":12,"column_end":18},"name":"ranges","qualname":"<ClassBytes>::ranges","value":"fn (&self) -> &[ClassBytesRange]","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying ranges as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":355909,"byte_end":355925,"line_start":1114,"line_end":1114,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<ClassBytes>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters. For example, if this class consists of the range `a-z`,\n then applying case folding will result in the class containing both the\n ranges `a-z` and `A-Z`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":356200,"byte_end":356206,"line_start":1122,"line_end":1122,"column_start":12,"column_end":18},"name":"negate","qualname":"<ClassBytes>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this byte class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":356332,"byte_end":356337,"line_start":1127,"line_end":1127,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassBytes>::union","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union this byte class with the given byte class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":356496,"byte_end":356505,"line_start":1132,"line_end":1132,"column_start":12,"column_end":21},"name":"intersect","qualname":"<ClassBytes>::intersect","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this byte class with the given byte class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":356667,"byte_end":356677,"line_start":1137,"line_end":1137,"column_start":12,"column_end":22},"name":"difference","qualname":"<ClassBytes>::difference","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Subtract the given byte class from this byte class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":357226,"byte_end":357246,"line_start":1148,"line_end":1148,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<ClassBytes>::symmetric_difference","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the symmetric difference of the given byte classes, in place.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":357561,"byte_end":357573,"line_start":1155,"line_end":1155,"column_start":12,"column_end":24},"name":"is_all_ascii","qualname":"<ClassBytes>::is_all_ascii","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class will either match\n nothing or only ASCII bytes. Stated differently, this returns false\n if and only if this class contains a non-ASCII byte.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2944},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":357829,"byte_end":357843,"line_start":1164,"line_end":1164,"column_start":12,"column_end":26},"name":"ClassBytesIter","qualname":"::hir::ClassBytesIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all ranges in a byte character class.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2951},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":358296,"byte_end":358311,"line_start":1179,"line_end":1179,"column_start":12,"column_end":27},"name":"ClassBytesRange","qualname":"::hir::ClassBytesRange","value":"ClassBytesRange {  }","parent":null,"children":[{"krate":0,"index":2952},{"krate":0,"index":2953}],"decl_id":null,"docs":" A single range of characters represented by arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":359870,"byte_end":359873,"line_start":1232,"line_end":1232,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassBytesRange>::new","value":"fn (start: u8, end: u8) -> ClassBytesRange","parent":null,"children":[],"decl_id":null,"docs":" Create a new byte range for a character class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":360116,"byte_end":360121,"line_start":1240,"line_end":1240,"column_start":12,"column_end":17},"name":"start","qualname":"<ClassBytesRange>::start","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the start of this range.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":360314,"byte_end":360317,"line_start":1248,"line_end":1248,"column_start":12,"column_end":15},"name":"end","qualname":"<ClassBytesRange>::end","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the end of this range.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2979},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":361260,"byte_end":361269,"line_start":1278,"line_end":1278,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::hir::Anchor::StartLine","value":"Anchor::StartLine","parent":{"krate":0,"index":2978},"children":[],"decl_id":null,"docs":" Match the beginning of a line or the beginning of text. Specifically,\n this matches at the starting position of the input, or at the position\n immediately following a `\\n` character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2981},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":361463,"byte_end":361470,"line_start":1282,"line_end":1282,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::hir::Anchor::EndLine","value":"Anchor::EndLine","parent":{"krate":0,"index":2978},"children":[],"decl_id":null,"docs":" Match the end of a line or the end of text. Specifically,\n this matches at the end position of the input, or at the position\n immediately preceding a `\\n` character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2983},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":361587,"byte_end":361596,"line_start":1285,"line_end":1285,"column_start":5,"column_end":14},"name":"StartText","qualname":"::hir::Anchor::StartText","value":"Anchor::StartText","parent":{"krate":0,"index":2978},"children":[],"decl_id":null,"docs":" Match the beginning of text. Specifically, this matches at the starting\n position of the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2985},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":361705,"byte_end":361712,"line_start":1288,"line_end":1288,"column_start":5,"column_end":12},"name":"EndText","qualname":"::hir::Anchor::EndText","value":"Anchor::EndText","parent":{"krate":0,"index":2978},"children":[],"decl_id":null,"docs":" Match the end of text. Specifically, this matches at the ending\n position of the input.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2978},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":361042,"byte_end":361048,"line_start":1274,"line_end":1274,"column_start":10,"column_end":16},"name":"Anchor","qualname":"::hir::Anchor","value":"Anchor::{StartLine, EndLine, StartText, EndText}","parent":null,"children":[{"krate":0,"index":2979},{"krate":0,"index":2981},{"krate":0,"index":2983},{"krate":0,"index":2985}],"decl_id":null,"docs":" The high-level intermediate representation for an anchor assertion.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2998},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":362153,"byte_end":362160,"line_start":1299,"line_end":1299,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::WordBoundary::Unicode","value":"WordBoundary::Unicode","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Match a Unicode-aware word boundary. That is, this matches a position\n where the left adjacent character and right adjacent character\n correspond to a word and non-word or a non-word and word character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3000},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":362225,"byte_end":362238,"line_start":1301,"line_end":1301,"column_start":5,"column_end":18},"name":"UnicodeNegate","qualname":"::hir::WordBoundary::UnicodeNegate","value":"WordBoundary::UnicodeNegate","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Match a Unicode-aware negation of a word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3002},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":362467,"byte_end":362472,"line_start":1305,"line_end":1305,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::hir::WordBoundary::Ascii","value":"WordBoundary::Ascii","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Match an ASCII-only word boundary. That is, this matches a position\n where the left adjacent character and right adjacent character\n correspond to a word and non-word or a non-word and word character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3004},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":362535,"byte_end":362546,"line_start":1307,"line_end":1307,"column_start":5,"column_end":16},"name":"AsciiNegate","qualname":"::hir::WordBoundary::AsciiNegate","value":"WordBoundary::AsciiNegate","parent":{"krate":0,"index":2997},"children":[],"decl_id":null,"docs":" Match an ASCII-only negation of a word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2997},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":361909,"byte_end":361921,"line_start":1295,"line_end":1295,"column_start":10,"column_end":22},"name":"WordBoundary","qualname":"::hir::WordBoundary","value":"WordBoundary::{Unicode, UnicodeNegate, Ascii, AsciiNegate}","parent":null,"children":[{"krate":0,"index":2998},{"krate":0,"index":3000},{"krate":0,"index":3002},{"krate":0,"index":3004}],"decl_id":null,"docs":" The high-level intermediate representation for a word-boundary assertion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":362659,"byte_end":362669,"line_start":1312,"line_end":1312,"column_start":12,"column_end":22},"name":"is_negated","qualname":"<WordBoundary>::is_negated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this word boundary assertion is negated.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3016},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":363193,"byte_end":363198,"line_start":1328,"line_end":1328,"column_start":12,"column_end":17},"name":"Group","qualname":"::hir::Group","value":"Group { kind, hir }","parent":null,"children":[{"krate":0,"index":3017},{"krate":0,"index":3018}],"decl_id":null,"docs":" The high-level intermediate representation for a group.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3017},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":363372,"byte_end":363376,"line_start":1332,"line_end":1332,"column_start":9,"column_end":13},"name":"kind","qualname":"::hir::Group::kind","value":"hir::GroupKind","parent":{"krate":0,"index":3016},"children":[],"decl_id":null,"docs":" The kind of this group. If it is a capturing group, then the kind\n contains the capture group index (and the name, if it is a named\n group).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3018},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":363468,"byte_end":363471,"line_start":1334,"line_end":1334,"column_start":9,"column_end":12},"name":"hir","qualname":"::hir::Group::hir","value":"std::boxed::Box<hir::Hir>","parent":{"krate":0,"index":3016},"children":[],"decl_id":null,"docs":" The expression inside the capturing group, which may be empty.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3031},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":363676,"byte_end":363688,"line_start":1343,"line_end":1343,"column_start":5,"column_end":17},"name":"CaptureIndex","qualname":"::hir::GroupKind::CaptureIndex","value":"GroupKind::CaptureIndex(u32)","parent":{"krate":0,"index":3030},"children":[],"decl_id":null,"docs":" A normal unnamed capturing group.","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":3034},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":363732,"byte_end":363743,"line_start":1345,"line_end":1345,"column_start":5,"column_end":16},"name":"CaptureName","qualname":"::hir::GroupKind::CaptureName","value":"GroupKind::CaptureName { name, index }","parent":{"krate":0,"index":3030},"children":[],"decl_id":null,"docs":" A named capturing group.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3037},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":363909,"byte_end":363921,"line_start":1352,"line_end":1352,"column_start":5,"column_end":17},"name":"NonCapturing","qualname":"::hir::GroupKind::NonCapturing","value":"GroupKind::NonCapturing","parent":{"krate":0,"index":3030},"children":[],"decl_id":null,"docs":" A non-capturing group.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3030},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":363557,"byte_end":363566,"line_start":1339,"line_end":1339,"column_start":10,"column_end":19},"name":"GroupKind","qualname":"::hir::GroupKind","value":"GroupKind::{CaptureIndex, CaptureName, NonCapturing}","parent":null,"children":[{"krate":0,"index":3031},{"krate":0,"index":3034},{"krate":0,"index":3037}],"decl_id":null,"docs":" The kind of group.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3050},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":364138,"byte_end":364148,"line_start":1360,"line_end":1360,"column_start":12,"column_end":22},"name":"Repetition","qualname":"::hir::Repetition","value":"Repetition { kind, greedy, hir }","parent":null,"children":[{"krate":0,"index":3051},{"krate":0,"index":3052},{"krate":0,"index":3053}],"decl_id":null,"docs":" The high-level intermediate representation of a repetition operator.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3051},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":364205,"byte_end":364209,"line_start":1362,"line_end":1362,"column_start":9,"column_end":13},"name":"kind","qualname":"::hir::Repetition::kind","value":"hir::RepetitionKind","parent":{"krate":0,"index":3050},"children":[],"decl_id":null,"docs":" The kind of this repetition operator.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3052},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":364648,"byte_end":364654,"line_start":1370,"line_end":1370,"column_start":9,"column_end":15},"name":"greedy","qualname":"::hir::Repetition::greedy","value":"bool","parent":{"krate":0,"index":3050},"children":[],"decl_id":null,"docs":" Whether this repetition operator is greedy or not. A greedy operator\n will match as much as it can. A non-greedy operator will match as\n little as it can.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3053},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":364709,"byte_end":364712,"line_start":1372,"line_end":1372,"column_start":9,"column_end":12},"name":"hir","qualname":"::hir::Repetition::hir","value":"std::boxed::Box<hir::Hir>","parent":{"krate":0,"index":3050},"children":[],"decl_id":null,"docs":" The expression being repeated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":365278,"byte_end":365292,"line_start":1385,"line_end":1385,"column_start":12,"column_end":26},"name":"is_match_empty","qualname":"<Repetition>::is_match_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this repetition operator makes it possible\n to match the empty string.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3066},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":365883,"byte_end":365892,"line_start":1401,"line_end":1401,"column_start":5,"column_end":14},"name":"ZeroOrOne","qualname":"::hir::RepetitionKind::ZeroOrOne","value":"RepetitionKind::ZeroOrOne","parent":{"krate":0,"index":3065},"children":[],"decl_id":null,"docs":" Matches a sub-expression zero or one times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3068},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":365951,"byte_end":365961,"line_start":1403,"line_end":1403,"column_start":5,"column_end":15},"name":"ZeroOrMore","qualname":"::hir::RepetitionKind::ZeroOrMore","value":"RepetitionKind::ZeroOrMore","parent":{"krate":0,"index":3065},"children":[],"decl_id":null,"docs":" Matches a sub-expression zero or more times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3070},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":366019,"byte_end":366028,"line_start":1405,"line_end":1405,"column_start":5,"column_end":14},"name":"OneOrMore","qualname":"::hir::RepetitionKind::OneOrMore","value":"RepetitionKind::OneOrMore","parent":{"krate":0,"index":3065},"children":[],"decl_id":null,"docs":" Matches a sub-expression one or more times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3072},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":366100,"byte_end":366105,"line_start":1407,"line_end":1407,"column_start":5,"column_end":10},"name":"Range","qualname":"::hir::RepetitionKind::Range","value":"RepetitionKind::Range(RepetitionRange)","parent":{"krate":0,"index":3065},"children":[],"decl_id":null,"docs":" Matches a sub-expression within a bounded range of times.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3065},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":365810,"byte_end":365824,"line_start":1399,"line_end":1399,"column_start":10,"column_end":24},"name":"RepetitionKind","qualname":"::hir::RepetitionKind","value":"RepetitionKind::{ZeroOrOne, ZeroOrMore, OneOrMore, Range}","parent":null,"children":[{"krate":0,"index":3066},{"krate":0,"index":3068},{"krate":0,"index":3070},{"krate":0,"index":3072}],"decl_id":null,"docs":" The kind of a repetition operator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3087},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":366302,"byte_end":366309,"line_start":1414,"line_end":1414,"column_start":5,"column_end":12},"name":"Exactly","qualname":"::hir::RepetitionRange::Exactly","value":"RepetitionRange::Exactly(u32)","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":" Matches a sub-expression exactly this many times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3090},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":366379,"byte_end":366386,"line_start":1416,"line_end":1416,"column_start":5,"column_end":12},"name":"AtLeast","qualname":"::hir::RepetitionRange::AtLeast","value":"RepetitionRange::AtLeast(u32)","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":" Matches a sub-expression at least this many times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3093},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":366472,"byte_end":366479,"line_start":1418,"line_end":1418,"column_start":5,"column_end":12},"name":"Bounded","qualname":"::hir::RepetitionRange::Bounded","value":"RepetitionRange::Bounded(u32, u32)","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":" Matches a sub-expression at least `m` times and at most `n` times.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3086},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":366222,"byte_end":366237,"line_start":1412,"line_end":1412,"column_start":10,"column_end":25},"name":"RepetitionRange","qualname":"::hir::RepetitionRange","value":"RepetitionRange::{Exactly, AtLeast, Bounded}","parent":null,"children":[{"krate":0,"index":3087},{"krate":0,"index":3090},{"krate":0,"index":3093}],"decl_id":null,"docs":" The kind of a counted repetition operator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3143},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":598385,"byte_end":598398,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"ParserBuilder","qualname":"::parser::ParserBuilder","value":"ParserBuilder {  }","parent":null,"children":[{"krate":0,"index":3144},{"krate":0,"index":3145}],"decl_id":null,"docs":" A builder for a regular expression parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":598582,"byte_end":598585,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserBuilder>::new","value":"fn () -> ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser builder with a default configuration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":598729,"byte_end":598734,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"build","qualname":"<ParserBuilder>::build","value":"fn (&self) -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Build a parser from this configuration with the given pattern.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":600296,"byte_end":600306,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"nest_limit","qualname":"<ParserBuilder>::nest_limit","value":"fn (&mut self, limit: u32) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the nesting limit for this parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":601249,"byte_end":601254,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"octal","qualname":"<ParserBuilder>::octal","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to support octal syntax or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":602002,"byte_end":602020,"line_start":92,"line_end":92,"column_start":12,"column_end":30},"name":"allow_invalid_utf8","qualname":"<ParserBuilder>::allow_invalid_utf8","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" When enabled, the parser will permit the construction of a regular\n expression that may match invalid UTF-8.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":602580,"byte_end":602597,"line_start":105,"line_end":105,"column_start":12,"column_end":29},"name":"ignore_whitespace","qualname":"<ParserBuilder>::ignore_whitespace","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable verbose mode in the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":602928,"byte_end":602944,"line_start":114,"line_end":114,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<ParserBuilder>::case_insensitive","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the case insensitive flag by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":603277,"byte_end":603287,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"multi_line","qualname":"<ParserBuilder>::multi_line","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the multi-line matching flag by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":603622,"byte_end":603642,"line_start":132,"line_end":132,"column_start":12,"column_end":32},"name":"dot_matches_new_line","qualname":"<ParserBuilder>::dot_matches_new_line","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"dot matches any character\" flag by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":603972,"byte_end":603982,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"swap_greed","qualname":"<ParserBuilder>::swap_greed","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"swap greed\" flag by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":604541,"byte_end":604548,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ParserBuilder>::unicode","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the Unicode flag (`u`) by default.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3152},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":605425,"byte_end":605431,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"Parser","qualname":"::parser::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":3153},{"krate":0,"index":3154}],"decl_id":null,"docs":" A convenience parser for regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":605878,"byte_end":605881,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser>::new","value":"fn () -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser with a default configuration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":606043,"byte_end":606048,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser>::parse","value":"fn (&mut self, pattern: &str) -> Result<hir::Hir>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression into a high level intermediate\n representation.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3168},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":607343,"byte_end":607356,"line_start":36,"line_end":36,"column_start":12,"column_end":25},"name":"CaseFoldError","qualname":"::unicode::CaseFoldError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that occurs when Unicode-aware simple case folding fails.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3173},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":608017,"byte_end":608033,"line_start":56,"line_end":56,"column_start":12,"column_end":28},"name":"UnicodeWordError","qualname":"::unicode::UnicodeWordError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that occurs when the Unicode-aware `\\w` class is unavailable.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1550},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utf8","qualname":"::utf8","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","parent":null,"children":[{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":3214},{"krate":0,"index":3253},{"krate":0,"index":3248},{"krate":0,"index":3242},{"krate":0,"index":3243},{"krate":0,"index":3238},{"krate":0,"index":3239},{"krate":0,"index":3232},{"krate":0,"index":3230},{"krate":0,"index":1555},{"krate":0,"index":1562},{"krate":0,"index":1567},{"krate":0,"index":3254},{"krate":0,"index":3277},{"krate":0,"index":3276},{"krate":0,"index":3273},{"krate":0,"index":3274},{"krate":0,"index":3269},{"krate":0,"index":3270},{"krate":0,"index":3259},{"krate":0,"index":3257},{"krate":0,"index":1570},{"krate":0,"index":1573},{"krate":0,"index":1575},{"krate":0,"index":1577},{"krate":0,"index":1581},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1591},{"krate":0,"index":1597}],"decl_id":null,"docs":"Converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1351420,"byte_end":1351442,"line_start":83,"line_end":83,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3215},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1351924,"byte_end":1351927,"line_start":101,"line_end":101,"column_start":5,"column_end":8},"name":"One","qualname":"::utf8::Utf8Sequence::One","value":"Utf8Sequence::One(Utf8Range)","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" One byte range.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3218},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1351980,"byte_end":1351983,"line_start":103,"line_end":103,"column_start":5,"column_end":8},"name":"Two","qualname":"::utf8::Utf8Sequence::Two","value":"Utf8Sequence::Two([Utf8Range; 2])","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Two successive byte ranges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3222},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1352043,"byte_end":1352048,"line_start":105,"line_end":105,"column_start":5,"column_end":10},"name":"Three","qualname":"::utf8::Utf8Sequence::Three","value":"Utf8Sequence::Three([Utf8Range; 3])","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Three successive byte ranges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3226},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1352107,"byte_end":1352111,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Four","qualname":"::utf8::Utf8Sequence::Four","value":"Utf8Sequence::Four([Utf8Range; 4])","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Four successive byte ranges.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3214},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1351881,"byte_end":1351893,"line_start":99,"line_end":99,"column_start":10,"column_end":22},"name":"Utf8Sequence","qualname":"::utf8::Utf8Sequence","value":"Utf8Sequence::{One, Two, Three, Four}","parent":null,"children":[{"krate":0,"index":3215},{"krate":0,"index":3218},{"krate":0,"index":3222},{"krate":0,"index":3226}],"decl_id":null,"docs":" Utf8Sequence represents a sequence of byte ranges.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1557},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1353224,"byte_end":1353232,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Utf8Sequence>::as_slice","value":"fn (&self) -> &[Utf8Range]","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying sequence of byte ranges as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1353634,"byte_end":1353637,"line_start":151,"line_end":151,"column_start":12,"column_end":15},"name":"len","qualname":"<Utf8Sequence>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of byte ranges in this sequence.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1354117,"byte_end":1354124,"line_start":171,"line_end":171,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Utf8Sequence>::reverse","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reverses the ranges in this sequence.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1354503,"byte_end":1354510,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"matches","qualname":"<Utf8Sequence>::matches","value":"fn (&self, bytes: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if a prefix of `bytes` matches this sequence\n of byte ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3254},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355560,"byte_end":1355569,"line_start":220,"line_end":220,"column_start":12,"column_end":21},"name":"Utf8Range","qualname":"::utf8::Utf8Range","value":"Utf8Range { start, end }","parent":null,"children":[{"krate":0,"index":3255},{"krate":0,"index":3256}],"decl_id":null,"docs":" A single inclusive range of UTF-8 bytes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3255},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355621,"byte_end":1355626,"line_start":222,"line_end":222,"column_start":9,"column_end":14},"name":"start","qualname":"::utf8::Utf8Range::start","value":"u8","parent":{"krate":0,"index":3254},"children":[],"decl_id":null,"docs":" Start of byte range (inclusive).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3256},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355679,"byte_end":1355682,"line_start":224,"line_end":224,"column_start":9,"column_end":12},"name":"end","qualname":"::utf8::Utf8Range::end","value":"u8","parent":{"krate":0,"index":3254},"children":[],"decl_id":null,"docs":" End of byte range (inclusive).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355869,"byte_end":1355876,"line_start":233,"line_end":233,"column_start":12,"column_end":19},"name":"matches","qualname":"<Utf8Range>::matches","value":"fn (&self, b: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1575},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1358225,"byte_end":1358238,"line_start":298,"line_end":298,"column_start":12,"column_end":25},"name":"Utf8Sequences","qualname":"::utf8::Utf8Sequences","value":"Utf8Sequences {  }","parent":null,"children":[{"krate":0,"index":1576}],"decl_id":null,"docs":" An iterator over ranges of matching UTF-8 byte sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1358406,"byte_end":1358409,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"new","qualname":"<Utf8Sequences>::new","value":"fn (start: char, end: char) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator over UTF-8 byte ranges for the scalar value range\n given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1358773,"byte_end":1358778,"line_start":316,"line_end":316,"column_start":12,"column_end":17},"name":"reset","qualname":"<Utf8Sequences>::reset","value":"fn (&mut self, start: char, end: char) -> ()","parent":null,"children":[],"decl_id":null,"docs":" reset resets the scalar value range.\n Any existing state is cleared, but resources may be reused.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1598},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7553,"byte_end":7559,"line_start":177,"line_end":177,"column_start":8,"column_end":14},"name":"escape","qualname":"::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1599},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7930,"byte_end":7941,"line_start":187,"line_end":187,"column_start":8,"column_end":19},"name":"escape_into","qualname":"::escape_into","value":"fn (text: &str, buf: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Escapes all meta characters in `text` and writes the result into `buf`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1600},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":8580,"byte_end":8597,"line_start":205,"line_end":205,"column_start":8,"column_end":25},"name":"is_meta_character","qualname":"::is_meta_character","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the give character has significance in a regex.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1601},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":9475,"byte_end":9492,"line_start":229,"line_end":229,"column_start":8,"column_end":25},"name":"is_word_character","qualname":"::is_word_character","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is a Unicode word\n character.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1602},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":10165,"byte_end":10186,"line_start":247,"line_end":247,"column_start":8,"column_end":29},"name":"try_is_word_character","qualname":"::try_is_word_character","value":"fn (c: char) -> std::result::Result<bool, UnicodeWordError>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is a Unicode word\n character.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1603},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":10473,"byte_end":10485,"line_start":257,"line_end":257,"column_start":8,"column_end":20},"name":"is_word_byte","qualname":"::is_word_byte","value":"fn (c: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is an ASCII word character.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":62812,"byte_end":62821,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":65690,"byte_end":65703,"line_start":119,"line_end":119,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":65785,"byte_end":65798,"line_start":125,"line_end":125,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":74337,"byte_end":74343,"line_start":323,"line_end":323,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":75929,"byte_end":75936,"line_start":365,"line_end":365,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":98463,"byte_end":98470,"line_start":960,"line_end":960,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":143320,"byte_end":143331,"line_start":2146,"line_end":2146,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":144349,"byte_end":144360,"line_start":2181,"line_end":2181,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":266747,"byte_end":266761,"line_start":19,"line_end":19,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":266845,"byte_end":266859,"line_start":25,"line_end":25,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":267519,"byte_end":267526,"line_start":49,"line_end":49,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":268182,"byte_end":268188,"line_start":70,"line_end":70,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":270779,"byte_end":270785,"line_start":156,"line_end":156,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":213},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":291610,"byte_end":291621,"line_start":201,"line_end":201,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":300037,"byte_end":300042,"line_start":437,"line_end":437,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":300435,"byte_end":300445,"line_start":450,"line_end":450,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":301019,"byte_end":301030,"line_start":467,"line_end":467,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":301427,"byte_end":301437,"line_start":480,"line_end":480,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":301818,"byte_end":301829,"line_start":492,"line_end":492,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":12943,"byte_end":12948,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":19390,"byte_end":19395,"line_start":181,"line_end":181,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":21600,"byte_end":21605,"line_start":222,"line_end":222,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":21744,"byte_end":21753,"line_start":228,"line_end":228,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":25742,"byte_end":25746,"line_start":330,"line_end":330,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":25890,"byte_end":25894,"line_start":336,"line_end":336,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26038,"byte_end":26042,"line_start":342,"line_end":342,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26683,"byte_end":26691,"line_start":363,"line_end":363,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26915,"byte_end":26923,"line_start":373,"line_end":373,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":27044,"byte_end":27052,"line_start":379,"line_end":379,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":27165,"byte_end":27169,"line_start":385,"line_end":385,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":28257,"byte_end":28265,"line_start":420,"line_end":420,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30896,"byte_end":30899,"line_start":493,"line_end":493,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":32507,"byte_end":32510,"line_start":544,"line_end":544,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":32892,"byte_end":32903,"line_start":560,"line_end":560,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":33631,"byte_end":33637,"line_start":584,"line_end":584,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":34589,"byte_end":34596,"line_start":614,"line_end":614,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":37204,"byte_end":37218,"line_start":691,"line_end":691,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38074,"byte_end":38079,"line_start":717,"line_end":717,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39770,"byte_end":39784,"line_start":796,"line_end":796,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":41572,"byte_end":41584,"line_start":845,"line_end":845,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":43094,"byte_end":43112,"line_start":892,"line_end":892,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":44375,"byte_end":44383,"line_start":930,"line_end":930,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45975,"byte_end":45987,"line_start":980,"line_end":980,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":46819,"byte_end":46832,"line_start":1007,"line_end":1007,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":47418,"byte_end":47431,"line_start":1027,"line_end":1027,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51409,"byte_end":51424,"line_start":1164,"line_end":1164,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":52311,"byte_end":52316,"line_start":1193,"line_end":1193,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":54530,"byte_end":54535,"line_start":1269,"line_end":1269,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56301,"byte_end":56314,"line_start":1330,"line_end":1330,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56956,"byte_end":56959,"line_start":1359,"line_end":1359,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":58811,"byte_end":58819,"line_start":1409,"line_end":1409,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":304124,"byte_end":304129,"line_start":30,"line_end":30,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":304233,"byte_end":304238,"line_start":36,"line_end":36,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":304342,"byte_end":304347,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":304693,"byte_end":304698,"line_start":54,"line_end":54,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":305699,"byte_end":305708,"line_start":82,"line_end":82,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":305986,"byte_end":305995,"line_start":93,"line_end":93,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":306266,"byte_end":306275,"line_start":104,"line_end":104,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":309062,"byte_end":309067,"line_start":169,"line_end":169,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":397956,"byte_end":397967,"line_start":40,"line_end":40,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409504,"byte_end":409519,"line_start":327,"line_end":327,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":417286,"byte_end":417294,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":443977,"byte_end":443985,"line_start":840,"line_end":840,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444261,"byte_end":444268,"line_start":850,"line_end":850,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444766,"byte_end":444773,"line_start":872,"line_end":872,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444875,"byte_end":444882,"line_start":878,"line_end":878,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":445021,"byte_end":445028,"line_start":884,"line_end":884,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":445295,"byte_end":445302,"line_start":894,"line_end":894,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":445382,"byte_end":445389,"line_start":900,"line_end":900,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":445501,"byte_end":445508,"line_start":907,"line_end":907,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":471808,"byte_end":471822,"line_start":20,"line_end":20,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":471906,"byte_end":471920,"line_start":26,"line_end":26,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":472995,"byte_end":473002,"line_start":57,"line_end":57,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":473658,"byte_end":473664,"line_start":78,"line_end":78,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":478598,"byte_end":478604,"line_start":212,"line_end":212,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":483533,"byte_end":483550,"line_start":21,"line_end":21,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":483640,"byte_end":483657,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":486796,"byte_end":486806,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":490016,"byte_end":490024,"line_start":186,"line_end":186,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":491527,"byte_end":491538,"line_start":234,"line_end":234,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":505792,"byte_end":505803,"line_start":595,"line_end":595,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":519997,"byte_end":520002,"line_start":996,"line_end":996,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":594219,"byte_end":594230,"line_start":98,"line_end":98,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":597585,"byte_end":597590,"line_start":192,"line_end":192,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":315043,"byte_end":315048,"line_start":36,"line_end":36,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":317144,"byte_end":317153,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":318162,"byte_end":318167,"line_start":117,"line_end":117,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":318372,"byte_end":318377,"line_start":125,"line_end":125,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":318516,"byte_end":318525,"line_start":131,"line_end":131,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":322410,"byte_end":322413,"line_start":217,"line_end":217,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":341748,"byte_end":341755,"line_start":693,"line_end":693,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":342964,"byte_end":342967,"line_start":729,"line_end":729,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":343686,"byte_end":343693,"line_start":750,"line_end":750,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":345166,"byte_end":345171,"line_start":787,"line_end":787,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":346941,"byte_end":346953,"line_start":837,"line_end":837,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":351021,"byte_end":351037,"line_start":949,"line_end":949,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":351494,"byte_end":351511,"line_start":967,"line_end":967,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":352118,"byte_end":352135,"line_start":987,"line_end":987,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":353609,"byte_end":353626,"line_start":1040,"line_end":1040,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":354582,"byte_end":354592,"line_start":1073,"line_end":1073,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":357910,"byte_end":357924,"line_start":1166,"line_end":1166,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":358363,"byte_end":358378,"line_start":1184,"line_end":1184,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":359632,"byte_end":359647,"line_start":1227,"line_end":1227,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":360379,"byte_end":360394,"line_start":1253,"line_end":1253,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":362556,"byte_end":362568,"line_start":1310,"line_end":1310,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":364732,"byte_end":364742,"line_start":1375,"line_end":1375,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":366659,"byte_end":366662,"line_start":1423,"line_end":1423,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":369016,"byte_end":369023,"line_start":1495,"line_end":1495,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":3121},{"krate":0,"index":3122},{"krate":0,"index":3123},{"krate":0,"index":3124},{"krate":0,"index":3125},{"krate":0,"index":3126},{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3132},{"krate":0,"index":3133},{"krate":0,"index":3134},{"krate":0,"index":3135},{"krate":0,"index":3136},{"krate":0,"index":3137},{"krate":0,"index":3138},{"krate":0,"index":3139},{"krate":0,"index":3140},{"krate":0,"index":3141},{"krate":0,"index":3142}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":598489,"byte_end":598502,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":605508,"byte_end":605514,"line_start":180,"line_end":180,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":607385,"byte_end":607398,"line_start":38,"line_end":38,"column_start":23,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":607425,"byte_end":607438,"line_start":40,"line_end":40,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":608062,"byte_end":608078,"line_start":58,"line_end":58,"column_start":23,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":608105,"byte_end":608121,"line_start":60,"line_end":60,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":612563,"byte_end":612573,"line_start":187,"line_end":187,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1352137,"byte_end":1352149,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355004,"byte_end":1355016,"line_start":204,"line_end":204,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355696,"byte_end":1355705,"line_start":227,"line_end":227,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1571},{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355971,"byte_end":1355980,"line_start":238,"line_end":238,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1358284,"byte_end":1358297,"line_start":302,"line_end":302,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1359091,"byte_end":1359102,"line_start":331,"line_end":331,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1359258,"byte_end":1359271,"line_start":337,"line_end":337,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1361233,"byte_end":1361244,"line_start":391,"line_end":391,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7294,"byte_end":7297,"line_start":164,"line_end":164,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":12181,"byte_end":12186,"line_start":11,"line_end":11,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":17}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":12196,"byte_end":12201,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":157}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7330,"byte_end":7333,"line_start":167,"line_end":167,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":446}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":314552,"byte_end":314559,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":523}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":314569,"byte_end":314574,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":626}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":314584,"byte_end":314593,"line_start":21,"line_end":21,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":660}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/lib.rs","byte_start":7388,"byte_end":7392,"line_start":171,"line_end":171,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1550}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":62812,"byte_end":62821,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":65690,"byte_end":65703,"line_start":119,"line_end":119,"column_start":18,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1631},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":65785,"byte_end":65798,"line_start":125,"line_end":125,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1631},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":74337,"byte_end":74343,"line_start":323,"line_end":323,"column_start":6,"column_end":12},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":75929,"byte_end":75936,"line_start":365,"line_end":365,"column_start":29,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":98463,"byte_end":98470,"line_start":960,"line_end":960,"column_start":29,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":143320,"byte_end":143331,"line_start":2146,"line_end":2146,"column_start":33,"column_end":44},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/parse.rs","byte_start":144349,"byte_end":144360,"line_start":2181,"line_end":2181,"column_start":50,"column_end":61},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1691},"to":{"krate":0,"index":223}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":266747,"byte_end":266761,"line_start":19,"line_end":19,"column_start":18,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1702},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":266845,"byte_end":266859,"line_start":25,"line_end":25,"column_start":6,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":267519,"byte_end":267526,"line_start":49,"line_end":49,"column_start":6,"column_end":13},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":268182,"byte_end":268188,"line_start":70,"line_end":70,"column_start":37,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1712},"to":{"krate":0,"index":223}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/print.rs","byte_start":270779,"byte_end":270785,"line_start":156,"line_end":156,"column_start":25,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":291610,"byte_end":291621,"line_start":201,"line_end":201,"column_start":10,"column_end":21},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":300037,"byte_end":300042,"line_start":437,"line_end":437,"column_start":10,"column_end":15},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":300435,"byte_end":300445,"line_start":450,"line_end":450,"column_start":10,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":301019,"byte_end":301030,"line_start":467,"line_end":467,"column_start":10,"column_end":21},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":301427,"byte_end":301437,"line_start":480,"line_end":480,"column_start":25,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":256},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/visitor.rs","byte_start":301818,"byte_end":301829,"line_start":492,"line_end":492,"column_start":25,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":12943,"byte_end":12948,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":19390,"byte_end":19395,"line_start":181,"line_end":181,"column_start":23,"column_end":28},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1721},"to":{"krate":1,"index":1616}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":21600,"byte_end":21605,"line_start":222,"line_end":222,"column_start":23,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1721},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":21744,"byte_end":21753,"line_start":228,"line_end":228,"column_start":23,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1736},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":25742,"byte_end":25746,"line_start":330,"line_end":330,"column_start":21,"column_end":25},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1813},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":25890,"byte_end":25894,"line_start":336,"line_end":336,"column_start":14,"column_end":18},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1813},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26038,"byte_end":26042,"line_start":342,"line_end":342,"column_start":21,"column_end":25},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1813},"to":{"krate":2,"index":2077}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26683,"byte_end":26691,"line_start":363,"line_end":363,"column_start":21,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1826},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":26915,"byte_end":26923,"line_start":373,"line_end":373,"column_start":14,"column_end":22},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1826},"to":{"krate":2,"index":2066}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":27044,"byte_end":27052,"line_start":379,"line_end":379,"column_start":21,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1826},"to":{"krate":2,"index":2077}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":27165,"byte_end":27169,"line_start":385,"line_end":385,"column_start":6,"column_end":10},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1813},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":28257,"byte_end":28265,"line_start":420,"line_end":420,"column_start":6,"column_end":14},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":30896,"byte_end":30899,"line_start":493,"line_end":493,"column_start":6,"column_end":9},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1868},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":32507,"byte_end":32510,"line_start":544,"line_end":544,"column_start":23,"column_end":26},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1868},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":32892,"byte_end":32903,"line_start":560,"line_end":560,"column_start":6,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":33631,"byte_end":33637,"line_start":584,"line_end":584,"column_start":6,"column_end":12},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":34589,"byte_end":34596,"line_start":614,"line_end":614,"column_start":6,"column_end":13},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1938},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":37204,"byte_end":37218,"line_start":691,"line_end":691,"column_start":6,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2005},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":38074,"byte_end":38079,"line_start":717,"line_end":717,"column_start":6,"column_end":11},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":39770,"byte_end":39784,"line_start":796,"line_end":796,"column_start":6,"column_end":20},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":41572,"byte_end":41584,"line_start":845,"line_end":845,"column_start":6,"column_end":18},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":43094,"byte_end":43112,"line_start":892,"line_end":892,"column_start":6,"column_end":24},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":44375,"byte_end":44383,"line_start":930,"line_end":930,"column_start":6,"column_end":14},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":45975,"byte_end":45987,"line_start":980,"line_end":980,"column_start":6,"column_end":18},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":46819,"byte_end":46832,"line_start":1007,"line_end":1007,"column_start":6,"column_end":19},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":47418,"byte_end":47431,"line_start":1027,"line_end":1027,"column_start":6,"column_end":19},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":51409,"byte_end":51424,"line_start":1164,"line_end":1164,"column_start":6,"column_end":21},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":52311,"byte_end":52316,"line_start":1193,"line_end":1193,"column_start":6,"column_end":11},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":54530,"byte_end":54535,"line_start":1269,"line_end":1269,"column_start":6,"column_end":11},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2490},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56301,"byte_end":56314,"line_start":1330,"line_end":1330,"column_start":6,"column_end":19},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":56956,"byte_end":56959,"line_start":1359,"line_end":1359,"column_start":15,"column_end":18},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1868},"to":{"krate":2,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/ast/mod.rs","byte_start":58811,"byte_end":58819,"line_start":1409,"line_end":1409,"column_start":15,"column_end":23},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2198},"to":{"krate":2,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":304124,"byte_end":304129,"line_start":30,"line_end":30,"column_start":27,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2591},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":304233,"byte_end":304238,"line_start":36,"line_end":36,"column_start":27,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2591},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":304342,"byte_end":304347,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2591},"to":{"krate":1,"index":1616}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":304693,"byte_end":304698,"line_start":54,"line_end":54,"column_start":23,"column_end":28},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2591},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":305699,"byte_end":305708,"line_start":82,"line_end":82,"column_start":35,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2611},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":305986,"byte_end":305995,"line_start":93,"line_end":93,"column_start":35,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2611},"to":{"krate":2,"index":2258}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":306266,"byte_end":306275,"line_start":104,"line_end":104,"column_start":44,"column_end":53},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2611},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/error.rs","byte_start":309062,"byte_end":309067,"line_start":169,"line_end":169,"column_start":10,"column_end":15},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":429},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":397956,"byte_end":397967,"line_start":40,"line_end":40,"column_start":19,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409504,"byte_end":409519,"line_start":327,"line_end":327,"column_start":26,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2642},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409650,"byte_end":409655,"line_start":336,"line_end":336,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409658,"byte_end":409662,"line_start":336,"line_end":336,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409665,"byte_end":409670,"line_start":336,"line_end":336,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":7636},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409673,"byte_end":409680,"line_start":336,"line_end":336,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2206},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409683,"byte_end":409685,"line_start":336,"line_end":336,"column_start":38,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2045},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409688,"byte_end":409697,"line_start":336,"line_end":336,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409700,"byte_end":409710,"line_start":336,"line_end":336,"column_start":55,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":2077},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":409713,"byte_end":409716,"line_start":336,"line_end":336,"column_start":68,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":2066},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":414315,"byte_end":414319,"line_start":467,"line_end":467,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":414322,"byte_end":414327,"line_start":467,"line_end":467,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":414330,"byte_end":414335,"line_start":467,"line_end":467,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":7636},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":414338,"byte_end":414340,"line_start":467,"line_end":467,"column_start":28,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2045},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":414343,"byte_end":414352,"line_start":467,"line_end":467,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":414355,"byte_end":414365,"line_start":467,"line_end":467,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2077},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/interval.rs","byte_start":414368,"byte_end":414371,"line_start":467,"line_end":467,"column_start":58,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":2066},"to":{"krate":0,"index":505}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":417286,"byte_end":417294,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2651},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":443977,"byte_end":443985,"line_start":840,"line_end":840,"column_start":21,"column_end":29},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2651},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444261,"byte_end":444268,"line_start":850,"line_end":850,"column_start":6,"column_end":13},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444766,"byte_end":444773,"line_start":872,"line_end":872,"column_start":20,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2664},"to":{"krate":2,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":444875,"byte_end":444882,"line_start":878,"line_end":878,"column_start":21,"column_end":28},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2664},"to":{"krate":2,"index":2077}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":445021,"byte_end":445028,"line_start":884,"line_end":884,"column_start":21,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2664},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":445295,"byte_end":445302,"line_start":894,"line_end":894,"column_start":22,"column_end":29},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2664},"to":{"krate":2,"index":2249}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":445382,"byte_end":445389,"line_start":900,"line_end":900,"column_start":21,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2664},"to":{"krate":2,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/literal/mod.rs","byte_start":445501,"byte_end":445508,"line_start":907,"line_end":907,"column_start":24,"column_end":31},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2664},"to":{"krate":2,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":471808,"byte_end":471822,"line_start":20,"line_end":20,"column_start":18,"column_end":32},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2674},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":471906,"byte_end":471920,"line_start":26,"line_end":26,"column_start":6,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":472995,"byte_end":473002,"line_start":57,"line_end":57,"column_start":6,"column_end":13},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":473658,"byte_end":473664,"line_start":78,"line_end":78,"column_start":37,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2684},"to":{"krate":0,"index":766}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/print.rs","byte_start":478598,"byte_end":478604,"line_start":212,"line_end":212,"column_start":25,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":483533,"byte_end":483550,"line_start":21,"line_end":21,"column_start":18,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2693},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":483640,"byte_end":483657,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":486796,"byte_end":486806,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2700},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":490016,"byte_end":490024,"line_start":186,"line_end":186,"column_start":6,"column_end":14},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":491527,"byte_end":491538,"line_start":234,"line_end":234,"column_start":26,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2728},"to":{"krate":0,"index":223}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":505792,"byte_end":505803,"line_start":595,"line_end":595,"column_start":14,"column_end":25},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/translate.rs","byte_start":519997,"byte_end":520002,"line_start":996,"line_end":996,"column_start":6,"column_end":11},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":594219,"byte_end":594230,"line_start":98,"line_end":98,"column_start":10,"column_end":21},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/visitor.rs","byte_start":597585,"byte_end":597590,"line_start":192,"line_end":192,"column_start":10,"column_end":15},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":315043,"byte_end":315048,"line_start":36,"line_end":36,"column_start":6,"column_end":11},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":317144,"byte_end":317153,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":318162,"byte_end":318167,"line_start":117,"line_end":117,"column_start":23,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2754},"to":{"krate":1,"index":1616}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":318372,"byte_end":318377,"line_start":125,"line_end":125,"column_start":23,"column_end":28},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2754},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":318516,"byte_end":318525,"line_start":131,"line_end":131,"column_start":23,"column_end":32},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2769},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":322410,"byte_end":322413,"line_start":217,"line_end":217,"column_start":6,"column_end":9},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2796},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":341748,"byte_end":341755,"line_start":693,"line_end":693,"column_start":6,"column_end":13},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":342964,"byte_end":342967,"line_start":729,"line_end":729,"column_start":23,"column_end":26},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2796},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":343686,"byte_end":343693,"line_start":750,"line_end":750,"column_start":6,"column_end":13},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2848},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":345166,"byte_end":345171,"line_start":787,"line_end":787,"column_start":6,"column_end":11},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2866},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":346941,"byte_end":346953,"line_start":837,"line_end":837,"column_start":6,"column_end":18},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":351021,"byte_end":351037,"line_start":949,"line_end":949,"column_start":23,"column_end":39},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2897},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":351494,"byte_end":351511,"line_start":967,"line_end":967,"column_start":21,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2904},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":352118,"byte_end":352135,"line_start":987,"line_end":987,"column_start":19,"column_end":36},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2904},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":353609,"byte_end":353626,"line_start":1040,"line_end":1040,"column_start":6,"column_end":23},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2904},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":354582,"byte_end":354592,"line_start":1073,"line_end":1073,"column_start":6,"column_end":16},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":357910,"byte_end":357924,"line_start":1166,"line_end":1166,"column_start":23,"column_end":37},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2944},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":358363,"byte_end":358378,"line_start":1184,"line_end":1184,"column_start":19,"column_end":34},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2951},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":359632,"byte_end":359647,"line_start":1227,"line_end":1227,"column_start":6,"column_end":21},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":360379,"byte_end":360394,"line_start":1253,"line_end":1253,"column_start":21,"column_end":36},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2951},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":362556,"byte_end":362568,"line_start":1310,"line_end":1310,"column_start":6,"column_end":18},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":364732,"byte_end":364742,"line_start":1375,"line_end":1375,"column_start":6,"column_end":16},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":366659,"byte_end":366662,"line_start":1423,"line_end":1423,"column_start":15,"column_end":18},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2796},"to":{"krate":2,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/hir/mod.rs","byte_start":369016,"byte_end":369023,"line_start":1495,"line_end":1495,"column_start":6,"column_end":13},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":3108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":598489,"byte_end":598502,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":3143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/parser.rs","byte_start":605508,"byte_end":605514,"line_start":180,"line_end":180,"column_start":6,"column_end":12},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":3152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":607385,"byte_end":607398,"line_start":38,"line_end":38,"column_start":23,"column_end":36},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":3168},"to":{"krate":1,"index":1616}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":607425,"byte_end":607438,"line_start":40,"line_end":40,"column_start":23,"column_end":36},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":3168},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":608062,"byte_end":608078,"line_start":58,"line_end":58,"column_start":23,"column_end":39},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3173},"to":{"krate":1,"index":1616}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":608105,"byte_end":608121,"line_start":60,"line_end":60,"column_start":23,"column_end":39},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":3173},"to":{"krate":2,"index":7641}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/unicode.rs","byte_start":612563,"byte_end":612573,"line_start":187,"line_end":187,"column_start":10,"column_end":20},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":3178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1352137,"byte_end":1352149,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355004,"byte_end":1355016,"line_start":204,"line_end":204,"column_start":21,"column_end":33},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3214},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355696,"byte_end":1355705,"line_start":227,"line_end":227,"column_start":6,"column_end":15},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":3254},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1355971,"byte_end":1355980,"line_start":238,"line_end":238,"column_start":21,"column_end":30},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":3254},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1358284,"byte_end":1358297,"line_start":302,"line_end":302,"column_start":6,"column_end":19},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1359091,"byte_end":1359102,"line_start":331,"line_end":331,"column_start":21,"column_end":32},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1581},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1359258,"byte_end":1359271,"line_start":337,"line_end":337,"column_start":19,"column_end":32},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1575},"to":{"krate":2,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.15/src/utf8.rs","byte_start":1361233,"byte_end":1361244,"line_start":391,"line_end":391,"column_start":6,"column_end":17},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1581},"to":{"krate":4294967295,"index":4294967295}}]}