{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3","program":"/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","postcard","/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=1","-C","debuginfo=2","-C","debug-assertions=on","-C","metadata=035e08a24d310be4","-C","extra-filename=-035e08a24d310be4","--out-dir","/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/debug/deps","--extern","byteorder=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libbyteorder-f5353c39aca55ae2.rmeta","--extern","heapless=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libheapless-a3ba2b343da434eb.rmeta","--extern","cobs=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libpostcard_cobs-c679aab49e1ab173.rmeta","--extern","serde=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libserde-910ddf5a52fff262.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libpostcard-035e08a24d310be4.rmeta"},"prelude":{"crate_id":{"name":"postcard","disambiguator":[15869919376149444832,2008025853219764659]},"crate_root":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src","external_crates":[{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6179814377341127279,15810806659018497542]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10095233927134609311,1311941312663600358]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4961934893482737060,7310190255483934973]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","num":4,"id":{"name":"postcard_cobs","disambiguator":[4651363012270455008,10365791892872386414]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","num":5,"id":{"name":"serde","disambiguator":[13265372121167967737,8845120422868952213]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","num":6,"id":{"name":"serde_derive","disambiguator":[12714016120798761864,9553498966570094254]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","num":7,"id":{"name":"byteorder","disambiguator":[10572061634345972678,9134358399836345157]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":8,"id":{"name":"heapless","disambiguator":[17066105653715450518,10541593554529777001]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":9,"id":{"name":"generic_array","disambiguator":[15072705170787171301,621295125097607675]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":10,"id":{"name":"typenum","disambiguator":[14831840422485002281,5478024780313387860]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":11,"id":{"name":"hash32","disambiguator":[6801716316752500739,18289726874687913203]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":12,"id":{"name":"as_slice","disambiguator":[13485168948194180944,7644999116958171601]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":13,"id":{"name":"generic_array","disambiguator":[10064259495254846354,2926175795816830589]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","num":14,"id":{"name":"stable_deref_trait","disambiguator":[2071159815372964731,8910106929597806303]}}],"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":0,"byte_end":4984,"line_start":1,"line_end":135,"column_start":1,"column_end":42}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":20},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4658,"byte_end":4670,"line_start":126,"line_end":126,"column_start":27,"column_end":39},"alias_span":null,"name":"Deserializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":135},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4685,"byte_end":4695,"line_start":127,"line_end":127,"column_start":14,"column_end":24},"alias_span":null,"name":"from_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":138},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4697,"byte_end":4712,"line_start":127,"line_end":127,"column_start":26,"column_end":41},"alias_span":null,"name":"from_bytes_cobs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4714,"byte_end":4729,"line_start":127,"line_end":127,"column_start":43,"column_end":58},"alias_span":null,"name":"take_from_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":142},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4731,"byte_end":4751,"line_start":127,"line_end":127,"column_start":60,"column_end":80},"alias_span":null,"name":"take_from_bytes_cobs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":441},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4770,"byte_end":4775,"line_start":128,"line_end":128,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":156},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4777,"byte_end":4783,"line_start":128,"line_end":128,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":179},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4805,"byte_end":4812,"line_start":130,"line_end":130,"column_start":5,"column_end":12},"alias_span":null,"name":"flavors","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":401},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4814,"byte_end":4835,"line_start":130,"line_end":130,"column_start":14,"column_end":35},"alias_span":null,"name":"serialize_with_flavor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4849,"byte_end":4859,"line_start":130,"line_end":130,"column_start":49,"column_end":59},"alias_span":null,"name":"Serializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":391},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4861,"byte_end":4869,"line_start":130,"line_end":130,"column_start":61,"column_end":69},"alias_span":null,"name":"to_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":387},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4871,"byte_end":4884,"line_start":130,"line_end":130,"column_start":71,"column_end":84},"alias_span":null,"name":"to_slice_cobs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4886,"byte_end":4892,"line_start":130,"line_end":130,"column_start":86,"column_end":92},"alias_span":null,"name":"to_vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":395},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4898,"byte_end":4909,"line_start":131,"line_end":131,"column_start":5,"column_end":16},"alias_span":null,"name":"to_vec_cobs","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":0,"byte_end":4984,"line_start":1,"line_end":135,"column_start":1,"column_end":42},"name":"","qualname":"::","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":149},{"krate":0,"index":165},{"krate":0,"index":406},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":430},{"krate":0,"index":433}],"decl_id":null,"docs":" # Postcard","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4558,"byte_end":4564,"line_start":118,"line_end":118,"column_start":50,"column_end":56}},{"value":"warn(missing_docs)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/lib.rs","byte_start":4567,"byte_end":4589,"line_start":119,"line_end":119,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17611,"byte_end":17623,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"Deserializer","qualname":"::de::deserializer::Deserializer","value":"Deserializer {  }","parent":null,"children":[{"krate":0,"index":22}],"decl_id":null,"docs":" A structure for deserializing a postcard message. For now, Deserializer does not\n implement the same Flavor interface as the serializer does, as messages are typically\n easier to deserialize in place. This may change in the future for consistency, or\n to support items that cannot be deserialized in-place, such as compressed message types\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17879,"byte_end":17889,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<Deserializer>::from_bytes","value":"fn (input: &'de [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Obtain a Deserializer from a slice of bytes\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":135},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5280,"byte_end":5290,"line_start":11,"line_end":11,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::de::from_bytes","value":"fn <'a, T> (s: &'a [u8]) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a message of type `T` from a byte slice. The unused portion (if any)\n of the byte slice is returned for further usage\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":138},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5617,"byte_end":5632,"line_start":22,"line_end":22,"column_start":8,"column_end":23},"name":"from_bytes_cobs","qualname":"::de::from_bytes_cobs","value":"fn <'a, T> (s: &'a mut [u8]) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a message of type `T` from a cobs-encoded byte slice. The\n unused portion (if any) of the byte slice is not returned.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":5969,"byte_end":5989,"line_start":32,"line_end":32,"column_start":8,"column_end":28},"name":"take_from_bytes_cobs","qualname":"::de::take_from_bytes_cobs","value":"fn <'a, T> (s: &'a mut [u8]) -> Result<(T, &'a mut [u8])>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a message of type `T` from a cobs-encoded byte slice. The\n unused portion (if any) of the byte slice is returned for further usage\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/mod.rs","byte_start":6385,"byte_end":6400,"line_start":43,"line_end":43,"column_start":8,"column_end":23},"name":"take_from_bytes","qualname":"::de::take_from_bytes","value":"fn <'a, T> (s: &'a [u8]) -> Result<(T, &'a [u8])>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a message of type `T` from a byte slice. The unused portion (if any)\n of the byte slice is returned for further usage\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":442},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29690,"byte_end":29703,"line_start":9,"line_end":9,"column_start":5,"column_end":18},"name":"WontImplement","qualname":"::error::Error::WontImplement","value":"Error::WontImplement","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" This is a feature that PostCard will never implement\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":444},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29786,"byte_end":29803,"line_start":11,"line_end":11,"column_start":5,"column_end":22},"name":"NotYetImplemented","qualname":"::error::Error::NotYetImplemented","value":"Error::NotYetImplemented","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" This is a feature that Postcard intends to support, but does not yet\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":446},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29846,"byte_end":29865,"line_start":13,"line_end":13,"column_start":5,"column_end":24},"name":"SerializeBufferFull","qualname":"::error::Error::SerializeBufferFull","value":"Error::SerializeBufferFull","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" The serialize buffer is full\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":448},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29918,"byte_end":29943,"line_start":15,"line_end":15,"column_start":5,"column_end":30},"name":"SerializeSeqLengthUnknown","qualname":"::error::Error::SerializeSeqLengthUnknown","value":"Error::SerializeSeqLengthUnknown","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" The length of a sequence must be known\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":450},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29999,"byte_end":30023,"line_start":17,"line_end":17,"column_start":5,"column_end":29},"name":"DeserializeUnexpectedEnd","qualname":"::error::Error::DeserializeUnexpectedEnd","value":"Error::DeserializeUnexpectedEnd","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Hit the end of buffer, expected more data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":452},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30115,"byte_end":30135,"line_start":19,"line_end":19,"column_start":5,"column_end":25},"name":"DeserializeBadVarint","qualname":"::error::Error::DeserializeBadVarint","value":"Error::DeserializeBadVarint","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found a varint that didn't terminate. Is the usize too big for this platform?\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":454},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30181,"byte_end":30199,"line_start":21,"line_end":21,"column_start":5,"column_end":23},"name":"DeserializeBadBool","qualname":"::error::Error::DeserializeBadBool","value":"Error::DeserializeBadBool","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found a bool that wasn't 0 or 1\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":456},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30243,"byte_end":30261,"line_start":23,"line_end":23,"column_start":5,"column_end":23},"name":"DeserializeBadChar","qualname":"::error::Error::DeserializeBadChar","value":"Error::DeserializeBadChar","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found an invalid unicode char\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":458},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30304,"byte_end":30322,"line_start":25,"line_end":25,"column_start":5,"column_end":23},"name":"DeserializeBadUtf8","qualname":"::error::Error::DeserializeBadUtf8","value":"Error::DeserializeBadUtf8","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Tried to parse invalid utf-8\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":460},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30384,"byte_end":30404,"line_start":27,"line_end":27,"column_start":5,"column_end":25},"name":"DeserializeBadOption","qualname":"::error::Error::DeserializeBadOption","value":"Error::DeserializeBadOption","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found an Option discriminant that wasn't 0 or 1\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":462},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30473,"byte_end":30491,"line_start":29,"line_end":29,"column_start":5,"column_end":23},"name":"DeserializeBadEnum","qualname":"::error::Error::DeserializeBadEnum","value":"Error::DeserializeBadEnum","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Found an enum discriminant that was > u32::max_value()\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":464},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30544,"byte_end":30566,"line_start":31,"line_end":31,"column_start":5,"column_end":27},"name":"DeserializeBadEncoding","qualname":"::error::Error::DeserializeBadEncoding","value":"Error::DeserializeBadEncoding","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" The original data was not well encoded\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30606,"byte_end":30620,"line_start":33,"line_end":33,"column_start":5,"column_end":19},"name":"SerdeSerCustom","qualname":"::error::Error::SerdeSerCustom","value":"Error::SerdeSerCustom","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Serde Serialization Error\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":468},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30662,"byte_end":30675,"line_start":35,"line_end":35,"column_start":5,"column_end":18},"name":"SerdeDeCustom","qualname":"::error::Error::SerdeDeCustom","value":"Error::SerdeDeCustom","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Serde Deserialization Error\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":441},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":29617,"byte_end":29622,"line_start":7,"line_end":7,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{WontImplement, NotYetImplemented, SerializeBufferFull, SerializeSeqLengthUnknown, DeserializeUnexpectedEnd, DeserializeBadVarint, DeserializeBadBool, DeserializeBadChar, DeserializeBadUtf8, DeserializeBadOption, DeserializeBadEnum, DeserializeBadEncoding, SerdeSerCustom, SerdeDeCustom}","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468}],"decl_id":null,"docs":" This is the error type used by Postcard\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":156},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32205,"byte_end":32211,"line_start":69,"line_end":69,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"::core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" This is the Result type used by Postcard.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":179},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flavors","qualname":"::ser::flavors","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":211},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":230},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":244},{"krate":0,"index":248}],"decl_id":null,"docs":" # Flavors - Plugins for `postcard`","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":191},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51472,"byte_end":51481,"line_start":83,"line_end":83,"column_start":11,"column_end":20},"name":"SerFlavor","qualname":"::ser::flavors::SerFlavor","value":"SerFlavor","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" The SerFlavor trait acts as a combinator/middleware interface that can be used to pass bytes\n through storage or modification flavors. See the module level documentation for more information\n and examples.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":192},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":51773,"byte_end":51779,"line_start":87,"line_end":87,"column_start":10,"column_end":16},"name":"Output","qualname":"::ser::flavors::SerFlavor::Output","value":"type Output;","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" The `Output` type is what this flavor \"resolves\" to when the serialization is complete.\n For storage flavors, this is typically a concrete type. For modification flavors, this is\n typically a generic parameter for the storage flavor they are wrapped around.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52021,"byte_end":52031,"line_start":92,"line_end":92,"column_start":8,"column_end":18},"name":"try_extend","qualname":"::ser::flavors::SerFlavor::try_extend","value":"fn (&mut self, data: &[u8]) -> core::result::Result<(), ()>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" The try_extend() trait method can be implemented when there is a more efficient way of processing\n multiple bytes at once, such as copying a slice to the output, rather than iterating over one byte\n at a time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52301,"byte_end":52309,"line_start":99,"line_end":99,"column_start":8,"column_end":16},"name":"try_push","qualname":"::ser::flavors::SerFlavor::try_push","value":"fn (&mut self, data: u8) -> core::result::Result<(), ()>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" The try_push() trait method can be used to push a single byte to be modified and/or stored\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":52539,"byte_end":52546,"line_start":103,"line_end":103,"column_start":8,"column_end":15},"name":"release","qualname":"::ser::flavors::SerFlavor::release","value":"fn (self) -> core::result::Result<Self::Output, ()>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" The release() trait method finalizes the modification or storage operation, and resolved into\n the type defined by `SerFlavor::Output` associated type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":198},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53087,"byte_end":53092,"line_start":116,"line_end":116,"column_start":12,"column_end":17},"name":"Slice","qualname":"::ser::flavors::Slice","value":"Slice {  }","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"decl_id":null,"docs":" The `Slice` flavor is a storage flavor, storing the serialized (or otherwise modified) bytes into a plain\n `[u8]` slice. The `Slice` flavor resolves into a sub-slice of the original slice buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53237,"byte_end":53240,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<Slice>::new","value":"fn (buf: &'a mut [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Slice` flavor from a given backing buffer\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":218},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54606,"byte_end":54610,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"HVec","qualname":"::ser::flavors::HVec","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `HVec` flavor is a wrapper type around a `heapless::Vec`. This is a stack\n allocated data structure, with a fixed maximum size and variable amount of contents\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57212,"byte_end":57216,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"Cobs","qualname":"::ser::flavors::Cobs","value":"Cobs {  }","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"decl_id":null,"docs":" The `Cobs` flavor implements [Consistent Overhead Byte Stuffing] on\n the serialized data. The output of this flavor includes the termination/sentinel\n byte of `0x00`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57548,"byte_end":57555,"line_start":297,"line_end":297,"column_start":12,"column_end":19},"name":"try_new","qualname":"<Cobs<B>>::try_new","value":"fn (mut bee: B) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Cobs modifier Flavor. If there is insufficient space\n to push the leading header byte, the method will return an Error\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59206,"byte_end":59216,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"Serializer","qualname":"::ser::serializer::Serializer","value":"Serializer { output }","parent":null,"children":[{"krate":0,"index":269}],"decl_id":null,"docs":" A `serde` compatible serializer, generic over \"Flavors\" of serializing plugins.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":269},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/serializer.rs","byte_start":59366,"byte_end":59372,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"name":"output","qualname":"::ser::serializer::Serializer::output","value":"F","parent":{"krate":0,"index":267},"children":[],"decl_id":null,"docs":" This is the Flavor(s) that will be used to modify or store any bytes generated\n by serialization\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":387},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":33906,"byte_end":33919,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"to_slice_cobs","qualname":"::ser::to_slice_cobs","value":"fn <'a, 'b, T> (value: &'b T, buf: &'a mut [u8]) -> Result<&'a mut [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a `T` to the given slice, with the resulting slice containing\n data in a serialized then COBS encoded format. The terminating sentinel `0x00` byte is included\n in the output buffer.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":391},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":35134,"byte_end":35142,"line_start":83,"line_end":83,"column_start":8,"column_end":16},"name":"to_slice","qualname":"::ser::to_slice","value":"fn <'a, 'b, T> (value: &'b T, buf: &'a mut [u8]) -> Result<&'a mut [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a `T` to the given slice, with the resulting slice containing\n data in a serialized format.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":395},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":36343,"byte_end":36354,"line_start":116,"line_end":116,"column_start":8,"column_end":19},"name":"to_vec_cobs","qualname":"::ser::to_vec_cobs","value":"fn <B, T> (value: &T) -> Result<Vec<u8, B>>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a `T` to a `heapless::Vec<u8>`, with the `Vec` containing\n data in a serialized then COBS encoded format. The terminating sentinel\n `0x00` byte is included in the output `Vec`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":398},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":37402,"byte_end":37408,"line_start":149,"line_end":149,"column_start":8,"column_end":14},"name":"to_vec","qualname":"::ser::to_vec","value":"fn <B, T> (value: &T) -> Result<Vec<u8, B>>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a `T` to a `heapless::Vec<u8>`, with the `Vec` containing\n data in a serialized format.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":401},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":39743,"byte_end":39764,"line_start":230,"line_end":230,"column_start":8,"column_end":29},"name":"serialize_with_flavor","qualname":"::ser::serialize_with_flavor","value":"fn <T, F, O> (value: &T, flavor: F) -> Result<O>","parent":null,"children":[],"decl_id":null,"docs":" `serialize_with_flavor()` has three generic parameters, `T, F, O`.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17796,"byte_end":17808,"line_start":23,"line_end":23,"column_start":11,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17968,"byte_end":17980,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":19008,"byte_end":19017,"line_start":65,"line_end":65,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30697,"byte_end":30702,"line_start":38,"line_end":38,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32279,"byte_end":32284,"line_start":71,"line_end":71,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32422,"byte_end":32427,"line_start":80,"line_end":80,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32568,"byte_end":32573,"line_start":89,"line_end":89,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53150,"byte_end":53155,"line_start":121,"line_end":121,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53332,"byte_end":53337,"line_start":128,"line_end":128,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54096,"byte_end":54101,"line_start":162,"line_end":162,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54233,"byte_end":54238,"line_start":170,"line_end":170,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54671,"byte_end":54675,"line_start":184,"line_end":184,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55161,"byte_end":55165,"line_start":205,"line_end":205,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55310,"byte_end":55314,"line_start":213,"line_end":213,"column_start":46,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55444,"byte_end":55448,"line_start":219,"line_end":219,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57325,"byte_end":57329,"line_start":291,"line_end":291,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57782,"byte_end":57786,"line_start":306,"line_end":306,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/varint.rs","byte_start":68131,"byte_end":68142,"line_start":8,"line_end":8,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/varint.rs","byte_start":68725,"byte_end":68736,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/mod.rs","byte_start":32840,"byte_end":32847,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":179}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17796,"byte_end":17808,"line_start":23,"line_end":23,"column_start":11,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":17968,"byte_end":17980,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/de/deserializer.rs","byte_start":19008,"byte_end":19017,"line_start":65,"line_end":65,"column_start":47,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":30},"to":{"krate":5,"index":971}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":30697,"byte_end":30702,"line_start":38,"line_end":38,"column_start":18,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":441},"to":{"krate":1,"index":7648}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32279,"byte_end":32284,"line_start":71,"line_end":71,"column_start":28,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":441},"to":{"krate":5,"index":6544}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32422,"byte_end":32427,"line_start":80,"line_end":80,"column_start":27,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":441},"to":{"krate":5,"index":6028}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/error.rs","byte_start":32568,"byte_end":32573,"line_start":89,"line_end":89,"column_start":31,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":441},"to":{"krate":5,"index":1549}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53150,"byte_end":53155,"line_start":121,"line_end":121,"column_start":10,"column_end":15},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":53332,"byte_end":53337,"line_start":128,"line_end":128,"column_start":24,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":198},"to":{"krate":0,"index":191}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54096,"byte_end":54101,"line_start":162,"line_end":162,"column_start":27,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54233,"byte_end":54238,"line_start":170,"line_end":170,"column_start":30,"column_end":35},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":1784}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":54671,"byte_end":54675,"line_start":184,"line_end":184,"column_start":27,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":218},"to":{"krate":0,"index":191}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55161,"byte_end":55165,"line_start":205,"line_end":205,"column_start":43,"column_end":47},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55310,"byte_end":55314,"line_start":213,"line_end":213,"column_start":46,"column_end":50},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":1784}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":55444,"byte_end":55448,"line_start":219,"line_end":219,"column_start":38,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57325,"byte_end":57329,"line_start":291,"line_end":291,"column_start":9,"column_end":13},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/ser/flavors.rs","byte_start":57782,"byte_end":57786,"line_start":306,"line_end":306,"column_start":27,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":240},"to":{"krate":0,"index":191}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/varint.rs","byte_start":68131,"byte_end":68142,"line_start":8,"line_end":8,"column_start":20,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":478},"to":{"krate":5,"index":1212}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-0.4.3/src/varint.rs","byte_start":68725,"byte_end":68736,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":478},"to":{"krate":4294967295,"index":4294967295}}]}