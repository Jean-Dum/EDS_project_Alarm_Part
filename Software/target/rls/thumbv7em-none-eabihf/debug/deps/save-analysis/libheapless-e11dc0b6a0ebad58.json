{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4","program":"/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","heapless","/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=1","-C","debuginfo=2","-C","debug-assertions=on","-C","metadata=e11dc0b6a0ebad58","-C","extra-filename=-e11dc0b6a0ebad58","--out-dir","/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/debug/deps","--extern","as_slice=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libas_slice-75318bb39bdb7509.rmeta","--extern","generic_array=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libgeneric_array-2218944724366ea7.rmeta","--extern","hash32=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libhash32-f837a5ce37208f0b.rmeta","--cap-lints","allow","--cfg","armv7m","--error-format=json","--sysroot","/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libheapless-e11dc0b6a0ebad58.rmeta"},"prelude":{"crate_id":{"name":"heapless","disambiguator":[18425804348754161185,6897163505607791442]},"crate_root":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src","external_crates":[{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6179814377341127279,15810806659018497542]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10095233927134609311,1311941312663600358]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4961934893482737060,7310190255483934973]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":4,"id":{"name":"as_slice","disambiguator":[13485168948194180944,7644999116958171601]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":5,"id":{"name":"generic_array","disambiguator":[10064259495254846354,2926175795816830589]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":6,"id":{"name":"typenum","disambiguator":[14831840422485002281,5478024780313387860]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":7,"id":{"name":"generic_array","disambiguator":[15072705170787171301,621295125097607675]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":8,"id":{"name":"stable_deref_trait","disambiguator":[2071159815372964731,8910106929597806303]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":9,"id":{"name":"generic_array","disambiguator":[12868271793532480167,7506425241862187012]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":10,"id":{"name":"hash32","disambiguator":[6801716316752500739,18289726874687913203]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","num":11,"id":{"name":"byteorder","disambiguator":[10572061634345972678,9134358399836345157]}}],"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":0,"byte_end":4896,"line_start":1,"line_end":135,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":842},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4408,"byte_end":4418,"line_start":108,"line_end":108,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":6,"index":2001},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4452,"byte_end":4458,"line_start":109,"line_end":109,"column_start":33,"column_end":39},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":9,"index":327},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4483,"byte_end":4494,"line_start":110,"line_end":110,"column_start":24,"column_end":35},"alias_span":null,"name":"ArrayLength","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":43},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4515,"byte_end":4526,"line_start":111,"line_end":111,"column_start":20,"column_end":31},"alias_span":null,"name":"FnvIndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4528,"byte_end":4536,"line_start":111,"line_end":111,"column_start":33,"column_end":41},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4558,"byte_end":4569,"line_start":112,"line_end":112,"column_start":20,"column_end":31},"alias_span":null,"name":"FnvIndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":281},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4571,"byte_end":4579,"line_start":112,"line_end":112,"column_start":33,"column_end":41},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":438},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4602,"byte_end":4611,"line_start":113,"line_end":113,"column_start":21,"column_end":30},"alias_span":null,"name":"LinearMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":596},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4629,"byte_end":4635,"line_start":114,"line_end":114,"column_start":17,"column_end":23},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":686},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4650,"byte_end":4653,"line_start":115,"line_end":115,"column_start":14,"column_end":17},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1117},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":145060,"byte_end":145068,"line_start":10,"line_end":10,"column_start":23,"column_end":31},"alias_span":null,"name":"Consumer","value":"","parent":{"krate":0,"index":1084}},{"kind":"Use","ref_id":{"krate":0,"index":1131},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":145070,"byte_end":145078,"line_start":10,"line_end":10,"column_start":33,"column_end":41},"alias_span":null,"name":"Producer","value":"","parent":{"krate":0,"index":1084}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":0,"byte_end":4896,"line_start":1,"line_end":135,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":261},{"krate":0,"index":428},{"krate":0,"index":581},{"krate":0,"index":673},{"krate":0,"index":823},{"krate":0,"index":906},{"krate":0,"index":1084},{"krate":0,"index":1273},{"krate":0,"index":1288}],"decl_id":null,"docs":" `static` friendly data structures that don't require dynamic memory allocation","sig":null,"attributes":[{"value":"allow(warnings)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4019,"byte_end":4038,"line_start":89,"line_end":89,"column_start":1,"column_end":20}},{"value":"deny(missing_docs)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4039,"byte_end":4061,"line_start":90,"line_end":90,"column_start":1,"column_end":23}},{"value":"deny(warnings)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4062,"byte_end":4080,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"no_std","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4196,"byte_end":4206,"line_start":94,"line_end":94,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":8860,"byte_end":8871,"line_start":15,"line_end":15,"column_start":10,"column_end":21},"name":"FnvIndexMap","qualname":"::indexmap::FnvIndexMap","value":"IndexMap<K, V, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" An `IndexMap` using the default FNV hasher\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1329},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":9295,"byte_end":9301,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::indexmap::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1339},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":9420,"byte_end":9423,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"Pos","qualname":"::indexmap::Pos","value":"Pos {  }","parent":null,"children":[{"krate":0,"index":1340}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":18948,"byte_end":18956,"line_start":328,"line_end":328,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::indexmap::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94}],"decl_id":null,"docs":" Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":19495,"byte_end":19498,"line_start":347,"line_end":347,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V, N, BuildHasherDefault<S>>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexMap`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":19873,"byte_end":19881,"line_start":363,"line_end":363,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, N, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":20365,"byte_end":20369,"line_start":382,"line_end":382,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, N, S>>::keys","value":"fn (&self) -> impl Iterator<Item = &K>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":20913,"byte_end":20919,"line_start":401,"line_end":401,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, N, S>>::values","value":"fn (&self) -> impl Iterator<Item = &V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":21571,"byte_end":21581,"line_start":424,"line_end":424,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, N, S>>::values_mut","value":"fn (&mut self) -> impl Iterator<Item = &mut V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":22175,"byte_end":22179,"line_start":443,"line_end":443,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, N, S>>::iter","value":"fn (&self) -> Iter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":22826,"byte_end":22834,"line_start":468,"line_end":468,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, N, S>>::iter_mut","value":"fn (&mut self) -> IterMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":23393,"byte_end":23396,"line_start":490,"line_end":490,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, N, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":23812,"byte_end":23820,"line_start":507,"line_end":507,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, N, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":24238,"byte_end":24243,"line_start":524,"line_end":524,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, N, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":24957,"byte_end":24960,"line_start":547,"line_end":547,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, N, S>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":25798,"byte_end":25810,"line_start":574,"line_end":574,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, N, S>>::contains_key","value":"fn <Q> (&self, key: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":26579,"byte_end":26586,"line_start":602,"line_end":602,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, N, S>>::get_mut","value":"fn <'v, Q> (&'v mut self, key: &Q) -> Option<&'v mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":27931,"byte_end":27937,"line_start":642,"line_end":642,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, N, S>>::insert","value":"fn (&mut self, key: K, value: V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":28900,"byte_end":28906,"line_start":672,"line_end":672,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, N, S>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":29447,"byte_end":29458,"line_start":688,"line_end":688,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, N, S>>::swap_remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return its value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":229},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":34251,"byte_end":34255,"line_start":887,"line_end":887,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexmap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":233}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":34752,"byte_end":34759,"line_start":919,"line_end":919,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::indexmap::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":250}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":278},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":37008,"byte_end":37019,"line_start":12,"line_end":12,"column_start":10,"column_end":21},"name":"FnvIndexSet","qualname":"::indexset::FnvIndexSet","value":"IndexSet<T, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" An `IndexSet` using the default FNV hasher\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":281},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":38047,"byte_end":38055,"line_start":47,"line_end":47,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::indexset::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":285}],"decl_id":null,"docs":" Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":38413,"byte_end":38416,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T, N, BuildHasherDefault<S>>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexSet`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":38933,"byte_end":38941,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, N, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":39455,"byte_end":39459,"line_start":107,"line_end":107,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, N, S>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":40490,"byte_end":40500,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, N, S>>::difference","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> Difference<'a, T, N2, S2>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference, i.e. the values that are in `self` but not in\n `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":41668,"byte_end":41688,"line_start":175,"line_end":175,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, N, S>>::symmetric_difference","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> impl Iterator<Item = &'a T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference, i.e. the values that are in `self`\n or in `other` but not in both.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":42688,"byte_end":42700,"line_start":206,"line_end":206,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, N, S>>::intersection","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> Intersection<'a, T, N2, S2>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection, i.e. the values that are both in `self` and\n `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":43708,"byte_end":43713,"line_start":240,"line_end":240,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, N, S>>::union","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> impl Iterator<Item = &'a T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union, i.e. all the values in `self` or `other`, without\n duplicates.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":44339,"byte_end":44342,"line_start":264,"line_end":264,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, N, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":44747,"byte_end":44755,"line_start":281,"line_end":281,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, N, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":45140,"byte_end":45145,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, N, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":45716,"byte_end":45724,"line_start":317,"line_end":317,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, N, S>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":46480,"byte_end":46491,"line_start":343,"line_end":343,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, N, S>>::is_disjoint","value":"fn <N2, S2> (&self, other: &IndexSet<T, N2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`. This is equivalent to\n checking for an empty intersection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":47318,"byte_end":47327,"line_start":369,"line_end":369,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, N, S>>::is_subset","value":"fn <N2, S2> (&self, other: &IndexSet<T, N2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another, i.e. `other` contains at least all the\n values in `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":48205,"byte_end":48216,"line_start":398,"line_end":398,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, N, S>>::is_superset","value":"fn <N2, S2> (&self, other: &IndexSet<T, N2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":"\n # Examples","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":48945,"byte_end":48951,"line_start":424,"line_end":424,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, N, S>>::insert","value":"fn (&mut self, value: T) -> Result<bool, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":49695,"byte_end":49701,"line_start":448,"line_end":448,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, N, S>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns `true` if the value was present in the set.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":386},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":52351,"byte_end":52355,"line_start":565,"line_end":565,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexset::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":389}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":400},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":52764,"byte_end":52774,"line_start":594,"line_end":594,"column_start":12,"column_end":22},"name":"Difference","qualname":"::indexset::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":414},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":53397,"byte_end":53409,"line_start":622,"line_end":622,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::indexset::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":438},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":54343,"byte_end":54352,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"LinearMap","qualname":"::linear_map::LinearMap","value":"LinearMap {  }","parent":null,"children":[{"krate":0,"index":442}],"decl_id":null,"docs":" A fixed capacity map / dictionary that performs lookups via linear search","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":54835,"byte_end":54838,"line_start":36,"line_end":36,"column_start":22,"column_end":25},"name":"new","qualname":"<LinearMap<K, V, N>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `LinearMap`","sig":null,"attributes":[{"value":"cfg(not (feature = \"const-fn\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/const_fn.rs","byte_start":5591,"byte_end":5624,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":55267,"byte_end":55275,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"capacity","qualname":"<LinearMap<K, V, N>>::capacity","value":"fn (&mut self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements that the map can hold","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":55727,"byte_end":55732,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinearMap<K, V, N>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":56234,"byte_end":56246,"line_start":92,"line_end":92,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<LinearMap<K, V, N>>::contains_key","value":"fn (&self, key: &K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":56746,"byte_end":56749,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"get","qualname":"<LinearMap<K, V, N>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":57415,"byte_end":57422,"line_start":138,"line_end":138,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<LinearMap<K, V, N>>::get_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":58028,"byte_end":58031,"line_start":163,"line_end":163,"column_start":12,"column_end":15},"name":"len","qualname":"<LinearMap<K, V, N>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in this map","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":58803,"byte_end":58809,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"insert","qualname":"<LinearMap<K, V, N>>::insert","value":"fn (&mut self, key: K, mut value: V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":59494,"byte_end":59502,"line_start":214,"line_end":214,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LinearMap<K, V, N>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":60044,"byte_end":60048,"line_start":235,"line_end":235,"column_start":12,"column_end":16},"name":"iter","qualname":"<LinearMap<K, V, N>>::iter","value":"fn (&self) -> Iter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":60785,"byte_end":60793,"line_start":264,"line_end":264,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<LinearMap<K, V, N>>::iter_mut","value":"fn (&mut self) -> IterMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order, with mutable references to the\n values","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":61357,"byte_end":61361,"line_start":287,"line_end":287,"column_start":12,"column_end":16},"name":"keys","qualname":"<LinearMap<K, V, N>>::keys","value":"fn (&self) -> impl Iterator<Item = &K>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":61927,"byte_end":61933,"line_start":307,"line_end":307,"column_start":12,"column_end":18},"name":"remove","qualname":"<LinearMap<K, V, N>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key was previously in the\n map","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":62703,"byte_end":62709,"line_start":338,"line_end":338,"column_start":12,"column_end":18},"name":"values","qualname":"<LinearMap<K, V, N>>::values","value":"fn (&self) -> impl Iterator<Item = &V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":63338,"byte_end":63348,"line_start":363,"line_end":363,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<LinearMap<K, V, N>>::values_mut","value":"fn (&mut self) -> impl Iterator<Item = &mut V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":514},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":64900,"byte_end":64908,"line_start":443,"line_end":443,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::linear_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":518}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":540},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":65770,"byte_end":65774,"line_start":490,"line_end":490,"column_start":12,"column_end":16},"name":"Iter","qualname":"::linear_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":544}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":557},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":66252,"byte_end":66259,"line_start":522,"line_end":522,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::linear_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":561}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":596},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":68331,"byte_end":68337,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"String","qualname":"::string::String","value":"String {  }","parent":null,"children":[{"krate":0,"index":598}],"decl_id":null,"docs":" A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":68822,"byte_end":68825,"line_start":40,"line_end":40,"column_start":22,"column_end":25},"name":"new","qualname":"<String<N>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `String` with a fixed capacity of `N`","sig":null,"attributes":[{"value":"cfg(not (feature = \"const-fn\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/const_fn.rs","byte_start":5591,"byte_end":5624,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":70185,"byte_end":70194,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"from_utf8","qualname":"<String<N>>::from_utf8","value":"fn (vec: Vec<u8, N>) -> Result<(String<N>), Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes into a `String`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":70164,"byte_end":70173,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":70559,"byte_end":70578,"line_start":99,"line_end":99,"column_start":19,"column_end":38},"name":"from_utf8_unchecked","qualname":"<String<N>>::from_utf8_unchecked","value":"fn (vec: Vec<u8, N>) -> String<N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `String` without checking that the\n string contains valid UTF-8.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":70531,"byte_end":70540,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":71134,"byte_end":71144,"line_start":122,"line_end":122,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<String<N>>::into_bytes","value":"fn (self) -> Vec<u8, N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a byte vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":71113,"byte_end":71122,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":71663,"byte_end":71669,"line_start":143,"line_end":143,"column_start":12,"column_end":18},"name":"as_str","qualname":"<String<N>>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Extracts a string slice containing the entire string.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":71642,"byte_end":71651,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":72109,"byte_end":72119,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"as_mut_str","qualname":"<String<N>>::as_mut_str","value":"fn (&mut self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a mutable string slice.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":72088,"byte_end":72097,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":72670,"byte_end":72678,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"push_str","qualname":"<String<N>>::push_str","value":"fn (&mut self, string: &str) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a given string slice onto the end of this `String`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":72649,"byte_end":72658,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":73119,"byte_end":73127,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"capacity","qualname":"<String<N>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the String can hold","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":73098,"byte_end":73107,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":73726,"byte_end":73730,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"push","qualname":"<String<N>>::push","value":"fn (&mut self, c: char) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends the given [`char`] to the end of this `String`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":73705,"byte_end":73714,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":74453,"byte_end":74461,"line_start":257,"line_end":257,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<String<N>>::as_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a byte slice of this `String`'s contents.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":74432,"byte_end":74441,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":75224,"byte_end":75232,"line_start":290,"line_end":290,"column_start":12,"column_end":20},"name":"truncate","qualname":"<String<N>>::truncate","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens this `String` to the specified length.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":75203,"byte_end":75212,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":76007,"byte_end":76010,"line_start":319,"line_end":319,"column_start":12,"column_end":15},"name":"pop","qualname":"<String<N>>::pop","value":"fn (&mut self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last character from the string buffer and returns it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":76666,"byte_end":76674,"line_start":350,"line_end":350,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<String<N>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"\n Returns `true` if this `String` has a length of zero.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":76645,"byte_end":76654,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":77265,"byte_end":77270,"line_start":376,"line_end":376,"column_start":12,"column_end":17},"name":"clear","qualname":"<String<N>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncates this `String`, removing all contents.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":77244,"byte_end":77253,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":77630,"byte_end":77633,"line_start":394,"line_end":394,"column_start":12,"column_end":15},"name":"len","qualname":"<String<N>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of this `String`, in bytes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":686},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":88304,"byte_end":88307,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"Vec","qualname":"::vec::Vec","value":"Vec {  }","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690}],"decl_id":null,"docs":" A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":88809,"byte_end":88812,"line_start":67,"line_end":67,"column_start":22,"column_end":25},"name":"new","qualname":"<Vec<T, N>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty vector with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"const-fn\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/const_fn.rs","byte_start":5591,"byte_end":5624,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":89063,"byte_end":89071,"line_start":77,"line_end":77,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Vec<T, N>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the vector can hold\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":89178,"byte_end":89183,"line_start":82,"line_end":82,"column_start":12,"column_end":17},"name":"clear","qualname":"<Vec<T, N>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":89754,"byte_end":89771,"line_start":102,"line_end":102,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<Vec<T, N>>::extend_from_slice","value":"fn (&mut self, other: &[T]) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all elements in a slice to the `Vec`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":90247,"byte_end":90250,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"pop","qualname":"<Vec<T, N>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and return it, or `None` if it's empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":90783,"byte_end":90787,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"name":"push","qualname":"<Vec<T, N>>::push","value":"fn (&mut self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the back of the collection","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":91471,"byte_end":91479,"line_start":158,"line_end":158,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec<T, N>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping the rest.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":92264,"byte_end":92270,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"resize","qualname":"<Vec<T, N>>::resize","value":"fn (&mut self, new_len: usize, value: T) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Resizes the Vec in-place so that len is equal to new_len.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":93040,"byte_end":93054,"line_start":204,"line_end":204,"column_start":12,"column_end":26},"name":"resize_default","qualname":"<Vec<T, N>>::resize_default","value":"fn (&mut self, new_len: usize) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":93980,"byte_end":93991,"line_start":239,"line_end":239,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<Vec<T, N>>::swap_remove","value":"fn (&mut self, index: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the vector and returns it.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":763},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":96868,"byte_end":96876,"line_start":382,"line_end":382,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767}],"decl_id":null,"docs":" An iterator that moves out of an [`Vec`][`Vec`].","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":823},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::binary_heap","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":848},{"krate":0,"index":865},{"krate":0,"index":871},{"krate":0,"index":879},{"krate":0,"index":883},{"krate":0,"index":888},{"krate":0,"index":893},{"krate":0,"index":898}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":834},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":107610,"byte_end":107613,"line_start":21,"line_end":21,"column_start":10,"column_end":13},"name":"Min","qualname":"::binary_heap::Min","value":"Min::{}","parent":null,"children":[],"decl_id":null,"docs":" Min-heap\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":835},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":107640,"byte_end":107643,"line_start":24,"line_end":24,"column_start":10,"column_end":13},"name":"Max","qualname":"::binary_heap::Max","value":"Max::{}","parent":null,"children":[],"decl_id":null,"docs":" Max-heap\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":836},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":107760,"byte_end":107764,"line_start":29,"line_end":29,"column_start":18,"column_end":22},"name":"Kind","qualname":"::binary_heap::Kind","value":"Kind","parent":null,"children":[{"krate":0,"index":837}],"decl_id":null,"docs":" The binary heap kind: min-heap or max-heap","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":107793,"byte_end":107801,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"ordering","qualname":"::binary_heap::Kind::ordering","value":"fn () -> Ordering","parent":{"krate":0,"index":836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":842},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":109566,"byte_end":109576,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::binary_heap::BinaryHeap","value":"BinaryHeap {  }","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":847}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":110163,"byte_end":110166,"line_start":121,"line_end":121,"column_start":22,"column_end":25},"name":"new","qualname":"<BinaryHeap<T, N, K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty BinaryHeap as a $K-heap.","sig":null,"attributes":[{"value":"cfg(not (feature = \"const-fn\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/const_fn.rs","byte_start":5591,"byte_end":5624,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":110386,"byte_end":110394,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BinaryHeap<T, N, K>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the binary heap.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":110876,"byte_end":110881,"line_start":151,"line_end":151,"column_start":12,"column_end":17},"name":"clear","qualname":"<BinaryHeap<T, N, K>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the binary heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":111284,"byte_end":111287,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"len","qualname":"<BinaryHeap<T, N, K>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the binary heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":111771,"byte_end":111779,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BinaryHeap<T, N, K>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the binary heap is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":112385,"byte_end":112389,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"name":"iter","qualname":"<BinaryHeap<T, N, K>>::iter","value":"fn (&self) -> slice::Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":112680,"byte_end":112688,"line_start":217,"line_end":217,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<BinaryHeap<T, N, K>>::iter_mut","value":"fn (&mut self) -> slice::IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":113274,"byte_end":113278,"line_start":236,"line_end":236,"column_start":12,"column_end":16},"name":"peek","qualname":"<BinaryHeap<T, N, K>>::peek","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or\n None if it is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":113873,"byte_end":113876,"line_start":255,"line_end":255,"column_start":12,"column_end":15},"name":"pop","qualname":"<BinaryHeap<T, N, K>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, or None if it is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":114218,"byte_end":114231,"line_start":265,"line_end":265,"column_start":19,"column_end":32},"name":"pop_unchecked","qualname":"<BinaryHeap<T, N, K>>::pop_unchecked","value":"fn (&mut self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, without checking if the binary heap is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":114883,"byte_end":114887,"line_start":289,"line_end":289,"column_start":12,"column_end":16},"name":"push","qualname":"<BinaryHeap<T, N, K>>::push","value":"fn (&mut self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":115167,"byte_end":115181,"line_start":299,"line_end":299,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<BinaryHeap<T, N, K>>::push_unchecked","value":"fn (&mut self, item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap without first checking if it's full.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":906},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pool","qualname":"::pool","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":922},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":1013},{"krate":0,"index":1017},{"krate":0,"index":1019},{"krate":0,"index":1021},{"krate":0,"index":1029},{"krate":0,"index":1033},{"krate":0,"index":1038},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1053},{"krate":0,"index":1056},{"krate":0,"index":1060},{"krate":0,"index":1063},{"krate":0,"index":1066},{"krate":0,"index":1069},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1080}],"decl_id":null,"docs":" A heap-less, interrupt-safe, lock-free memory pool (\\*)","sig":null,"attributes":[{"value":"cfg(not (armv6m))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4824,"byte_end":4843,"line_start":130,"line_end":130,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":929},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"singleton","qualname":"::pool::singleton","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":949},{"krate":0,"index":955},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":983},{"krate":0,"index":986},{"krate":0,"index":989},{"krate":0,"index":994},{"krate":0,"index":998},{"krate":0,"index":1001},{"krate":0,"index":1003},{"krate":0,"index":1006},{"krate":0,"index":1009}],"decl_id":null,"docs":" `Pool` as a global singleton\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":949},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":138646,"byte_end":138650,"line_start":37,"line_end":37,"column_start":11,"column_end":15},"name":"Pool","qualname":"::pool::singleton::Pool","value":"Pool","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":954}],"decl_id":null,"docs":" A global singleton memory pool\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":950},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":138722,"byte_end":138726,"line_start":39,"line_end":39,"column_start":10,"column_end":14},"name":"Data","qualname":"::pool::singleton::Pool::Data","value":"type Data: 'static;","parent":{"krate":0,"index":949},"children":[],"decl_id":null,"docs":" The type of data that can be allocated on this pool\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":138764,"byte_end":138767,"line_start":42,"line_end":42,"column_start":8,"column_end":11},"name":"ptr","qualname":"::pool::singleton::Pool::ptr","value":"fn () -> &'static super::Pool<Self::Data>","parent":{"krate":0,"index":949},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":139033,"byte_end":139038,"line_start":49,"line_end":49,"column_start":8,"column_end":13},"name":"alloc","qualname":"::pool::singleton::Pool::alloc","value":"fn () -> Option<Box<Self, Uninit>>","parent":{"krate":0,"index":949},"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":139465,"byte_end":139469,"line_start":64,"line_end":64,"column_start":8,"column_end":12},"name":"grow","qualname":"::pool::singleton::Pool::grow","value":"fn (memory: &'static mut [u8]) -> usize","parent":{"krate":0,"index":949},"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":955},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":139627,"byte_end":139630,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::singleton::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959}],"decl_id":null,"docs":" A memory block that belongs to the global memory pool, `POOL`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":139863,"byte_end":139867,"line_start":84,"line_end":84,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<P, Uninit>>::init","value":"fn (self, val: P::Data) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":140468,"byte_end":140474,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Box<P, Uninit>>::freeze","value":"fn (self) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" Freezes the contents of this memory block","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1013},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":128851,"byte_end":128855,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"Pool","qualname":"::pool::Pool","value":"Pool {  }","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1016}],"decl_id":null,"docs":" A lock-free memory pool\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":129512,"byte_end":129515,"line_start":190,"line_end":190,"column_start":22,"column_end":25},"name":"new","qualname":"<Pool<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty pool\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"min-const-fn\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/const_fn.rs","byte_start":6382,"byte_end":6419,"line_start":56,"line_end":56,"column_start":13,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":129913,"byte_end":129918,"line_start":204,"line_end":204,"column_start":12,"column_end":17},"name":"alloc","qualname":"<Pool<T>>::alloc","value":"fn (&self) -> Option<Box<T, Uninit>>","parent":null,"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":130388,"byte_end":130392,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"free","qualname":"<Pool<T>>::free","value":"fn <S> (&self, value: Box<T, S>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Returns a memory block to the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":130911,"byte_end":130915,"line_start":238,"line_end":238,"column_start":12,"column_end":16},"name":"grow","qualname":"<Pool<T>>::grow","value":"fn (&self, memory: &'static mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1033},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133189,"byte_end":133192,"line_start":322,"line_end":322,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":1036},{"krate":0,"index":1037}],"decl_id":null,"docs":" A memory block\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133349,"byte_end":133353,"line_start":329,"line_end":329,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<T, Uninit>>::init","value":"fn (self, val: T) -> Box<T, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1041},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133607,"byte_end":133613,"line_start":342,"line_end":342,"column_start":10,"column_end":16},"name":"Uninit","qualname":"::pool::Uninit","value":"Uninit::{}","parent":null,"children":[],"decl_id":null,"docs":" Uninitialized type state\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1042},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133654,"byte_end":133658,"line_start":345,"line_end":345,"column_start":10,"column_end":14},"name":"Init","qualname":"::pool::Init","value":"Init::{}","parent":null,"children":[],"decl_id":null,"docs":" Initialized type state\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1084},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spsc","qualname":"::spsc","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1145},{"krate":0,"index":1147},{"krate":0,"index":1149},{"krate":0,"index":1154},{"krate":0,"index":1161},{"krate":0,"index":1169},{"krate":0,"index":1179},{"krate":0,"index":1185},{"krate":0,"index":1191},{"krate":0,"index":1198},{"krate":0,"index":1205},{"krate":0,"index":1214},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":2037},{"krate":0,"index":2040},{"krate":0,"index":2043},{"krate":0,"index":2051},{"krate":0,"index":1230},{"krate":0,"index":1240},{"krate":0,"index":1245},{"krate":0,"index":1254},{"krate":0,"index":1261},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":2058},{"krate":0,"index":2066}],"decl_id":null,"docs":" Single producer single consumer queue\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/split.rs","byte_start":166429,"byte_end":166434,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"split","qualname":"<Queue<T, N, U, C>>::split","value":"fn <'rb> (&'rb mut self) -> (Producer<'rb, T, N, U, C>, Consumer<'rb, T, N, U, C>)","parent":null,"children":[],"decl_id":null,"docs":" Splits a statically allocated queue into producer and consumer end points\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1117},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/split.rs","byte_start":166960,"byte_end":166968,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"Consumer","qualname":"::spsc::split::Consumer","value":"Consumer {  }","parent":null,"children":[{"krate":0,"index":1123},{"krate":0,"index":1124}],"decl_id":null,"docs":" A queue \"consumer\"; it can dequeue items from the queue\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1131},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/split.rs","byte_start":167444,"byte_end":167452,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"Producer","qualname":"::spsc::split::Producer","value":"Producer {  }","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1138}],"decl_id":null,"docs":" A queue \"producer\"; it can enqueue items into the queue\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1145},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":145225,"byte_end":145234,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"MultiCore","qualname":"::spsc::MultiCore","value":"","parent":null,"children":[],"decl_id":null,"docs":" Multi core synchronization - a memory barrier is used for synchronization\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1147},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":145339,"byte_end":145349,"line_start":20,"line_end":20,"column_start":12,"column_end":22},"name":"SingleCore","qualname":"::spsc::SingleCore","value":"","parent":null,"children":[],"decl_id":null,"docs":" Single core synchronization - no memory barrier synchronization, just a compiler fence\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1161},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":149088,"byte_end":149093,"line_start":147,"line_end":147,"column_start":12,"column_end":17},"name":"Queue","qualname":"::spsc::Queue","value":"Queue {  }","parent":null,"children":[{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168}],"decl_id":null,"docs":" A statically allocated single producer single consumer queue with a capacity of `N` elements","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":149567,"byte_end":149575,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Queue<T, N, U, C>>::capacity","value":"fn (&self) -> U","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the queue can hold\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":149697,"byte_end":149705,"line_start":174,"line_end":174,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Queue<T, N, U, C>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue has a length of 0\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":149828,"byte_end":149832,"line_start":179,"line_end":179,"column_start":12,"column_end":16},"name":"iter","qualname":"<Queue<T, N, U, C>>::iter","value":"fn (&self) -> Iter<T, N, U, C>","parent":null,"children":[],"decl_id":null,"docs":" Iterates from the front of the queue to the back\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":150046,"byte_end":150054,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Queue<T, N, U, C>>::iter_mut","value":"fn (&mut self) -> IterMut<T, N, U, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2035},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":156982,"byte_end":156985,"line_start":430,"line_end":430,"column_start":22,"column_end":25},"name":"new","qualname":"<Queue<T, N, usize, MultiCore>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`spsc::Queue::usize`](struct.Queue.html#method.usize)\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"const-fn\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/const_fn.rs","byte_start":5591,"byte_end":5624,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2036},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":157244,"byte_end":157250,"line_start":442,"line_end":442,"column_start":29,"column_end":35},"name":"new_sc","qualname":"<Queue<T, N, usize, SingleCore>>::new_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`spsc::Queue::usize_sc`](struct.Queue.html#method.usize_sc)\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"const-fn\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/const_fn.rs","byte_start":5352,"byte_end":5385,"line_start":13,"line_end":13,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2056},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":157431,"byte_end":157436,"line_start":452,"line_end":452,"column_start":8,"column_end":13},"name":"usize","qualname":"<Queue<T, N, usize, MultiCore>>::usize","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"const-fn\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/const_fn.rs","byte_start":5591,"byte_end":5624,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2057},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":157438,"byte_end":157446,"line_start":452,"line_end":452,"column_start":15,"column_end":23},"name":"usize_sc","qualname":"<Queue<T, N, usize, SingleCore>>::usize_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"const-fn\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/const_fn.rs","byte_start":5352,"byte_end":5385,"line_start":13,"line_end":13,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1245},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":158108,"byte_end":158112,"line_start":484,"line_end":484,"column_start":12,"column_end":16},"name":"Iter","qualname":"::spsc::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253}],"decl_id":null,"docs":" An iterator over the items of a queue\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1261},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":158654,"byte_end":158661,"line_start":513,"line_end":513,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::spsc::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269}],"decl_id":null,"docs":" A mutable iterator over the items of a queue\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1296},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175549,"byte_end":175554,"line_start":7,"line_end":7,"column_start":18,"column_end":23},"name":"XCore","qualname":"::sealed::XCore","value":"XCore","parent":null,"children":[{"krate":0,"index":1297}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175564,"byte_end":175577,"line_start":8,"line_end":8,"column_start":8,"column_end":21},"name":"is_multi_core","qualname":"::sealed::XCore::is_multi_core","value":"fn () -> bool","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1302},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175789,"byte_end":175792,"line_start":23,"line_end":23,"column_start":18,"column_end":21},"name":"Uxx","qualname":"::sealed::Uxx","value":"Uxx: Into<usize> + Send","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1306},{"krate":0,"index":1307}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175841,"byte_end":175849,"line_start":25,"line_end":25,"column_start":8,"column_end":16},"name":"truncate","qualname":"::sealed::Uxx::truncate","value":"fn (x: usize) -> Self","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175903,"byte_end":175915,"line_start":28,"line_end":28,"column_start":15,"column_end":27},"name":"load_acquire","qualname":"::sealed::Uxx::load_acquire","value":"fn <C> (x: *const Self) -> Self","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175998,"byte_end":176010,"line_start":33,"line_end":33,"column_start":8,"column_end":20},"name":"load_relaxed","qualname":"::sealed::Uxx::load_relaxed","value":"fn (x: *const Self) -> Self","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":176070,"byte_end":176083,"line_start":36,"line_end":36,"column_start":15,"column_end":28},"name":"store_release","qualname":"::sealed::Uxx::store_release","value":"fn <C> (x: *const Self, val: Self) -> ()","parent":{"krate":0,"index":1302},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":9001,"byte_end":9010,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":9780,"byte_end":9783,"line_start":48,"line_end":48,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":10844,"byte_end":10851,"line_start":96,"line_end":96,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":17048,"byte_end":17055,"line_start":272,"line_end":272,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":19125,"byte_end":19133,"line_start":337,"line_end":337,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":19657,"byte_end":19665,"line_start":355,"line_end":355,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":30254,"byte_end":30262,"line_start":717,"line_end":717,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":30584,"byte_end":30592,"line_start":731,"line_end":731,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":30886,"byte_end":30894,"line_start":743,"line_end":743,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":31216,"byte_end":31224,"line_start":758,"line_end":758,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":31525,"byte_end":31533,"line_start":770,"line_end":770,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":31867,"byte_end":31875,"line_start":784,"line_end":784,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":32343,"byte_end":32351,"line_start":801,"line_end":801,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":32523,"byte_end":32531,"line_start":812,"line_end":812,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":32893,"byte_end":32901,"line_start":828,"line_end":828,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":33274,"byte_end":33282,"line_start":843,"line_end":843,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":34368,"byte_end":34372,"line_start":895,"line_end":895,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":34595,"byte_end":34599,"line_start":907,"line_end":907,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":34875,"byte_end":34882,"line_start":927,"line_end":927,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":38202,"byte_end":38210,"line_start":55,"line_end":55,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":38515,"byte_end":38523,"line_start":69,"line_end":69,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":301},{"krate":0,"index":306},{"krate":0,"index":310},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":324},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":49878,"byte_end":49886,"line_start":457,"line_end":457,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":50134,"byte_end":50142,"line_start":470,"line_end":470,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":50419,"byte_end":50427,"line_start":481,"line_end":481,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":50712,"byte_end":50720,"line_start":494,"line_end":494,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":51078,"byte_end":51086,"line_start":507,"line_end":507,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":51404,"byte_end":51412,"line_start":521,"line_end":521,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":51732,"byte_end":51740,"line_start":535,"line_end":535,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":52447,"byte_end":52451,"line_start":572,"line_end":572,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":52621,"byte_end":52625,"line_start":583,"line_end":583,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":53002,"byte_end":53012,"line_start":604,"line_end":604,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":53637,"byte_end":53649,"line_start":632,"line_end":632,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":54454,"byte_end":54463,"line_start":20,"line_end":20,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":454},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":472},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":63486,"byte_end":63495,"line_start":368,"line_end":368,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":63764,"byte_end":63773,"line_start":382,"line_end":382,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":64016,"byte_end":64025,"line_start":394,"line_end":394,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":64162,"byte_end":64171,"line_start":404,"line_end":404,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":64384,"byte_end":64393,"line_start":417,"line_end":417,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":64641,"byte_end":64650,"line_start":428,"line_end":428,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":65050,"byte_end":65058,"line_start":451,"line_end":451,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":65252,"byte_end":65261,"line_start":462,"line_end":462,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":65881,"byte_end":65885,"line_start":498,"line_end":498,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":66095,"byte_end":66099,"line_start":510,"line_end":510,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":66369,"byte_end":66376,"line_start":530,"line_end":530,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":66626,"byte_end":66635,"line_start":542,"line_end":542,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":66987,"byte_end":66996,"line_start":557,"line_end":557,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":68405,"byte_end":68411,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":77704,"byte_end":77710,"line_start":399,"line_end":399,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":77832,"byte_end":77838,"line_start":408,"line_end":408,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78025,"byte_end":78031,"line_start":419,"line_end":419,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78247,"byte_end":78253,"line_start":432,"line_end":432,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78411,"byte_end":78417,"line_start":443,"line_end":443,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78615,"byte_end":78621,"line_start":453,"line_end":453,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78819,"byte_end":78825,"line_start":463,"line_end":463,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78993,"byte_end":78999,"line_start":473,"line_end":473,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79167,"byte_end":79173,"line_start":483,"line_end":483,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79473,"byte_end":79479,"line_start":496,"line_end":496,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79626,"byte_end":79632,"line_start":507,"line_end":507,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79768,"byte_end":79774,"line_start":516,"line_end":516,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79901,"byte_end":79907,"line_start":526,"line_end":526,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":80061,"byte_end":80067,"line_start":536,"line_end":536,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":81234,"byte_end":81240,"line_start":585,"line_end":585,"column_start":16,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":88430,"byte_end":88433,"line_start":48,"line_end":48,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":88637,"byte_end":88640,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":94564,"byte_end":94567,"line_start":260,"line_end":260,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":94687,"byte_end":94690,"line_start":269,"line_end":269,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":94891,"byte_end":94894,"line_start":280,"line_end":280,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":95044,"byte_end":95047,"line_start":289,"line_end":289,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":95294,"byte_end":95297,"line_start":303,"line_end":303,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":732}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":95527,"byte_end":95530,"line_start":316,"line_end":316,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":95724,"byte_end":95727,"line_start":326,"line_end":326,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":96365,"byte_end":96368,"line_start":360,"line_end":360,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":96978,"byte_end":96986,"line_start":390,"line_end":390,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":97396,"byte_end":97404,"line_start":407,"line_end":407,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":97604,"byte_end":97612,"line_start":420,"line_end":420,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":97952,"byte_end":97955,"line_start":434,"line_end":434,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":98186,"byte_end":98189,"line_start":446,"line_end":446,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":99055,"byte_end":99058,"line_start":489,"line_end":489,"column_start":19,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":99136,"byte_end":99139,"line_start":496,"line_end":496,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":99491,"byte_end":99494,"line_start":510,"line_end":510,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":99870,"byte_end":99873,"line_start":524,"line_end":524,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":100011,"byte_end":100014,"line_start":534,"line_end":534,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":100154,"byte_end":100157,"line_start":544,"line_end":544,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":100288,"byte_end":100291,"line_start":554,"line_end":554,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":107841,"byte_end":107844,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":107932,"byte_end":107935,"line_start":40,"line_end":40,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":109716,"byte_end":109726,"line_start":103,"line_end":103,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":116923,"byte_end":116927,"line_start":354,"line_end":354,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":118368,"byte_end":118372,"line_start":404,"line_end":404,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":118627,"byte_end":118637,"line_start":415,"line_end":415,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":118783,"byte_end":118793,"line_start":426,"line_end":426,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":119028,"byte_end":119038,"line_start":440,"line_end":440,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":139778,"byte_end":139781,"line_start":79,"line_end":79,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":140233,"byte_end":140236,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141033,"byte_end":141036,"line_start":131,"line_end":131,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141180,"byte_end":141183,"line_start":142,"line_end":142,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141317,"byte_end":141320,"line_start":151,"line_end":151,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141509,"byte_end":141512,"line_start":161,"line_end":161,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141700,"byte_end":141703,"line_start":171,"line_end":171,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142021,"byte_end":142024,"line_start":187,"line_end":187,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142101,"byte_end":142104,"line_start":194,"line_end":194,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142177,"byte_end":142180,"line_start":201,"line_end":201,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142363,"byte_end":142366,"line_start":213,"line_end":213,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142545,"byte_end":142548,"line_start":223,"line_end":223,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142708,"byte_end":142711,"line_start":233,"line_end":233,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142779,"byte_end":142782,"line_start":240,"line_end":240,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142980,"byte_end":142983,"line_start":250,"line_end":250,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":143144,"byte_end":143147,"line_start":260,"line_end":260,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":129368,"byte_end":129372,"line_start":183,"line_end":183,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":129404,"byte_end":129408,"line_start":185,"line_end":185,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":129424,"byte_end":129428,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2015},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133283,"byte_end":133286,"line_start":327,"line_end":327,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133690,"byte_end":133693,"line_start":347,"line_end":347,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133745,"byte_end":133748,"line_start":349,"line_end":349,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133793,"byte_end":133796,"line_start":351,"line_end":351,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133962,"byte_end":133965,"line_start":362,"line_end":362,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134117,"byte_end":134120,"line_start":371,"line_end":371,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134257,"byte_end":134260,"line_start":379,"line_end":379,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134393,"byte_end":134396,"line_start":385,"line_end":385,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134560,"byte_end":134563,"line_start":394,"line_end":394,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134728,"byte_end":134731,"line_start":403,"line_end":403,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134866,"byte_end":134869,"line_start":412,"line_end":412,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134912,"byte_end":134915,"line_start":414,"line_end":414,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":135088,"byte_end":135091,"line_start":423,"line_end":423,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":135227,"byte_end":135230,"line_start":432,"line_end":432,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/split.rs","byte_start":166245,"byte_end":166250,"line_start":9,"line_end":9,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/split.rs","byte_start":167188,"byte_end":167196,"line_start":42,"line_end":42,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/split.rs","byte_start":167669,"byte_end":167677,"line_start":63,"line_end":63,"column_start":35,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":145617,"byte_end":145623,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2034},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":149399,"byte_end":149404,"line_start":162,"line_end":162,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":150430,"byte_end":150435,"line_start":205,"line_end":205,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":150701,"byte_end":150706,"line_start":220,"line_end":220,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":150964,"byte_end":150969,"line_start":232,"line_end":232,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":151289,"byte_end":151294,"line_start":247,"line_end":247,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":156807,"byte_end":156812,"line_start":424,"line_end":424,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2035}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":157055,"byte_end":157060,"line_start":436,"line_end":436,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2036}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":157515,"byte_end":157520,"line_start":454,"line_end":454,"column_start":66,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":157949,"byte_end":157954,"line_start":473,"line_end":473,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":158327,"byte_end":158331,"line_start":496,"line_end":496,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1260}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/__core.rs","byte_start":174246,"byte_end":174257,"line_start":21,"line_end":21,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175614,"byte_end":175624,"line_start":11,"line_end":11,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175705,"byte_end":175714,"line_start":17,"line_end":17,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4811,"byte_end":4822,"line_start":129,"line_end":129,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":823}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4852,"byte_end":4856,"line_start":131,"line_end":131,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":906}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":128800,"byte_end":128809,"line_start":168,"line_end":168,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":929}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/lib.rs","byte_start":4866,"byte_end":4870,"line_start":132,"line_end":132,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1084}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":9001,"byte_end":9010,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":9780,"byte_end":9783,"line_start":48,"line_end":48,"column_start":6,"column_end":9},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":10844,"byte_end":10851,"line_start":96,"line_end":96,"column_start":15,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":64},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":17048,"byte_end":17055,"line_start":272,"line_end":272,"column_start":25,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":64},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":19125,"byte_end":19133,"line_start":337,"line_end":337,"column_start":18,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":19657,"byte_end":19665,"line_start":355,"line_end":355,"column_start":18,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":30254,"byte_end":30262,"line_start":717,"line_end":717,"column_start":47,"column_end":55},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":30584,"byte_end":30592,"line_start":731,"line_end":731,"column_start":50,"column_end":58},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":1784}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":30886,"byte_end":30894,"line_start":743,"line_end":743,"column_start":28,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":31216,"byte_end":31224,"line_start":758,"line_end":758,"column_start":33,"column_end":41},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":31525,"byte_end":31533,"line_start":770,"line_end":770,"column_start":30,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":31867,"byte_end":31875,"line_start":784,"line_end":784,"column_start":64,"column_end":72},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":32343,"byte_end":32351,"line_start":801,"line_end":801,"column_start":25,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":32523,"byte_end":32531,"line_start":812,"line_end":812,"column_start":37,"column_end":45},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":32893,"byte_end":32901,"line_start":828,"line_end":828,"column_start":49,"column_end":57},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":33274,"byte_end":33282,"line_start":843,"line_end":843,"column_start":43,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":3947}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":34368,"byte_end":34372,"line_start":895,"line_end":895,"column_start":29,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":229},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":34595,"byte_end":34599,"line_start":907,"line_end":907,"column_start":26,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":229},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexmap.rs","byte_start":34875,"byte_end":34882,"line_start":927,"line_end":927,"column_start":29,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":246},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":38202,"byte_end":38210,"line_start":55,"line_end":55,"column_start":15,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":38515,"byte_end":38523,"line_start":69,"line_end":69,"column_start":15,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":49878,"byte_end":49886,"line_start":457,"line_end":457,"column_start":25,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":281},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":50134,"byte_end":50142,"line_start":470,"line_end":470,"column_start":30,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":281},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":50419,"byte_end":50427,"line_start":481,"line_end":481,"column_start":27,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":281},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":50712,"byte_end":50720,"line_start":494,"line_end":494,"column_start":60,"column_end":68},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":281},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":51078,"byte_end":51086,"line_start":507,"line_end":507,"column_start":29,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":281},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":51404,"byte_end":51412,"line_start":521,"line_end":521,"column_start":37,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":281},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":51732,"byte_end":51740,"line_start":535,"line_end":535,"column_start":35,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":281},"to":{"krate":1,"index":3947}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":52447,"byte_end":52451,"line_start":572,"line_end":572,"column_start":26,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":386},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":52621,"byte_end":52625,"line_start":583,"line_end":583,"column_start":23,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":386},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":53002,"byte_end":53012,"line_start":604,"line_end":604,"column_start":32,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":400},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/indexset.rs","byte_start":53637,"byte_end":53649,"line_start":632,"line_end":632,"column_start":32,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":414},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":54454,"byte_end":54463,"line_start":20,"line_end":20,"column_start":15,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":63486,"byte_end":63495,"line_start":368,"line_end":368,"column_start":44,"column_end":53},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":63764,"byte_end":63773,"line_start":382,"line_end":382,"column_start":47,"column_end":56},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":1784}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":64016,"byte_end":64025,"line_start":394,"line_end":394,"column_start":27,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":64162,"byte_end":64171,"line_start":404,"line_end":404,"column_start":25,"column_end":34},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":64384,"byte_end":64393,"line_start":417,"line_end":417,"column_start":30,"column_end":39},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":64641,"byte_end":64650,"line_start":428,"line_end":428,"column_start":40,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":3947}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":65050,"byte_end":65058,"line_start":451,"line_end":451,"column_start":28,"column_end":36},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":514},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":65252,"byte_end":65261,"line_start":462,"line_end":462,"column_start":32,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":3951}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":65881,"byte_end":65885,"line_start":498,"line_end":498,"column_start":29,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":540},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":66095,"byte_end":66099,"line_start":510,"line_end":510,"column_start":26,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":540},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":66369,"byte_end":66376,"line_start":530,"line_end":530,"column_start":29,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":66626,"byte_end":66635,"line_start":542,"line_end":542,"column_start":54,"column_end":63},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/linear_map.rs","byte_start":66987,"byte_end":66996,"line_start":557,"line_end":557,"column_start":22,"column_end":31},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":438},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":68405,"byte_end":68411,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":596},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":77704,"byte_end":77710,"line_start":399,"line_end":399,"column_start":21,"column_end":27},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":77832,"byte_end":77838,"line_start":408,"line_end":408,"column_start":31,"column_end":37},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78025,"byte_end":78031,"line_start":419,"line_end":419,"column_start":26,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":6815}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78247,"byte_end":78253,"line_start":432,"line_end":432,"column_start":19,"column_end":25},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78411,"byte_end":78417,"line_start":443,"line_end":443,"column_start":24,"column_end":30},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78615,"byte_end":78621,"line_start":453,"line_end":453,"column_start":26,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":7648}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78819,"byte_end":78825,"line_start":463,"line_end":463,"column_start":24,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":78993,"byte_end":78999,"line_start":473,"line_end":473,"column_start":26,"column_end":32},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":596},"to":{"krate":10,"index":72}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79167,"byte_end":79173,"line_start":483,"line_end":483,"column_start":24,"column_end":30},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":7602}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79473,"byte_end":79479,"line_start":496,"line_end":496,"column_start":24,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79626,"byte_end":79632,"line_start":507,"line_end":507,"column_start":27,"column_end":33},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79768,"byte_end":79774,"line_start":516,"line_end":516,"column_start":24,"column_end":30},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":2249}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":79901,"byte_end":79907,"line_start":526,"line_end":526,"column_start":25,"column_end":31},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":2249}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":80061,"byte_end":80067,"line_start":536,"line_end":536,"column_start":40,"column_end":46},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/string.rs","byte_start":81234,"byte_end":81240,"line_start":585,"line_end":585,"column_start":16,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":596},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":88430,"byte_end":88433,"line_start":48,"line_end":48,"column_start":22,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":88637,"byte_end":88640,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":94564,"byte_end":94567,"line_start":260,"line_end":260,"column_start":24,"column_end":27},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":94687,"byte_end":94690,"line_start":269,"line_end":269,"column_start":27,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":94891,"byte_end":94894,"line_start":280,"line_end":280,"column_start":21,"column_end":24},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":95044,"byte_end":95047,"line_start":289,"line_end":289,"column_start":26,"column_end":29},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":95294,"byte_end":95297,"line_start":303,"line_end":303,"column_start":34,"column_end":37},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":95527,"byte_end":95530,"line_start":316,"line_end":316,"column_start":27,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":95724,"byte_end":95727,"line_start":326,"line_end":326,"column_start":29,"column_end":32},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":686},"to":{"krate":10,"index":72}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":96365,"byte_end":96368,"line_start":360,"line_end":360,"column_start":32,"column_end":35},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":3947}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":96978,"byte_end":96986,"line_start":390,"line_end":390,"column_start":25,"column_end":33},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":763},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":97396,"byte_end":97404,"line_start":407,"line_end":407,"column_start":22,"column_end":30},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":763},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":97604,"byte_end":97612,"line_start":420,"line_end":420,"column_start":21,"column_end":29},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":763},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":97952,"byte_end":97955,"line_start":434,"line_end":434,"column_start":29,"column_end":32},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":3951}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":98186,"byte_end":98189,"line_start":446,"line_end":446,"column_start":46,"column_end":49},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":99055,"byte_end":99058,"line_start":489,"line_end":489,"column_start":19,"column_end":22},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":99136,"byte_end":99139,"line_start":496,"line_end":496,"column_start":27,"column_end":30},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":99491,"byte_end":99494,"line_start":510,"line_end":510,"column_start":30,"column_end":33},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":99870,"byte_end":99873,"line_start":524,"line_end":524,"column_start":33,"column_end":36},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":2249}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":100011,"byte_end":100014,"line_start":534,"line_end":534,"column_start":33,"column_end":36},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":2252}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":100154,"byte_end":100157,"line_start":544,"line_end":544,"column_start":27,"column_end":30},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":2249}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/vec.rs","byte_start":100288,"byte_end":100291,"line_start":554,"line_end":554,"column_start":27,"column_end":30},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":2252}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":107841,"byte_end":107844,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":834},"to":{"krate":0,"index":836}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":107932,"byte_end":107935,"line_start":40,"line_end":40,"column_start":22,"column_end":25},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":835},"to":{"krate":0,"index":836}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":109716,"byte_end":109726,"line_start":103,"line_end":103,"column_start":15,"column_end":25},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":116923,"byte_end":116927,"line_start":354,"line_end":354,"column_start":13,"column_end":17},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":118368,"byte_end":118372,"line_start":404,"line_end":404,"column_start":22,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":865},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":118627,"byte_end":118637,"line_start":415,"line_end":415,"column_start":27,"column_end":37},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":118783,"byte_end":118793,"line_start":426,"line_end":426,"column_start":25,"column_end":35},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/binary_heap.rs","byte_start":119028,"byte_end":119038,"line_start":440,"line_end":440,"column_start":30,"column_end":40},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":139778,"byte_end":139781,"line_start":79,"line_end":79,"column_start":9,"column_end":12},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":955},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":140233,"byte_end":140236,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":955},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141033,"byte_end":141036,"line_start":131,"line_end":131,"column_start":19,"column_end":22},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141180,"byte_end":141183,"line_start":142,"line_end":142,"column_start":22,"column_end":25},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141317,"byte_end":141320,"line_start":151,"line_end":151,"column_start":24,"column_end":27},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141509,"byte_end":141512,"line_start":161,"line_end":161,"column_start":26,"column_end":29},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":7648}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":141700,"byte_end":141703,"line_start":171,"line_end":171,"column_start":21,"column_end":24},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142021,"byte_end":142024,"line_start":187,"line_end":187,"column_start":28,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142101,"byte_end":142104,"line_start":194,"line_end":194,"column_start":28,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142177,"byte_end":142180,"line_start":201,"line_end":201,"column_start":24,"column_end":27},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":955},"to":{"krate":4,"index":7}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142363,"byte_end":142366,"line_start":213,"line_end":213,"column_start":27,"column_end":30},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":955},"to":{"krate":4,"index":10}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142545,"byte_end":142548,"line_start":223,"line_end":223,"column_start":23,"column_end":26},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142708,"byte_end":142711,"line_start":233,"line_end":233,"column_start":16,"column_end":19},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142779,"byte_end":142782,"line_start":240,"line_end":240,"column_start":24,"column_end":27},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":2077}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":142980,"byte_end":142983,"line_start":250,"line_end":250,"column_start":17,"column_end":20},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":2066}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/singleton.rs","byte_start":143144,"byte_end":143147,"line_start":260,"line_end":260,"column_start":18,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":955},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":129368,"byte_end":129372,"line_start":183,"line_end":183,"column_start":25,"column_end":29},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1013},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":129404,"byte_end":129408,"line_start":185,"line_end":185,"column_start":25,"column_end":29},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1013},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":129424,"byte_end":129428,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1013},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133283,"byte_end":133286,"line_start":327,"line_end":327,"column_start":9,"column_end":12},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1033},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133690,"byte_end":133693,"line_start":347,"line_end":347,"column_start":28,"column_end":31},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133745,"byte_end":133748,"line_start":349,"line_end":349,"column_start":28,"column_end":31},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133793,"byte_end":133796,"line_start":351,"line_end":351,"column_start":21,"column_end":24},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1033},"to":{"krate":4,"index":7}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":133962,"byte_end":133965,"line_start":362,"line_end":362,"column_start":24,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1033},"to":{"krate":4,"index":10}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134117,"byte_end":134120,"line_start":371,"line_end":371,"column_start":19,"column_end":22},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134257,"byte_end":134260,"line_start":379,"line_end":379,"column_start":22,"column_end":25},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134393,"byte_end":134396,"line_start":385,"line_end":385,"column_start":24,"column_end":27},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134560,"byte_end":134563,"line_start":394,"line_end":394,"column_start":26,"column_end":29},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":7648}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134728,"byte_end":134731,"line_start":403,"line_end":403,"column_start":23,"column_end":26},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134866,"byte_end":134869,"line_start":412,"line_end":412,"column_start":16,"column_end":19},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":134912,"byte_end":134915,"line_start":414,"line_end":414,"column_start":24,"column_end":27},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":2077}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":135088,"byte_end":135091,"line_start":423,"line_end":423,"column_start":17,"column_end":20},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":2066}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/pool/mod.rs","byte_start":135227,"byte_end":135230,"line_start":432,"line_end":432,"column_start":18,"column_end":21},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/split.rs","byte_start":166245,"byte_end":166250,"line_start":9,"line_end":9,"column_start":18,"column_end":23},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/split.rs","byte_start":167188,"byte_end":167196,"line_start":42,"line_end":42,"column_start":38,"column_end":46},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1117},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/split.rs","byte_start":167669,"byte_end":167677,"line_start":63,"line_end":63,"column_start":35,"column_end":43},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1131},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":145617,"byte_end":145623,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":149399,"byte_end":149404,"line_start":162,"line_end":162,"column_start":18,"column_end":23},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":150430,"byte_end":150435,"line_start":205,"line_end":205,"column_start":27,"column_end":32},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":150701,"byte_end":150706,"line_start":220,"line_end":220,"column_start":33,"column_end":38},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":150964,"byte_end":150969,"line_start":232,"line_end":232,"column_start":33,"column_end":38},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":151289,"byte_end":151294,"line_start":247,"line_end":247,"column_start":35,"column_end":40},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1161},"to":{"krate":10,"index":72}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":156807,"byte_end":156812,"line_start":424,"line_end":424,"column_start":12,"column_end":17},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":157055,"byte_end":157060,"line_start":436,"line_end":436,"column_start":12,"column_end":17},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":157515,"byte_end":157520,"line_start":454,"line_end":454,"column_start":66,"column_end":71},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":157949,"byte_end":157954,"line_start":473,"line_end":473,"column_start":25,"column_end":30},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1161},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/spsc/mod.rs","byte_start":158327,"byte_end":158331,"line_start":496,"line_end":496,"column_start":32,"column_end":36},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1245},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/__core.rs","byte_start":174246,"byte_end":174257,"line_start":21,"line_end":21,"column_start":13,"column_end":24},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175614,"byte_end":175624,"line_start":11,"line_end":11,"column_start":23,"column_end":33},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1147},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175705,"byte_end":175714,"line_start":17,"line_end":17,"column_start":23,"column_end":32},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1145},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175794,"byte_end":175798,"line_start":23,"line_end":23,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":2255},"to":{"krate":0,"index":1302}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.4.4/src/sealed.rs","byte_start":175808,"byte_end":175812,"line_start":23,"line_end":23,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1533},"to":{"krate":0,"index":1302}}]}