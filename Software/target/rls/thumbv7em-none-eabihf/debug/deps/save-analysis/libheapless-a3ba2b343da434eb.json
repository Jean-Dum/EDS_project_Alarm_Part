{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3","program":"/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","heapless","/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=1","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"cas\"","--cfg","feature=\"default\"","--cfg","feature=\"serde\"","-C","metadata=a3ba2b343da434eb","-C","extra-filename=-a3ba2b343da434eb","--out-dir","/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/debug/deps","--extern","as_slice=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libas_slice-75318bb39bdb7509.rmeta","--extern","generic_array=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libgeneric_array-b35d7f286613a8c9.rmeta","--extern","hash32=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libhash32-f837a5ce37208f0b.rmeta","--extern","serde=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libserde-910ddf5a52fff262.rmeta","--cap-lints","allow","--cfg","armv7m","--cfg","has_cas","--cfg","has_atomics","--error-format=json","--sysroot","/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libheapless-a3ba2b343da434eb.rmeta"},"prelude":{"crate_id":{"name":"heapless","disambiguator":[17066105653715450518,10541593554529777001]},"crate_root":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src","external_crates":[{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6179814377341127279,15810806659018497542]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10095233927134609311,1311941312663600358]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4961934893482737060,7310190255483934973]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","num":4,"id":{"name":"generic_array","disambiguator":[15072705170787171301,621295125097607675]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","num":5,"id":{"name":"typenum","disambiguator":[14831840422485002281,5478024780313387860]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","num":6,"id":{"name":"hash32","disambiguator":[6801716316752500739,18289726874687913203]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","num":7,"id":{"name":"byteorder","disambiguator":[10572061634345972678,9134358399836345157]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","num":8,"id":{"name":"serde","disambiguator":[13265372121167967737,8845120422868952213]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","num":9,"id":{"name":"serde_derive","disambiguator":[12714016120798761864,9553498966570094254]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","num":10,"id":{"name":"as_slice","disambiguator":[13485168948194180944,7644999116958171601]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","num":11,"id":{"name":"generic_array","disambiguator":[10064259495254846354,2926175795816830589]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","num":12,"id":{"name":"stable_deref_trait","disambiguator":[2071159815372964731,8910106929597806303]}}],"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":0,"byte_end":3903,"line_start":1,"line_end":100,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1106},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3269,"byte_end":3279,"line_start":70,"line_end":70,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":2001},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3313,"byte_end":3319,"line_start":71,"line_end":71,"column_start":33,"column_end":39},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":343},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3344,"byte_end":3355,"line_start":72,"line_end":72,"column_start":24,"column_end":35},"alias_span":null,"name":"ArrayLength","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3376,"byte_end":3387,"line_start":73,"line_end":73,"column_start":20,"column_end":31},"alias_span":null,"name":"FnvIndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":83},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3389,"byte_end":3397,"line_start":73,"line_end":73,"column_start":33,"column_end":41},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3419,"byte_end":3430,"line_start":74,"line_end":74,"column_start":20,"column_end":31},"alias_span":null,"name":"FnvIndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3432,"byte_end":3440,"line_start":74,"line_end":74,"column_start":33,"column_end":41},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":440},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3463,"byte_end":3472,"line_start":75,"line_end":75,"column_start":21,"column_end":30},"alias_span":null,"name":"LinearMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":612},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3490,"byte_end":3496,"line_start":76,"line_end":76,"column_start":17,"column_end":23},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":725},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3511,"byte_end":3514,"line_start":77,"line_end":77,"column_start":14,"column_end":17},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1558},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":179025,"byte_end":179033,"line_start":92,"line_end":92,"column_start":17,"column_end":25},"alias_span":null,"name":"Consumer","value":"","parent":{"krate":0,"index":1525}},{"kind":"Use","ref_id":{"krate":0,"index":1572},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":179035,"byte_end":179043,"line_start":92,"line_end":92,"column_start":27,"column_end":35},"alias_span":null,"name":"Producer","value":"","parent":{"krate":0,"index":1525}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":0,"byte_end":3903,"line_start":1,"line_end":100,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":256},{"krate":0,"index":425},{"krate":0,"index":593},{"krate":0,"index":691},{"krate":0,"index":862},{"krate":0,"index":1027},{"krate":0,"index":1084},{"krate":0,"index":1206},{"krate":0,"index":1235},{"krate":0,"index":1337},{"krate":0,"index":1525},{"krate":0,"index":1726}],"decl_id":null,"docs":" `static` friendly data structures that don't require dynamic memory allocation","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3135,"byte_end":3141,"line_start":64,"line_end":64,"column_start":24,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3144,"byte_end":3166,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"deny(rust_2018_compatibility)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3167,"byte_end":3200,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"deny(rust_2018_idioms)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3201,"byte_end":3227,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"deny(warnings)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3228,"byte_end":3246,"line_start":68,"line_end":68,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":4256,"byte_end":4267,"line_start":16,"line_end":16,"column_start":10,"column_end":21},"name":"FnvIndexMap","qualname":"::indexmap::FnvIndexMap","value":"IndexMap<K, V, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" An `IndexMap` using the default FNV hasher\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1799},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":4691,"byte_end":4697,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::indexmap::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1809},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":4816,"byte_end":4819,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"Pos","qualname":"::indexmap::Pos","value":"Pos {  }","parent":null,"children":[{"krate":0,"index":1810}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":14366,"byte_end":14374,"line_start":329,"line_end":329,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::indexmap::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89}],"decl_id":null,"docs":" Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":14913,"byte_end":14916,"line_start":348,"line_end":348,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V, N, BuildHasherDefault<S>>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexMap`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":15291,"byte_end":15299,"line_start":364,"line_end":364,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, N, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":15783,"byte_end":15787,"line_start":383,"line_end":383,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, N, S>>::keys","value":"fn (&self) -> impl Iterator<Item = &K>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":16331,"byte_end":16337,"line_start":402,"line_end":402,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, N, S>>::values","value":"fn (&self) -> impl Iterator<Item = &V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":16989,"byte_end":16999,"line_start":425,"line_end":425,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, N, S>>::values_mut","value":"fn (&mut self) -> impl Iterator<Item = &mut V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":17593,"byte_end":17597,"line_start":444,"line_end":444,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, N, S>>::iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":18248,"byte_end":18256,"line_start":469,"line_end":469,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, N, S>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":18819,"byte_end":18822,"line_start":491,"line_end":491,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, N, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":19238,"byte_end":19246,"line_start":508,"line_end":508,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, N, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":19664,"byte_end":19669,"line_start":525,"line_end":525,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, N, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":20383,"byte_end":20386,"line_start":548,"line_end":548,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, N, S>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":21224,"byte_end":21236,"line_start":575,"line_end":575,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, N, S>>::contains_key","value":"fn <Q> (&self, key: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":22005,"byte_end":22012,"line_start":603,"line_end":603,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, N, S>>::get_mut","value":"fn <'v, Q> (&'v mut self, key: &Q) -> Option<&'v mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":23357,"byte_end":23363,"line_start":643,"line_end":643,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, N, S>>::insert","value":"fn (&mut self, key: K, value: V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":24326,"byte_end":24332,"line_start":673,"line_end":673,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, N, S>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":24873,"byte_end":24884,"line_start":689,"line_end":689,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, N, S>>::swap_remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return its value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":224},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":29679,"byte_end":29683,"line_start":886,"line_end":886,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexmap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":228}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":241},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":30096,"byte_end":30103,"line_start":906,"line_end":906,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::indexmap::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":245}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":275},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":32264,"byte_end":32275,"line_start":9,"line_end":9,"column_start":10,"column_end":21},"name":"FnvIndexSet","qualname":"::indexset::FnvIndexSet","value":"IndexSet<T, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" An `IndexSet` using the default FNV hasher\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":278},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":33303,"byte_end":33311,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::indexset::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":282}],"decl_id":null,"docs":" Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":33669,"byte_end":33672,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T, N, BuildHasherDefault<S>>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexSet`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":34189,"byte_end":34197,"line_start":83,"line_end":83,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, N, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":34711,"byte_end":34715,"line_start":104,"line_end":104,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, N, S>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":35750,"byte_end":35760,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, N, S>>::difference","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> Difference<'a, T, N2, S2>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference, i.e. the values that are in `self` but not in\n `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":36928,"byte_end":36948,"line_start":172,"line_end":172,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, N, S>>::symmetric_difference","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> impl Iterator<Item = &'a T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference, i.e. the values that are in `self`\n or in `other` but not in both.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":37948,"byte_end":37960,"line_start":203,"line_end":203,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, N, S>>::intersection","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> Intersection<'a, T, N2, S2>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection, i.e. the values that are both in `self` and\n `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":38968,"byte_end":38973,"line_start":237,"line_end":237,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, N, S>>::union","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> impl Iterator<Item = &'a T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union, i.e. all the values in `self` or `other`, without\n duplicates.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":39599,"byte_end":39602,"line_start":261,"line_end":261,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, N, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":40007,"byte_end":40015,"line_start":278,"line_end":278,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, N, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":40400,"byte_end":40405,"line_start":295,"line_end":295,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, N, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":40976,"byte_end":40984,"line_start":314,"line_end":314,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, N, S>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":41740,"byte_end":41751,"line_start":340,"line_end":340,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, N, S>>::is_disjoint","value":"fn <N2, S2> (&self, other: &IndexSet<T, N2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`. This is equivalent to\n checking for an empty intersection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":42578,"byte_end":42587,"line_start":366,"line_end":366,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, N, S>>::is_subset","value":"fn <N2, S2> (&self, other: &IndexSet<T, N2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another, i.e. `other` contains at least all the\n values in `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":43465,"byte_end":43476,"line_start":395,"line_end":395,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, N, S>>::is_superset","value":"fn <N2, S2> (&self, other: &IndexSet<T, N2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":"\n # Examples","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":44205,"byte_end":44211,"line_start":421,"line_end":421,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, N, S>>::insert","value":"fn (&mut self, value: T) -> Result<bool, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":44955,"byte_end":44961,"line_start":445,"line_end":445,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, N, S>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns `true` if the value was present in the set.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":383},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":47615,"byte_end":47619,"line_start":562,"line_end":562,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexset::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":386}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":397},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":47977,"byte_end":47987,"line_start":582,"line_end":582,"column_start":12,"column_end":22},"name":"Difference","qualname":"::indexset::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":48580,"byte_end":48592,"line_start":610,"line_end":610,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::indexset::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":440},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":49548,"byte_end":49557,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"LinearMap","qualname":"::linear_map::LinearMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed capacity map / dictionary that performs lookups via linear search","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":49844,"byte_end":49847,"line_start":24,"line_end":24,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::LinearMap<A>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `LinearMap` `const` constructor; wrap the returned value in\n [`LinearMap`](../struct.LinearMap.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":50458,"byte_end":50461,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearMap<K, V, N>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `LinearMap`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":50877,"byte_end":50885,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"capacity","qualname":"<LinearMap<K, V, N>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements that the map can hold","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":51324,"byte_end":51329,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinearMap<K, V, N>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":51833,"byte_end":51845,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<LinearMap<K, V, N>>::contains_key","value":"fn (&self, key: &K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":52345,"byte_end":52348,"line_start":124,"line_end":124,"column_start":12,"column_end":15},"name":"get","qualname":"<LinearMap<K, V, N>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":53014,"byte_end":53021,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<LinearMap<K, V, N>>::get_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":53627,"byte_end":53630,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"len","qualname":"<LinearMap<K, V, N>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in this map","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":54402,"byte_end":54408,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"insert","qualname":"<LinearMap<K, V, N>>::insert","value":"fn (&mut self, key: K, mut value: V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":55095,"byte_end":55103,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LinearMap<K, V, N>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":55645,"byte_end":55649,"line_start":248,"line_end":248,"column_start":12,"column_end":16},"name":"iter","qualname":"<LinearMap<K, V, N>>::iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":56403,"byte_end":56411,"line_start":277,"line_end":277,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<LinearMap<K, V, N>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order, with mutable references to the\n values","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":56996,"byte_end":57000,"line_start":300,"line_end":300,"column_start":12,"column_end":16},"name":"keys","qualname":"<LinearMap<K, V, N>>::keys","value":"fn (&self) -> impl Iterator<Item = &K>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":57566,"byte_end":57572,"line_start":320,"line_end":320,"column_start":12,"column_end":18},"name":"remove","qualname":"<LinearMap<K, V, N>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key was previously in the\n map","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":58344,"byte_end":58350,"line_start":351,"line_end":351,"column_start":12,"column_end":18},"name":"values","qualname":"<LinearMap<K, V, N>>::values","value":"fn (&self) -> impl Iterator<Item = &V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":58979,"byte_end":58989,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<LinearMap<K, V, N>>::values_mut","value":"fn (&mut self) -> impl Iterator<Item = &mut V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":521},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":60548,"byte_end":60556,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::linear_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":525}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":547},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":61608,"byte_end":61612,"line_start":505,"line_end":505,"column_start":12,"column_end":16},"name":"Iter","qualname":"::linear_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":551}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":569},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":62197,"byte_end":62204,"line_start":535,"line_end":535,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::linear_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":573}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":612},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":64194,"byte_end":64200,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"String","qualname":"::string::String","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":64439,"byte_end":64442,"line_start":25,"line_end":25,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::String<A>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `String` `const` constructor; wrap the returned value in [`String`](../struct.String.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":65054,"byte_end":65057,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<String<N>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `String` with a fixed capacity of `N`","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":65033,"byte_end":65042,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":66408,"byte_end":66417,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"from_utf8","qualname":"<String<N>>::from_utf8","value":"fn (vec: Vec<u8, N>) -> Result<String<N>, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes into a `String`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":66387,"byte_end":66396,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":66804,"byte_end":66823,"line_start":111,"line_end":111,"column_start":19,"column_end":38},"name":"from_utf8_unchecked","qualname":"<String<N>>::from_utf8_unchecked","value":"fn (mut vec: Vec<u8, N>) -> String<N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `String` without checking that the\n string contains valid UTF-8.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":66776,"byte_end":66785,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":67566,"byte_end":67576,"line_start":137,"line_end":137,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<String<N>>::into_bytes","value":"fn (self) -> Vec<u8, N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a byte vector.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":67545,"byte_end":67554,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":68102,"byte_end":68108,"line_start":158,"line_end":158,"column_start":12,"column_end":18},"name":"as_str","qualname":"<String<N>>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Extracts a string slice containing the entire string.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":68081,"byte_end":68090,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":68559,"byte_end":68569,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"as_mut_str","qualname":"<String<N>>::as_mut_str","value":"fn (&mut self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a mutable string slice.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":68538,"byte_end":68547,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":69131,"byte_end":69139,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"push_str","qualname":"<String<N>>::push_str","value":"fn (&mut self, string: &str) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a given string slice onto the end of this `String`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":69110,"byte_end":69119,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":69582,"byte_end":69590,"line_start":218,"line_end":218,"column_start":12,"column_end":20},"name":"capacity","qualname":"<String<N>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the String can hold","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":69561,"byte_end":69570,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":70191,"byte_end":70195,"line_start":245,"line_end":245,"column_start":12,"column_end":16},"name":"push","qualname":"<String<N>>::push","value":"fn (&mut self, c: char) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends the given [`char`] to the end of this `String`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":70170,"byte_end":70179,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":71197,"byte_end":71205,"line_start":284,"line_end":284,"column_start":12,"column_end":20},"name":"truncate","qualname":"<String<N>>::truncate","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens this `String` to the specified length.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":71176,"byte_end":71185,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":71982,"byte_end":71985,"line_start":313,"line_end":313,"column_start":12,"column_end":15},"name":"pop","qualname":"<String<N>>::pop","value":"fn (&mut self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last character from the string buffer and returns it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":72798,"byte_end":72803,"line_start":348,"line_end":348,"column_start":12,"column_end":17},"name":"clear","qualname":"<String<N>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncates this `String`, removing all contents.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":72777,"byte_end":72786,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":82827,"byte_end":82830,"line_start":8,"line_end":8,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::Vec<A>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `Vec` `const` constructor; wrap the returned value in [`Vec`](../struct.Vec.html)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":725},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":86966,"byte_end":86969,"line_start":163,"line_end":163,"column_start":12,"column_end":15},"name":"Vec","qualname":"::vec::Vec","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":87701,"byte_end":87704,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"new","qualname":"<Vec<T, N>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty vector with a fixed capacity of `N`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":87857,"byte_end":87865,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Vec<T, N>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the vector can hold\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":87976,"byte_end":87981,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"name":"clear","qualname":"<Vec<T, N>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":88549,"byte_end":88566,"line_start":227,"line_end":227,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<Vec<T, N>>::extend_from_slice","value":"fn (&mut self, other: &[T]) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all elements in a slice to the `Vec`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":88787,"byte_end":88790,"line_start":235,"line_end":235,"column_start":12,"column_end":15},"name":"pop","qualname":"<Vec<T, N>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and return it, or `None` if it's empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":89078,"byte_end":89082,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"push","qualname":"<Vec<T, N>>::push","value":"fn (&mut self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the back of the collection","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":89356,"byte_end":89364,"line_start":255,"line_end":255,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec<T, N>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping the rest.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":90155,"byte_end":90161,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"name":"resize","qualname":"<Vec<T, N>>::resize","value":"fn (&mut self, new_len: usize, value: T) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Resizes the Vec in-place so that len is equal to new_len.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":90935,"byte_end":90949,"line_start":301,"line_end":301,"column_start":12,"column_end":26},"name":"resize_default","qualname":"<Vec<T, N>>::resize_default","value":"fn (&mut self, new_len: usize) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":91875,"byte_end":91886,"line_start":336,"line_end":336,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<Vec<T, N>>::swap_remove","value":"fn (&mut self, index: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the vector and returns it.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":802},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":94445,"byte_end":94453,"line_start":468,"line_end":468,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806}],"decl_id":null,"docs":" An iterator that moves out of an [`Vec`][`Vec`].","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1084},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::binary_heap","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1096},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1106},{"krate":0,"index":1112},{"krate":0,"index":1131},{"krate":0,"index":1137},{"krate":0,"index":1145},{"krate":0,"index":1152},{"krate":0,"index":1157},{"krate":0,"index":1163},{"krate":0,"index":1168},{"krate":0,"index":1174},{"krate":0,"index":1178},{"krate":0,"index":1183},{"krate":0,"index":1188},{"krate":0,"index":1193},{"krate":0,"index":1198}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1100},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":116436,"byte_end":116439,"line_start":24,"line_end":24,"column_start":10,"column_end":13},"name":"Min","qualname":"::binary_heap::Min","value":"Min::{}","parent":null,"children":[],"decl_id":null,"docs":" Min-heap\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1101},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":116466,"byte_end":116469,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"Max","qualname":"::binary_heap::Max","value":"Max::{}","parent":null,"children":[],"decl_id":null,"docs":" Max-heap\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":116650,"byte_end":116653,"line_start":32,"line_end":32,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::BinaryHeap<A, K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `BinaryHeap` `const` constructor; wrap the returned value in\n [`BinaryHeap`](../struct.BinaryHeap.html)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1106},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":118333,"byte_end":118343,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::binary_heap::BinaryHeap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":119096,"byte_end":119099,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryHeap<T, N, K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty BinaryHeap as a $K-heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":119248,"byte_end":119256,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BinaryHeap<T, N, K>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the binary heap.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":119740,"byte_end":119745,"line_start":141,"line_end":141,"column_start":12,"column_end":17},"name":"clear","qualname":"<BinaryHeap<T, N, K>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the binary heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":120150,"byte_end":120153,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"len","qualname":"<BinaryHeap<T, N, K>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the binary heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":120637,"byte_end":120645,"line_start":177,"line_end":177,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BinaryHeap<T, N, K>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the binary heap is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":121251,"byte_end":121255,"line_start":199,"line_end":199,"column_start":12,"column_end":16},"name":"iter","qualname":"<BinaryHeap<T, N, K>>::iter","value":"fn (&self) -> slice::Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":121563,"byte_end":121571,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<BinaryHeap<T, N, K>>::iter_mut","value":"fn (&mut self) -> slice::IterMut<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":122178,"byte_end":122182,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"peek","qualname":"<BinaryHeap<T, N, K>>::peek","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or\n None if it is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":122991,"byte_end":122999,"line_start":257,"line_end":257,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<BinaryHeap<T, N, K>>::peek_mut","value":"fn (&mut self) -> Option<PeekMut<'_, T, N, K>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the greatest item in the binary heap, or\n `None` if it is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":123762,"byte_end":123765,"line_start":283,"line_end":283,"column_start":12,"column_end":15},"name":"pop","qualname":"<BinaryHeap<T, N, K>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, or None if it is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":124107,"byte_end":124120,"line_start":293,"line_end":293,"column_start":19,"column_end":32},"name":"pop_unchecked","qualname":"<BinaryHeap<T, N, K>>::pop_unchecked","value":"fn (&mut self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, without checking if the binary heap is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":124804,"byte_end":124808,"line_start":317,"line_end":317,"column_start":12,"column_end":16},"name":"push","qualname":"<BinaryHeap<T, N, K>>::push","value":"fn (&mut self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":125090,"byte_end":125104,"line_start":327,"line_end":327,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<BinaryHeap<T, N, K>>::push_unchecked","value":"fn (&mut self, item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap without first checking if it's full.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1145},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":128609,"byte_end":128616,"line_start":440,"line_end":440,"column_start":12,"column_end":19},"name":"PeekMut","qualname":"::binary_heap::PeekMut","value":"PeekMut {  }","parent":null,"children":[{"krate":0,"index":1150},{"krate":0,"index":1151}],"decl_id":null,"docs":" Structure wrapping a mutable reference to the greatest item on a\n `BinaryHeap`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":129798,"byte_end":129801,"line_start":497,"line_end":497,"column_start":12,"column_end":15},"name":"pop","qualname":"<PeekMut>::pop","value":"fn (mut this: PeekMut<'a, T, N, K>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the peeked value from the heap and returns it.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1206},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/i.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i","qualname":"::i","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/i.rs","parent":null,"children":[{"krate":0,"index":1207},{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1218},{"krate":0,"index":1221},{"krate":0,"index":1228},{"krate":0,"index":1231}],"decl_id":null,"docs":" Unfortunate implementation detail required to construct `heapless` types in const context\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1213},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/i.rs","byte_start":134795,"byte_end":134805,"line_start":9,"line_end":9,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::i::BinaryHeap","value":"BinaryHeap {  }","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1217}],"decl_id":null,"docs":" `const-fn` version of [`BinaryHeap`](../binary_heap/struct.BinaryHeap.html)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1218},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/i.rs","byte_start":134961,"byte_end":134970,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"LinearMap","qualname":"::i::LinearMap","value":"LinearMap {  }","parent":null,"children":[{"krate":0,"index":1220}],"decl_id":null,"docs":" `const-fn` version of [`LinearMap`](../struct.LinearMap.html)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1221},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/i.rs","byte_start":135110,"byte_end":135115,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Queue","qualname":"::i::Queue","value":"Queue {  }","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"decl_id":null,"docs":" `const-fn` version of [`spsc::Queue`](../spsc/struct.Queue.html)\n","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/i.rs","byte_start":135079,"byte_end":135098,"line_start":20,"line_end":20,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1228},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/i.rs","byte_start":135417,"byte_end":135423,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"String","qualname":"::i::String","value":"String {  }","parent":null,"children":[{"krate":0,"index":1230}],"decl_id":null,"docs":" `const-fn` version of [`String`](../struct.String.html)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1231},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/i.rs","byte_start":135525,"byte_end":135528,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"Vec","qualname":"::i::Vec","value":"Vec {  }","parent":null,"children":[{"krate":0,"index":1233},{"krate":0,"index":1234}],"decl_id":null,"docs":" `const-fn` version of [`Vec`](../struct.Vec.html)\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1235},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpmc","qualname":"::mpmc","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1242},{"krate":0,"index":1248},{"krate":0,"index":1254},{"krate":0,"index":1256},{"krate":0,"index":1262},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1276},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1290},{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1304},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1318},{"krate":0,"index":1324},{"krate":0,"index":1326},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1335}],"decl_id":null,"docs":" A fixed capacity Multiple-Producer Multiple-Consumer (MPMC) lock-free queue","sig":null,"attributes":[{"value":"cfg(all (has_cas, feature = \"cas\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3753,"byte_end":3790,"line_start":93,"line_end":93,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1242},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":138782,"byte_end":138784,"line_start":92,"line_end":92,"column_start":12,"column_end":14},"name":"Q2","qualname":"::mpmc::Q2","value":"Q2 {  }","parent":null,"children":[{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1247}],"decl_id":null,"docs":" MPMC queue with a capacity for 2 elements\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":138978,"byte_end":138981,"line_start":102,"line_end":102,"column_start":18,"column_end":21},"name":"new","qualname":"<Q2<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":139274,"byte_end":139281,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q2<T>>::dequeue","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":139517,"byte_end":139524,"line_start":118,"line_end":118,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q2<T>>::enqueue","value":"fn (&self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1256},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":139866,"byte_end":139868,"line_start":133,"line_end":133,"column_start":12,"column_end":14},"name":"Q4","qualname":"::mpmc::Q4","value":"Q4 {  }","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1260},{"krate":0,"index":1261}],"decl_id":null,"docs":" MPMC queue with a capacity for 4 elements\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":140062,"byte_end":140065,"line_start":143,"line_end":143,"column_start":18,"column_end":21},"name":"new","qualname":"<Q4<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":140386,"byte_end":140393,"line_start":152,"line_end":152,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q4<T>>::dequeue","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":140629,"byte_end":140636,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q4<T>>::enqueue","value":"fn (&self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1270},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":140978,"byte_end":140980,"line_start":174,"line_end":174,"column_start":12,"column_end":14},"name":"Q8","qualname":"::mpmc::Q8","value":"Q8 {  }","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1275}],"decl_id":null,"docs":" MPMC queue with a capacity for 8 elements\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":141174,"byte_end":141177,"line_start":184,"line_end":184,"column_start":18,"column_end":21},"name":"new","qualname":"<Q8<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":141697,"byte_end":141704,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q8<T>>::dequeue","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":141940,"byte_end":141947,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q8<T>>::enqueue","value":"fn (&self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1284},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":142290,"byte_end":142293,"line_start":224,"line_end":224,"column_start":12,"column_end":15},"name":"Q16","qualname":"::mpmc::Q16","value":"Q16 {  }","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1289}],"decl_id":null,"docs":" MPMC queue with a capacity for 16 elements\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":142490,"byte_end":142493,"line_start":234,"line_end":234,"column_start":18,"column_end":21},"name":"new","qualname":"<Q16<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":143259,"byte_end":143266,"line_start":260,"line_end":260,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q16<T>>::dequeue","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":143502,"byte_end":143509,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q16<T>>::enqueue","value":"fn (&self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1298},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":143853,"byte_end":143856,"line_start":282,"line_end":282,"column_start":12,"column_end":15},"name":"Q32","qualname":"::mpmc::Q32","value":"Q32 {  }","parent":null,"children":[{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":1303}],"decl_id":null,"docs":" MPMC queue with a capacity for 32 elements\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":144053,"byte_end":144056,"line_start":292,"line_end":292,"column_start":18,"column_end":21},"name":"new","qualname":"<Q32<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":145318,"byte_end":145325,"line_start":334,"line_end":334,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q32<T>>::dequeue","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":145561,"byte_end":145568,"line_start":341,"line_end":341,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q32<T>>::enqueue","value":"fn (&self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1312},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":145912,"byte_end":145915,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"Q64","qualname":"::mpmc::Q64","value":"Q64 {  }","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1316},{"krate":0,"index":1317}],"decl_id":null,"docs":" MPMC queue with a capacity for 64 elements\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":146112,"byte_end":146115,"line_start":366,"line_end":366,"column_start":18,"column_end":21},"name":"new","qualname":"<Q64<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":148369,"byte_end":148376,"line_start":440,"line_end":440,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q64<T>>::dequeue","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":148612,"byte_end":148619,"line_start":447,"line_end":447,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q64<T>>::enqueue","value":"fn (&self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1337},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pool","qualname":"::pool","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","parent":null,"children":[{"krate":0,"index":1338},{"krate":0,"index":1342},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1451},{"krate":0,"index":1455},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1470},{"krate":0,"index":1474},{"krate":0,"index":1479},{"krate":0,"index":1482},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1487},{"krate":0,"index":1490},{"krate":0,"index":1494},{"krate":0,"index":1497},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1507},{"krate":0,"index":1510},{"krate":0,"index":1513},{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":1521}],"decl_id":null,"docs":" A heap-less, interrupt-safe, lock-free memory pool (\\*)","sig":null,"attributes":[{"value":"cfg(all (has_cas, feature = \"cas\"))","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3805,"byte_end":3842,"line_start":95,"line_end":95,"column_start":1,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":1361},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"singleton","qualname":"::pool::singleton","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","parent":null,"children":[{"krate":0,"index":1362},{"krate":0,"index":1377},{"krate":0,"index":1380},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1393},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1408},{"krate":0,"index":1411},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1421},{"krate":0,"index":1424},{"krate":0,"index":1427},{"krate":0,"index":1432},{"krate":0,"index":1436},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1444},{"krate":0,"index":1447}],"decl_id":null,"docs":" `Pool` as a global singleton\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1385},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":169781,"byte_end":169785,"line_start":38,"line_end":38,"column_start":11,"column_end":15},"name":"Pool","qualname":"::pool::singleton::Pool","value":"Pool","parent":null,"children":[{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1391}],"decl_id":null,"docs":" A global singleton memory pool\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1386},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":169857,"byte_end":169861,"line_start":40,"line_end":40,"column_start":10,"column_end":14},"name":"Data","qualname":"::pool::singleton::Pool::Data","value":"type Data: 'static;","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" The type of data that can be allocated on this pool\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":169899,"byte_end":169902,"line_start":43,"line_end":43,"column_start":8,"column_end":11},"name":"ptr","qualname":"::pool::singleton::Pool::ptr","value":"fn () -> &'static super::Pool<Self::Data>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":170168,"byte_end":170173,"line_start":50,"line_end":50,"column_start":8,"column_end":13},"name":"alloc","qualname":"::pool::singleton::Pool::alloc","value":"fn () -> Option<Box<Self, Uninit>>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":170600,"byte_end":170604,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"grow","qualname":"::pool::singleton::Pool::grow","value":"fn (memory: &'static mut [u8]) -> usize","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":170863,"byte_end":170873,"line_start":73,"line_end":73,"column_start":8,"column_end":18},"name":"grow_exact","qualname":"::pool::singleton::Pool::grow_exact","value":"fn <A> (memory: &'static mut MaybeUninit<A>) -> usize","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1393},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":171115,"byte_end":171118,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::singleton::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":1396},{"krate":0,"index":1397}],"decl_id":null,"docs":" A memory block that belongs to the global memory pool, `POOL`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":171351,"byte_end":171355,"line_start":96,"line_end":96,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<P, Uninit>>::init","value":"fn (self, val: P::Data) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":171956,"byte_end":171962,"line_start":123,"line_end":123,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Box<P, Uninit>>::freeze","value":"fn (self) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" Freezes the contents of this memory block","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1451},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":159269,"byte_end":159273,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"Pool","qualname":"::pool::Pool","value":"Pool {  }","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1454}],"decl_id":null,"docs":" A lock-free memory pool\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":159931,"byte_end":159934,"line_start":200,"line_end":200,"column_start":18,"column_end":21},"name":"new","qualname":"<Pool<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty pool\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":160306,"byte_end":160311,"line_start":213,"line_end":213,"column_start":12,"column_end":17},"name":"alloc","qualname":"<Pool<T>>::alloc","value":"fn (&self) -> Option<Box<T, Uninit>>","parent":null,"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":160781,"byte_end":160785,"line_start":229,"line_end":229,"column_start":12,"column_end":16},"name":"free","qualname":"<Pool<T>>::free","value":"fn <S> (&self, value: Box<T, S>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Returns a memory block to the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":161304,"byte_end":161308,"line_start":247,"line_end":247,"column_start":12,"column_end":16},"name":"grow","qualname":"<Pool<T>>::grow","value":"fn (&self, memory: &'static mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":162225,"byte_end":162235,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"grow_exact","qualname":"<Pool<T>>::grow_exact","value":"fn <A> (&self, memory: &'static mut MaybeUninit<A>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1470},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164206,"byte_end":164210,"line_start":343,"line_end":343,"column_start":12,"column_end":16},"name":"Node","qualname":"::pool::Node","value":"Node {  }","parent":null,"children":[{"krate":0,"index":1472},{"krate":0,"index":1473}],"decl_id":null,"docs":" Unfortunate implementation detail required to use the\n [`Pool.grow_exact`](struct.Pool.html#method.grow_exact) method\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1474},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164298,"byte_end":164301,"line_start":349,"line_end":349,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":1477},{"krate":0,"index":1478}],"decl_id":null,"docs":" A memory block\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164458,"byte_end":164462,"line_start":356,"line_end":356,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<T, Uninit>>::init","value":"fn (self, val: T) -> Box<T, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1482},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164716,"byte_end":164722,"line_start":369,"line_end":369,"column_start":10,"column_end":16},"name":"Uninit","qualname":"::pool::Uninit","value":"Uninit::{}","parent":null,"children":[],"decl_id":null,"docs":" Uninitialized type state\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1483},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164763,"byte_end":164767,"line_start":372,"line_end":372,"column_start":10,"column_end":14},"name":"Init","qualname":"::pool::Init","value":"Init::{}","parent":null,"children":[],"decl_id":null,"docs":" Initialized type state\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1525},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spsc","qualname":"::spsc","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","parent":null,"children":[{"krate":0,"index":1526},{"krate":0,"index":1533},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1541},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1595},{"krate":0,"index":1599},{"krate":0,"index":1607},{"krate":0,"index":1614},{"krate":0,"index":1624},{"krate":0,"index":1630},{"krate":0,"index":1636},{"krate":0,"index":1643},{"krate":0,"index":1650},{"krate":0,"index":1659},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1672},{"krate":0,"index":1676},{"krate":0,"index":1679},{"krate":0,"index":2541},{"krate":0,"index":2545},{"krate":0,"index":2548},{"krate":0,"index":2552},{"krate":0,"index":2555},{"krate":0,"index":2564},{"krate":0,"index":2569},{"krate":0,"index":2573},{"krate":0,"index":2576},{"krate":0,"index":2580},{"krate":0,"index":2583},{"krate":0,"index":2592},{"krate":0,"index":2597},{"krate":0,"index":2601},{"krate":0,"index":2604},{"krate":0,"index":2608},{"krate":0,"index":2611},{"krate":0,"index":2620},{"krate":0,"index":1683},{"krate":0,"index":1693},{"krate":0,"index":1698},{"krate":0,"index":1707},{"krate":0,"index":1714},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":2625},{"krate":0,"index":2633},{"krate":0,"index":2640},{"krate":0,"index":2648}],"decl_id":null,"docs":" Fixed capacity Single Producer Single Consumer (SPSC) queue","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3857,"byte_end":3876,"line_start":97,"line_end":97,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/split.rs","byte_start":202328,"byte_end":202333,"line_start":17,"line_end":17,"column_start":12,"column_end":17},"name":"split","qualname":"<Queue<T, N, U, C>>::split","value":"fn <'rb> (&'rb mut self) -> (Producer<'rb, T, N, U, C>, Consumer<'rb, T, N, U, C>)","parent":null,"children":[],"decl_id":null,"docs":" Splits a statically allocated queue into producer and consumer end points\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1558},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/split.rs","byte_start":202859,"byte_end":202867,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"Consumer","qualname":"::spsc::split::Consumer","value":"Consumer {  }","parent":null,"children":[{"krate":0,"index":1564},{"krate":0,"index":1565}],"decl_id":null,"docs":" A queue \"consumer\"; it can dequeue items from the queue\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1572},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/split.rs","byte_start":203343,"byte_end":203351,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"Producer","qualname":"::spsc::split::Producer","value":"Producer {  }","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1579}],"decl_id":null,"docs":" A queue \"producer\"; it can enqueue items into the queue\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1586},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":179148,"byte_end":179157,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"MultiCore","qualname":"::spsc::MultiCore","value":"","parent":null,"children":[],"decl_id":null,"docs":" Multi core synchronization - a memory barrier is used for synchronization\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1588},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":179262,"byte_end":179272,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"SingleCore","qualname":"::spsc::SingleCore","value":"","parent":null,"children":[],"decl_id":null,"docs":" Single core synchronization - no memory barrier synchronization, just a compiler fence\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1607},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":181378,"byte_end":181383,"line_start":164,"line_end":164,"column_start":12,"column_end":17},"name":"Queue","qualname":"::spsc::Queue","value":"","parent":null,"children":[],"decl_id":null,"docs":" A statically allocated single producer single consumer queue with a capacity of `N` elements","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1619},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":181742,"byte_end":181750,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Queue<T, N, U, C>>::capacity","value":"fn (&self) -> U","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the queue can hold\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1620},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":181872,"byte_end":181880,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Queue<T, N, U, C>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue has a length of 0\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":182003,"byte_end":182007,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"iter","qualname":"<Queue<T, N, U, C>>::iter","value":"fn (&self) -> Iter<'_, T, N, U, C>","parent":null,"children":[],"decl_id":null,"docs":" Iterates from the front of the queue to the back\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":182225,"byte_end":182233,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Queue<T, N, U, C>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, T, N, U, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1671},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":190696,"byte_end":190699,"line_start":475,"line_end":475,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::Queue<A, usize, MultiCore>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1675},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":190910,"byte_end":190913,"line_start":485,"line_end":485,"column_start":12,"column_end":15},"name":"new","qualname":"<Queue<T, N, usize, MultiCore>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`spsc::Queue::usize`](struct.Queue.html#method.usize)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191158,"byte_end":191164,"line_start":493,"line_end":493,"column_start":25,"column_end":31},"name":"new_sc","qualname":"<crate::i::Queue<A, usize, SingleCore>>::new_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191392,"byte_end":191398,"line_start":503,"line_end":503,"column_start":19,"column_end":25},"name":"new_sc","qualname":"<Queue<T, N, usize, SingleCore>>::new_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`spsc::Queue::usize_sc`](struct.Queue.html#method.usize_sc)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2544},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191468,"byte_end":191470,"line_start":508,"line_end":508,"column_start":8,"column_end":10},"name":"u8","qualname":"<Queue<T, N, u8, MultiCore>>::u8","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2547},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191468,"byte_end":191470,"line_start":508,"line_end":508,"column_start":8,"column_end":10},"name":"u8","qualname":"<crate::i::Queue<A, u8, MultiCore>>::u8","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2551},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191472,"byte_end":191477,"line_start":508,"line_end":508,"column_start":12,"column_end":17},"name":"u8_sc","qualname":"<Queue<T, N, u8, SingleCore>>::u8_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2554},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191472,"byte_end":191477,"line_start":508,"line_end":508,"column_start":12,"column_end":17},"name":"u8_sc","qualname":"<crate::i::Queue<A, u8, SingleCore>>::u8_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191487,"byte_end":191490,"line_start":509,"line_end":509,"column_start":8,"column_end":11},"name":"u16","qualname":"<Queue<T, N, u16, MultiCore>>::u16","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2575},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191487,"byte_end":191490,"line_start":509,"line_end":509,"column_start":8,"column_end":11},"name":"u16","qualname":"<crate::i::Queue<A, u16, MultiCore>>::u16","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191492,"byte_end":191498,"line_start":509,"line_end":509,"column_start":13,"column_end":19},"name":"u16_sc","qualname":"<Queue<T, N, u16, SingleCore>>::u16_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2582},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191492,"byte_end":191498,"line_start":509,"line_end":509,"column_start":13,"column_end":19},"name":"u16_sc","qualname":"<crate::i::Queue<A, u16, SingleCore>>::u16_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2600},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191508,"byte_end":191513,"line_start":510,"line_end":510,"column_start":8,"column_end":13},"name":"usize","qualname":"<Queue<T, N, usize, MultiCore>>::usize","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2603},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191508,"byte_end":191513,"line_start":510,"line_end":510,"column_start":8,"column_end":13},"name":"usize","qualname":"<crate::i::Queue<A, usize, MultiCore>>::usize","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2607},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191515,"byte_end":191523,"line_start":510,"line_end":510,"column_start":15,"column_end":23},"name":"usize_sc","qualname":"<Queue<T, N, usize, SingleCore>>::usize_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2610},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191515,"byte_end":191523,"line_start":510,"line_end":510,"column_start":15,"column_end":23},"name":"usize_sc","qualname":"<crate::i::Queue<A, usize, SingleCore>>::usize_sc","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1698},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":192133,"byte_end":192137,"line_start":538,"line_end":538,"column_start":12,"column_end":16},"name":"Iter","qualname":"::spsc::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1706}],"decl_id":null,"docs":" An iterator over the items of a queue\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1714},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":192627,"byte_end":192634,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::spsc::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722}],"decl_id":null,"docs":" A mutable iterator over the items of a queue\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1737},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211118,"byte_end":211123,"line_start":9,"line_end":9,"column_start":22,"column_end":27},"name":"XCore","qualname":"::sealed::spsc::XCore","value":"XCore","parent":null,"children":[{"krate":0,"index":1738}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211137,"byte_end":211150,"line_start":10,"line_end":10,"column_start":12,"column_end":25},"name":"is_multi_core","qualname":"::sealed::spsc::XCore::is_multi_core","value":"fn () -> bool","parent":{"krate":0,"index":1737},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1743},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211458,"byte_end":211461,"line_start":27,"line_end":27,"column_start":22,"column_end":25},"name":"Uxx","qualname":"::sealed::spsc::Uxx","value":"Uxx: Into<usize> + Send","parent":null,"children":[{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1749}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211518,"byte_end":211526,"line_start":29,"line_end":29,"column_start":12,"column_end":20},"name":"saturate","qualname":"::sealed::spsc::Uxx::saturate","value":"fn (x: usize) -> Self","parent":{"krate":0,"index":1743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1745},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211581,"byte_end":211589,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"truncate","qualname":"::sealed::spsc::Uxx::truncate","value":"fn (x: usize) -> Self","parent":{"krate":0,"index":1743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211679,"byte_end":211691,"line_start":36,"line_end":36,"column_start":19,"column_end":31},"name":"load_acquire","qualname":"::sealed::spsc::Uxx::load_acquire","value":"fn <C> (x: *const Self) -> Self","parent":{"krate":0,"index":1743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211618,"byte_end":211637,"line_start":34,"line_end":34,"column_start":9,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211818,"byte_end":211830,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"load_relaxed","qualname":"::sealed::spsc::Uxx::load_relaxed","value":"fn (x: *const Self) -> Self","parent":{"krate":0,"index":1743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211764,"byte_end":211783,"line_start":40,"line_end":40,"column_start":9,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1749},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211926,"byte_end":211939,"line_start":46,"line_end":46,"column_start":19,"column_end":32},"name":"store_release","qualname":"::sealed::spsc::Uxx::store_release","value":"fn <C> (x: *const Self, val: Self) -> ()","parent":{"krate":0,"index":1743},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211865,"byte_end":211884,"line_start":44,"line_end":44,"column_start":9,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":1780},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":216237,"byte_end":216241,"line_start":194,"line_end":194,"column_start":22,"column_end":26},"name":"Kind","qualname":"::sealed::binary_heap::Kind","value":"Kind","parent":null,"children":[{"krate":0,"index":1781}],"decl_id":null,"docs":" The binary heap kind: min-heap or max-heap\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":216278,"byte_end":216286,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"ordering","qualname":"::sealed::binary_heap::Kind::ordering","value":"fn () -> Ordering","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":4397,"byte_end":4406,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":5176,"byte_end":5179,"line_start":49,"line_end":49,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":6240,"byte_end":6247,"line_start":97,"line_end":97,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":12466,"byte_end":12473,"line_start":273,"line_end":273,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":14543,"byte_end":14551,"line_start":338,"line_end":338,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":15075,"byte_end":15083,"line_start":356,"line_end":356,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":25680,"byte_end":25688,"line_start":718,"line_end":718,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":26010,"byte_end":26018,"line_start":732,"line_end":732,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":26312,"byte_end":26320,"line_start":744,"line_end":744,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":26642,"byte_end":26650,"line_start":759,"line_end":759,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":26955,"byte_end":26963,"line_start":771,"line_end":771,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":27297,"byte_end":27305,"line_start":785,"line_end":785,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":27773,"byte_end":27781,"line_start":802,"line_end":802,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":27951,"byte_end":27959,"line_start":811,"line_end":811,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":28321,"byte_end":28329,"line_start":827,"line_end":827,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":28702,"byte_end":28710,"line_start":842,"line_end":842,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":29768,"byte_end":29772,"line_start":890,"line_end":890,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":29967,"byte_end":29971,"line_start":898,"line_end":898,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":30191,"byte_end":30198,"line_start":910,"line_end":910,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":33458,"byte_end":33466,"line_start":52,"line_end":52,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":33771,"byte_end":33779,"line_start":66,"line_end":66,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":298},{"krate":0,"index":303},{"krate":0,"index":307},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":321},{"krate":0,"index":325},{"krate":0,"index":328},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":45138,"byte_end":45146,"line_start":454,"line_end":454,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":45394,"byte_end":45402,"line_start":467,"line_end":467,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":45683,"byte_end":45691,"line_start":478,"line_end":478,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":45976,"byte_end":45984,"line_start":491,"line_end":491,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":46342,"byte_end":46350,"line_start":504,"line_end":504,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":46668,"byte_end":46676,"line_start":518,"line_end":518,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":46996,"byte_end":47004,"line_start":532,"line_end":532,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":47694,"byte_end":47698,"line_start":566,"line_end":566,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":47851,"byte_end":47855,"line_start":574,"line_end":574,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":48200,"byte_end":48210,"line_start":592,"line_end":592,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":48805,"byte_end":48817,"line_start":620,"line_end":620,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":49696,"byte_end":49705,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":49950,"byte_end":49959,"line_start":31,"line_end":31,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":461},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":479},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":59127,"byte_end":59136,"line_start":381,"line_end":381,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":59394,"byte_end":59403,"line_start":394,"line_end":394,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":59635,"byte_end":59644,"line_start":405,"line_end":405,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":59781,"byte_end":59790,"line_start":415,"line_end":415,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":60026,"byte_end":60035,"line_start":428,"line_end":428,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":60287,"byte_end":60296,"line_start":439,"line_end":439,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":60698,"byte_end":60706,"line_start":462,"line_end":462,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":60900,"byte_end":60909,"line_start":473,"line_end":473,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":61691,"byte_end":61695,"line_start":509,"line_end":509,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":61877,"byte_end":61881,"line_start":517,"line_end":517,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":62018,"byte_end":62027,"line_start":525,"line_end":525,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":62286,"byte_end":62293,"line_start":539,"line_end":539,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":62515,"byte_end":62524,"line_start":547,"line_end":547,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":62876,"byte_end":62885,"line_start":562,"line_end":562,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":64311,"byte_end":64317,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":64536,"byte_end":64542,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":72873,"byte_end":72879,"line_start":353,"line_end":353,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73001,"byte_end":73007,"line_start":362,"line_end":362,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73194,"byte_end":73200,"line_start":373,"line_end":373,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73416,"byte_end":73422,"line_start":386,"line_end":386,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73600,"byte_end":73606,"line_start":397,"line_end":397,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73781,"byte_end":73787,"line_start":406,"line_end":406,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73962,"byte_end":73968,"line_start":415,"line_end":415,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74154,"byte_end":74160,"line_start":425,"line_end":425,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74348,"byte_end":74354,"line_start":435,"line_end":435,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74654,"byte_end":74660,"line_start":448,"line_end":448,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74807,"byte_end":74813,"line_start":459,"line_end":459,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74949,"byte_end":74955,"line_start":468,"line_end":468,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":75082,"byte_end":75088,"line_start":478,"line_end":478,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":75242,"byte_end":75248,"line_start":488,"line_end":488,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":76379,"byte_end":76385,"line_start":537,"line_end":537,"column_start":16,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":82711,"byte_end":82714,"line_start":6,"line_end":6,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":82961,"byte_end":82964,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":87081,"byte_end":87084,"line_start":167,"line_end":167,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":87214,"byte_end":87217,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92190,"byte_end":92193,"line_start":349,"line_end":349,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92313,"byte_end":92316,"line_start":358,"line_end":358,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92507,"byte_end":92510,"line_start":368,"line_end":368,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92660,"byte_end":92663,"line_start":377,"line_end":377,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92859,"byte_end":92862,"line_start":389,"line_end":389,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":93092,"byte_end":93095,"line_start":402,"line_end":402,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":93295,"byte_end":93298,"line_start":412,"line_end":412,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":93942,"byte_end":93945,"line_start":446,"line_end":446,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":94555,"byte_end":94563,"line_start":476,"line_end":476,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":95000,"byte_end":95008,"line_start":496,"line_end":496,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":95208,"byte_end":95216,"line_start":509,"line_end":509,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":95558,"byte_end":95561,"line_start":523,"line_end":523,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":95792,"byte_end":95795,"line_start":535,"line_end":535,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":96671,"byte_end":96674,"line_start":578,"line_end":578,"column_start":19,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":96752,"byte_end":96755,"line_start":585,"line_end":585,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":96911,"byte_end":96914,"line_start":596,"line_end":596,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":97065,"byte_end":97068,"line_start":605,"line_end":605,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":97206,"byte_end":97209,"line_start":615,"line_end":615,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":97349,"byte_end":97352,"line_start":625,"line_end":625,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":97483,"byte_end":97486,"line_start":635,"line_end":635,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":104606,"byte_end":104616,"line_start":15,"line_end":15,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":104962,"byte_end":104974,"line_start":27,"line_end":27,"column_start":52,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":105932,"byte_end":105940,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":106351,"byte_end":106363,"line_start":70,"line_end":70,"column_start":49,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":107387,"byte_end":107390,"line_start":101,"line_end":101,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":107680,"byte_end":107692,"line_start":112,"line_end":112,"column_start":46,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":108604,"byte_end":108612,"line_start":144,"line_end":144,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":963}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":109059,"byte_end":109071,"line_start":157,"line_end":157,"column_start":52,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":110141,"byte_end":110150,"line_start":189,"line_end":189,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":110487,"byte_end":110499,"line_start":201,"line_end":201,"column_start":49,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":111475,"byte_end":111481,"line_start":234,"line_end":234,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":111735,"byte_end":111747,"line_start":244,"line_end":244,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":113364,"byte_end":113374,"line_start":13,"line_end":13,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":113783,"byte_end":113791,"line_start":31,"line_end":31,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":114256,"byte_end":114259,"line_start":49,"line_end":49,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":114650,"byte_end":114658,"line_start":68,"line_end":68,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":115127,"byte_end":115136,"line_start":87,"line_end":87,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":115558,"byte_end":115564,"line_start":107,"line_end":107,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":116495,"byte_end":116505,"line_start":29,"line_end":29,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":118502,"byte_end":118512,"line_start":95,"line_end":95,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":126868,"byte_end":126872,"line_start":382,"line_end":382,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":128767,"byte_end":128774,"line_start":450,"line_end":450,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":128981,"byte_end":128988,"line_start":463,"line_end":463,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":129319,"byte_end":129326,"line_start":477,"line_end":477,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":129647,"byte_end":129654,"line_start":490,"line_end":490,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":129958,"byte_end":129962,"line_start":504,"line_end":504,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1177}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":130217,"byte_end":130227,"line_start":515,"line_end":515,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":130373,"byte_end":130383,"line_start":526,"line_end":526,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":130644,"byte_end":130654,"line_start":540,"line_end":540,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":130849,"byte_end":130859,"line_start":551,"line_end":551,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":138893,"byte_end":138895,"line_start":98,"line_end":98,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":139785,"byte_end":139787,"line_start":130,"line_end":130,"column_start":25,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":139977,"byte_end":139979,"line_start":139,"line_end":139,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":140897,"byte_end":140899,"line_start":171,"line_end":171,"column_start":25,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":141089,"byte_end":141091,"line_start":180,"line_end":180,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":142208,"byte_end":142210,"line_start":221,"line_end":221,"column_start":25,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":142403,"byte_end":142406,"line_start":230,"line_end":230,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":143770,"byte_end":143773,"line_start":279,"line_end":279,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":143966,"byte_end":143969,"line_start":288,"line_end":288,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":145829,"byte_end":145832,"line_start":353,"line_end":353,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":146025,"byte_end":146028,"line_start":362,"line_end":362,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":148880,"byte_end":148883,"line_start":459,"line_end":459,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":148983,"byte_end":148987,"line_start":466,"line_end":466,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1332}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":171266,"byte_end":171269,"line_start":91,"line_end":91,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":171721,"byte_end":171724,"line_start":115,"line_end":115,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1403}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":172521,"byte_end":172524,"line_start":143,"line_end":143,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":172668,"byte_end":172671,"line_start":154,"line_end":154,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":172805,"byte_end":172808,"line_start":163,"line_end":163,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1413}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173001,"byte_end":173004,"line_start":173,"line_end":173,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173196,"byte_end":173199,"line_start":183,"line_end":183,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173517,"byte_end":173520,"line_start":199,"line_end":199,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173597,"byte_end":173600,"line_start":206,"line_end":206,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173673,"byte_end":173676,"line_start":213,"line_end":213,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1430},{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173859,"byte_end":173862,"line_start":225,"line_end":225,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1435}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174041,"byte_end":174044,"line_start":235,"line_end":235,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174204,"byte_end":174207,"line_start":245,"line_end":245,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174275,"byte_end":174278,"line_start":252,"line_end":252,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174476,"byte_end":174479,"line_start":262,"line_end":262,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174640,"byte_end":174643,"line_start":272,"line_end":272,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1449}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":159815,"byte_end":159819,"line_start":194,"line_end":194,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":159851,"byte_end":159855,"line_start":196,"line_end":196,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":159871,"byte_end":159875,"line_start":198,"line_end":198,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1469}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164392,"byte_end":164395,"line_start":354,"line_end":354,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1481}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164799,"byte_end":164802,"line_start":374,"line_end":374,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164854,"byte_end":164857,"line_start":376,"line_end":376,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164902,"byte_end":164905,"line_start":378,"line_end":378,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165071,"byte_end":165074,"line_start":389,"line_end":389,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165226,"byte_end":165229,"line_start":398,"line_end":398,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1499},{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165366,"byte_end":165369,"line_start":406,"line_end":406,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165502,"byte_end":165505,"line_start":412,"line_end":412,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1506}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165673,"byte_end":165676,"line_start":421,"line_end":421,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1509}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165845,"byte_end":165848,"line_start":430,"line_end":430,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165983,"byte_end":165986,"line_start":439,"line_end":439,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":166029,"byte_end":166032,"line_start":441,"line_end":441,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1517}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":166205,"byte_end":166208,"line_start":450,"line_end":450,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":166344,"byte_end":166347,"line_start":459,"line_end":459,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1523}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/split.rs","byte_start":202144,"byte_end":202149,"line_start":10,"line_end":10,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/split.rs","byte_start":203087,"byte_end":203095,"line_start":43,"line_end":43,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/split.rs","byte_start":203568,"byte_end":203576,"line_start":64,"line_end":64,"column_start":35,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":179503,"byte_end":179509,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1598}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":179672,"byte_end":179678,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":181574,"byte_end":181579,"line_start":172,"line_end":172,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":182637,"byte_end":182642,"line_start":215,"line_end":215,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":182908,"byte_end":182913,"line_start":230,"line_end":230,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1635}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":183175,"byte_end":183180,"line_start":242,"line_end":242,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":183500,"byte_end":183505,"line_start":257,"line_end":257,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":190537,"byte_end":190542,"line_start":472,"line_end":472,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":190765,"byte_end":190770,"line_start":480,"line_end":480,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":190991,"byte_end":190996,"line_start":490,"line_end":490,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1678}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191233,"byte_end":191238,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1682}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191592,"byte_end":191597,"line_start":512,"line_end":512,"column_start":66,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1691}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191975,"byte_end":191980,"line_start":528,"line_end":528,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":192326,"byte_end":192330,"line_start":549,"line_end":549,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1713}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211219,"byte_end":211229,"line_start":14,"line_end":14,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1740}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211354,"byte_end":211363,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1742}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":216334,"byte_end":216337,"line_start":199,"line_end":199,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1783}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":216445,"byte_end":216448,"line_start":205,"line_end":205,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1785}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3729,"byte_end":3740,"line_start":91,"line_end":91,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1084}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3750,"byte_end":3751,"line_start":92,"line_end":92,"column_start":9,"column_end":10},"ref_id":{"krate":0,"index":1206}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3799,"byte_end":3803,"line_start":94,"line_end":94,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1235}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3851,"byte_end":3855,"line_start":96,"line_end":96,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1337}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":159218,"byte_end":159227,"line_start":179,"line_end":179,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1361}},{"kind":"Mod","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/lib.rs","byte_start":3885,"byte_end":3889,"line_start":98,"line_end":98,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1525}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":4397,"byte_end":4406,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":5176,"byte_end":5179,"line_start":49,"line_end":49,"column_start":6,"column_end":9},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":6240,"byte_end":6247,"line_start":97,"line_end":97,"column_start":15,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":59},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":12466,"byte_end":12473,"line_start":273,"line_end":273,"column_start":25,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":59},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":14543,"byte_end":14551,"line_start":338,"line_end":338,"column_start":18,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":15075,"byte_end":15083,"line_start":356,"line_end":356,"column_start":18,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":25680,"byte_end":25688,"line_start":718,"line_end":718,"column_start":47,"column_end":55},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":26010,"byte_end":26018,"line_start":732,"line_end":732,"column_start":50,"column_end":58},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":1784}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":26312,"byte_end":26320,"line_start":744,"line_end":744,"column_start":28,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":26642,"byte_end":26650,"line_start":759,"line_end":759,"column_start":33,"column_end":41},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":26955,"byte_end":26963,"line_start":771,"line_end":771,"column_start":30,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":27297,"byte_end":27305,"line_start":785,"line_end":785,"column_start":64,"column_end":72},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":27773,"byte_end":27781,"line_start":802,"line_end":802,"column_start":25,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":27951,"byte_end":27959,"line_start":811,"line_end":811,"column_start":37,"column_end":45},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":28321,"byte_end":28329,"line_start":827,"line_end":827,"column_start":49,"column_end":57},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":28702,"byte_end":28710,"line_start":842,"line_end":842,"column_start":43,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":3947}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":29768,"byte_end":29772,"line_start":890,"line_end":890,"column_start":29,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":224},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":29967,"byte_end":29971,"line_start":898,"line_end":898,"column_start":26,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":224},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexmap.rs","byte_start":30191,"byte_end":30198,"line_start":910,"line_end":910,"column_start":29,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":241},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":33458,"byte_end":33466,"line_start":52,"line_end":52,"column_start":15,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":33771,"byte_end":33779,"line_start":66,"line_end":66,"column_start":15,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":45138,"byte_end":45146,"line_start":454,"line_end":454,"column_start":25,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":278},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":45394,"byte_end":45402,"line_start":467,"line_end":467,"column_start":30,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":278},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":45683,"byte_end":45691,"line_start":478,"line_end":478,"column_start":27,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":278},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":45976,"byte_end":45984,"line_start":491,"line_end":491,"column_start":60,"column_end":68},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":278},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":46342,"byte_end":46350,"line_start":504,"line_end":504,"column_start":29,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":278},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":46668,"byte_end":46676,"line_start":518,"line_end":518,"column_start":37,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":278},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":46996,"byte_end":47004,"line_start":532,"line_end":532,"column_start":35,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":278},"to":{"krate":1,"index":3947}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":47694,"byte_end":47698,"line_start":566,"line_end":566,"column_start":26,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":47851,"byte_end":47855,"line_start":574,"line_end":574,"column_start":23,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":383},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":48200,"byte_end":48210,"line_start":592,"line_end":592,"column_start":32,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":397},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/indexset.rs","byte_start":48805,"byte_end":48817,"line_start":620,"line_end":620,"column_start":32,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":411},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":49696,"byte_end":49705,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":49950,"byte_end":49959,"line_start":31,"line_end":31,"column_start":15,"column_end":24},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":59127,"byte_end":59136,"line_start":381,"line_end":381,"column_start":44,"column_end":53},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":1780}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":59394,"byte_end":59403,"line_start":394,"line_end":394,"column_start":47,"column_end":56},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":1784}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":59635,"byte_end":59644,"line_start":405,"line_end":405,"column_start":27,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":59781,"byte_end":59790,"line_start":415,"line_end":415,"column_start":25,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":60026,"byte_end":60035,"line_start":428,"line_end":428,"column_start":30,"column_end":39},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":60287,"byte_end":60296,"line_start":439,"line_end":439,"column_start":40,"column_end":49},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":3947}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":60698,"byte_end":60706,"line_start":462,"line_end":462,"column_start":28,"column_end":36},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":521},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":60900,"byte_end":60909,"line_start":473,"line_end":473,"column_start":32,"column_end":41},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":3951}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":61691,"byte_end":61695,"line_start":509,"line_end":509,"column_start":29,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":547},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":61877,"byte_end":61881,"line_start":517,"line_end":517,"column_start":26,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":547},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":62018,"byte_end":62027,"line_start":525,"line_end":525,"column_start":24,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":62286,"byte_end":62293,"line_start":539,"line_end":539,"column_start":29,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":569},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":62515,"byte_end":62524,"line_start":547,"line_end":547,"column_start":54,"column_end":63},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/linear_map.rs","byte_start":62876,"byte_end":62885,"line_start":562,"line_end":562,"column_start":22,"column_end":31},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":440},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":64311,"byte_end":64317,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":64536,"byte_end":64542,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":72873,"byte_end":72879,"line_start":353,"line_end":353,"column_start":21,"column_end":27},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73001,"byte_end":73007,"line_start":362,"line_end":362,"column_start":31,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":2258}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73194,"byte_end":73200,"line_start":373,"line_end":373,"column_start":26,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":6815}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73416,"byte_end":73422,"line_start":386,"line_end":386,"column_start":19,"column_end":25},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73600,"byte_end":73606,"line_start":397,"line_end":397,"column_start":24,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73781,"byte_end":73787,"line_start":406,"line_end":406,"column_start":26,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":7648}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":73962,"byte_end":73968,"line_start":415,"line_end":415,"column_start":24,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74154,"byte_end":74160,"line_start":425,"line_end":425,"column_start":26,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":612},"to":{"krate":6,"index":72}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74348,"byte_end":74354,"line_start":435,"line_end":435,"column_start":24,"column_end":30},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":7602}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74654,"byte_end":74660,"line_start":448,"line_end":448,"column_start":24,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74807,"byte_end":74813,"line_start":459,"line_end":459,"column_start":27,"column_end":33},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":74949,"byte_end":74955,"line_start":468,"line_end":468,"column_start":24,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":2249}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":75082,"byte_end":75088,"line_start":478,"line_end":478,"column_start":25,"column_end":31},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":2249}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":75242,"byte_end":75248,"line_start":488,"line_end":488,"column_start":40,"column_end":46},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/string.rs","byte_start":76379,"byte_end":76385,"line_start":537,"line_end":537,"column_start":16,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":612},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":82711,"byte_end":82714,"line_start":6,"line_end":6,"column_start":19,"column_end":22},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":82961,"byte_end":82964,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":87081,"byte_end":87084,"line_start":167,"line_end":167,"column_start":22,"column_end":25},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":87214,"byte_end":87217,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":725},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92190,"byte_end":92193,"line_start":349,"line_end":349,"column_start":24,"column_end":27},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92313,"byte_end":92316,"line_start":358,"line_end":358,"column_start":27,"column_end":30},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92507,"byte_end":92510,"line_start":368,"line_end":368,"column_start":21,"column_end":24},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92660,"byte_end":92663,"line_start":377,"line_end":377,"column_start":26,"column_end":29},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":92859,"byte_end":92862,"line_start":389,"line_end":389,"column_start":34,"column_end":37},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":3960}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":93092,"byte_end":93095,"line_start":402,"line_end":402,"column_start":27,"column_end":30},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":93295,"byte_end":93298,"line_start":412,"line_end":412,"column_start":29,"column_end":32},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":725},"to":{"krate":6,"index":72}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":93942,"byte_end":93945,"line_start":446,"line_end":446,"column_start":32,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":3947}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":94555,"byte_end":94563,"line_start":476,"line_end":476,"column_start":25,"column_end":33},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":802},"to":{"krate":1,"index":3653}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":95000,"byte_end":95008,"line_start":496,"line_end":496,"column_start":22,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":802},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":95208,"byte_end":95216,"line_start":509,"line_end":509,"column_start":21,"column_end":29},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":802},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":95558,"byte_end":95561,"line_start":523,"line_end":523,"column_start":29,"column_end":32},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":3951}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":95792,"byte_end":95795,"line_start":535,"line_end":535,"column_start":46,"column_end":49},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":96671,"byte_end":96674,"line_start":578,"line_end":578,"column_start":19,"column_end":22},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":96752,"byte_end":96755,"line_start":585,"line_end":585,"column_start":27,"column_end":30},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":96911,"byte_end":96914,"line_start":596,"line_end":596,"column_start":30,"column_end":33},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":97065,"byte_end":97068,"line_start":605,"line_end":605,"column_start":33,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":2249}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":97206,"byte_end":97209,"line_start":615,"line_end":615,"column_start":33,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":2252}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":97349,"byte_end":97352,"line_start":625,"line_end":625,"column_start":27,"column_end":30},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":2249}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/vec.rs","byte_start":97483,"byte_end":97486,"line_start":635,"line_end":635,"column_start":27,"column_end":30},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":2252}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":104606,"byte_end":104616,"line_start":15,"line_end":15,"column_start":44,"column_end":54},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1106},"to":{"krate":8,"index":835}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":104962,"byte_end":104974,"line_start":27,"line_end":27,"column_start":52,"column_end":64},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":898},"to":{"krate":8,"index":919}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":105932,"byte_end":105940,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":278},"to":{"krate":8,"index":835}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":106351,"byte_end":106363,"line_start":70,"line_end":70,"column_start":49,"column_end":61},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":921},"to":{"krate":8,"index":919}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":107387,"byte_end":107390,"line_start":101,"line_end":101,"column_start":38,"column_end":41},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":725},"to":{"krate":8,"index":835}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":107680,"byte_end":107692,"line_start":112,"line_end":112,"column_start":46,"column_end":58},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":943},"to":{"krate":8,"index":919}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":108604,"byte_end":108612,"line_start":144,"line_end":144,"column_start":44,"column_end":52},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":83},"to":{"krate":8,"index":835}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":109059,"byte_end":109071,"line_start":157,"line_end":157,"column_start":52,"column_end":64},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":965},"to":{"krate":8,"index":919}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":110141,"byte_end":110150,"line_start":189,"line_end":189,"column_start":41,"column_end":50},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":440},"to":{"krate":8,"index":835}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":110487,"byte_end":110499,"line_start":201,"line_end":201,"column_start":49,"column_end":61},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":990},"to":{"krate":8,"index":919}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":111475,"byte_end":111481,"line_start":234,"line_end":234,"column_start":35,"column_end":41},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":612},"to":{"krate":8,"index":835}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/de.rs","byte_start":111735,"byte_end":111747,"line_start":244,"line_end":244,"column_start":43,"column_end":55},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1011},"to":{"krate":8,"index":919}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":113364,"byte_end":113374,"line_start":13,"line_end":13,"column_start":32,"column_end":42},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1106},"to":{"krate":8,"index":1212}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":113783,"byte_end":113791,"line_start":31,"line_end":31,"column_start":29,"column_end":37},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":278},"to":{"krate":8,"index":1212}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":114256,"byte_end":114259,"line_start":49,"line_end":49,"column_start":26,"column_end":29},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":725},"to":{"krate":8,"index":1212}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":114650,"byte_end":114658,"line_start":68,"line_end":68,"column_start":32,"column_end":40},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":83},"to":{"krate":8,"index":1212}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":115127,"byte_end":115136,"line_start":87,"line_end":87,"column_start":29,"column_end":38},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":440},"to":{"krate":8,"index":1212}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/ser.rs","byte_start":115558,"byte_end":115564,"line_start":107,"line_end":107,"column_start":23,"column_end":29},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":612},"to":{"krate":8,"index":1212}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":116495,"byte_end":116505,"line_start":29,"line_end":29,"column_start":22,"column_end":32},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":118502,"byte_end":118512,"line_start":95,"line_end":95,"column_start":15,"column_end":25},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":126868,"byte_end":126872,"line_start":382,"line_end":382,"column_start":13,"column_end":17},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":128767,"byte_end":128774,"line_start":450,"line_end":450,"column_start":24,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":128981,"byte_end":128988,"line_start":463,"line_end":463,"column_start":25,"column_end":32},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":129319,"byte_end":129326,"line_start":477,"line_end":477,"column_start":28,"column_end":35},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":129647,"byte_end":129654,"line_start":490,"line_end":490,"column_start":19,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":129958,"byte_end":129962,"line_start":504,"line_end":504,"column_start":22,"column_end":26},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1131},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":130217,"byte_end":130227,"line_start":515,"line_end":515,"column_start":27,"column_end":37},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1106},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":130373,"byte_end":130383,"line_start":526,"line_end":526,"column_start":25,"column_end":35},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1106},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":130644,"byte_end":130654,"line_start":540,"line_end":540,"column_start":24,"column_end":34},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1106},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/binary_heap.rs","byte_start":130849,"byte_end":130859,"line_start":551,"line_end":551,"column_start":30,"column_end":40},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1106},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":138893,"byte_end":138895,"line_start":98,"line_end":98,"column_start":9,"column_end":11},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":139785,"byte_end":139787,"line_start":130,"line_end":130,"column_start":25,"column_end":27},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1242},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":139977,"byte_end":139979,"line_start":139,"line_end":139,"column_start":9,"column_end":11},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":140897,"byte_end":140899,"line_start":171,"line_end":171,"column_start":25,"column_end":27},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1256},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":141089,"byte_end":141091,"line_start":180,"line_end":180,"column_start":9,"column_end":11},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":142208,"byte_end":142210,"line_start":221,"line_end":221,"column_start":25,"column_end":27},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1270},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":142403,"byte_end":142406,"line_start":230,"line_end":230,"column_start":9,"column_end":12},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":143770,"byte_end":143773,"line_start":279,"line_end":279,"column_start":25,"column_end":28},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1284},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":143966,"byte_end":143969,"line_start":288,"line_end":288,"column_start":9,"column_end":12},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":145829,"byte_end":145832,"line_start":353,"line_end":353,"column_start":25,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1298},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":146025,"byte_end":146028,"line_start":362,"line_end":362,"column_start":9,"column_end":12},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":148880,"byte_end":148883,"line_start":459,"line_end":459,"column_start":25,"column_end":28},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1312},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/mpmc.rs","byte_start":148983,"byte_end":148987,"line_start":466,"line_end":466,"column_start":9,"column_end":13},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":171266,"byte_end":171269,"line_start":91,"line_end":91,"column_start":9,"column_end":12},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":171721,"byte_end":171724,"line_start":115,"line_end":115,"column_start":9,"column_end":12},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":172521,"byte_end":172524,"line_start":143,"line_end":143,"column_start":19,"column_end":22},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":172668,"byte_end":172671,"line_start":154,"line_end":154,"column_start":22,"column_end":25},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":172805,"byte_end":172808,"line_start":163,"line_end":163,"column_start":24,"column_end":27},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173001,"byte_end":173004,"line_start":173,"line_end":173,"column_start":26,"column_end":29},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":7648}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173196,"byte_end":173199,"line_start":183,"line_end":183,"column_start":21,"column_end":24},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173517,"byte_end":173520,"line_start":199,"line_end":199,"column_start":28,"column_end":31},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173597,"byte_end":173600,"line_start":206,"line_end":206,"column_start":28,"column_end":31},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173673,"byte_end":173676,"line_start":213,"line_end":213,"column_start":24,"column_end":27},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1393},"to":{"krate":10,"index":7}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":173859,"byte_end":173862,"line_start":225,"line_end":225,"column_start":27,"column_end":30},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1393},"to":{"krate":10,"index":10}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174041,"byte_end":174044,"line_start":235,"line_end":235,"column_start":23,"column_end":26},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174204,"byte_end":174207,"line_start":245,"line_end":245,"column_start":16,"column_end":19},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174275,"byte_end":174278,"line_start":252,"line_end":252,"column_start":24,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":2077}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174476,"byte_end":174479,"line_start":262,"line_end":262,"column_start":17,"column_end":20},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":2066}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/singleton.rs","byte_start":174640,"byte_end":174643,"line_start":272,"line_end":272,"column_start":18,"column_end":21},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1393},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":159815,"byte_end":159819,"line_start":194,"line_end":194,"column_start":25,"column_end":29},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1451},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":159851,"byte_end":159855,"line_start":196,"line_end":196,"column_start":25,"column_end":29},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1451},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":159871,"byte_end":159875,"line_start":198,"line_end":198,"column_start":9,"column_end":13},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164392,"byte_end":164395,"line_start":354,"line_end":354,"column_start":9,"column_end":12},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164799,"byte_end":164802,"line_start":374,"line_end":374,"column_start":28,"column_end":31},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164854,"byte_end":164857,"line_start":376,"line_end":376,"column_start":28,"column_end":31},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":1545}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":164902,"byte_end":164905,"line_start":378,"line_end":378,"column_start":21,"column_end":24},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1474},"to":{"krate":10,"index":7}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165071,"byte_end":165074,"line_start":389,"line_end":389,"column_start":24,"column_end":27},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1474},"to":{"krate":10,"index":10}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165226,"byte_end":165229,"line_start":398,"line_end":398,"column_start":19,"column_end":22},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":1704}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165366,"byte_end":165369,"line_start":406,"line_end":406,"column_start":22,"column_end":25},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":1715}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165502,"byte_end":165505,"line_start":412,"line_end":412,"column_start":24,"column_end":27},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165673,"byte_end":165676,"line_start":421,"line_end":421,"column_start":26,"column_end":29},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":7648}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165845,"byte_end":165848,"line_start":430,"line_end":430,"column_start":23,"column_end":26},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":165983,"byte_end":165986,"line_start":439,"line_end":439,"column_start":16,"column_end":19},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":166029,"byte_end":166032,"line_start":441,"line_end":441,"column_start":24,"column_end":27},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":2077}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":166205,"byte_end":166208,"line_start":450,"line_end":450,"column_start":17,"column_end":20},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":2066}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/pool/mod.rs","byte_start":166344,"byte_end":166347,"line_start":459,"line_end":459,"column_start":18,"column_end":21},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1474},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/split.rs","byte_start":202144,"byte_end":202149,"line_start":10,"line_end":10,"column_start":18,"column_end":23},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/split.rs","byte_start":203087,"byte_end":203095,"line_start":43,"line_end":43,"column_start":38,"column_end":46},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1558},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/split.rs","byte_start":203568,"byte_end":203576,"line_start":64,"line_end":64,"column_start":35,"column_end":43},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1572},"to":{"krate":1,"index":1533}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":179503,"byte_end":179509,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":179672,"byte_end":179678,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":181574,"byte_end":181579,"line_start":172,"line_end":172,"column_start":18,"column_end":23},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":182637,"byte_end":182642,"line_start":215,"line_end":215,"column_start":27,"column_end":32},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1607},"to":{"krate":1,"index":1726}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":182908,"byte_end":182913,"line_start":230,"line_end":230,"column_start":33,"column_end":38},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1607},"to":{"krate":1,"index":7643}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":183175,"byte_end":183180,"line_start":242,"line_end":242,"column_start":33,"column_end":38},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1607},"to":{"krate":1,"index":7285}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":183500,"byte_end":183505,"line_start":257,"line_end":257,"column_start":35,"column_end":40},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1607},"to":{"krate":6,"index":72}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":190537,"byte_end":190542,"line_start":472,"line_end":472,"column_start":19,"column_end":24},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":190765,"byte_end":190770,"line_start":480,"line_end":480,"column_start":12,"column_end":17},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":190991,"byte_end":190996,"line_start":490,"line_end":490,"column_start":19,"column_end":24},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191233,"byte_end":191238,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191592,"byte_end":191597,"line_start":512,"line_end":512,"column_start":66,"column_end":71},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1607},"to":{"krate":1,"index":2040}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":191975,"byte_end":191980,"line_start":528,"line_end":528,"column_start":25,"column_end":30},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1607},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/spsc/mod.rs","byte_start":192326,"byte_end":192330,"line_start":549,"line_end":549,"column_start":32,"column_end":36},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1698},"to":{"krate":1,"index":2181}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211219,"byte_end":211229,"line_start":14,"line_end":14,"column_start":27,"column_end":37},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1588},"to":{"krate":0,"index":1737}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211354,"byte_end":211363,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1586},"to":{"krate":0,"index":1737}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211463,"byte_end":211467,"line_start":27,"line_end":27,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2255},"to":{"krate":0,"index":1743}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":211477,"byte_end":211481,"line_start":27,"line_end":27,"column_start":41,"column_end":45},"kind":"SuperTrait","from":{"krate":1,"index":1533},"to":{"krate":0,"index":1743}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":216334,"byte_end":216337,"line_start":199,"line_end":199,"column_start":26,"column_end":29},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1100},"to":{"krate":0,"index":1780}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.3/src/sealed.rs","byte_start":216445,"byte_end":216448,"line_start":205,"line_end":205,"column_start":26,"column_end":29},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1101},"to":{"krate":0,"index":1780}}]}