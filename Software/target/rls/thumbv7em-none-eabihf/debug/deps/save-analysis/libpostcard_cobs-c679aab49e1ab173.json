{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre","program":"/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","postcard_cobs","/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=1","-C","debuginfo=2","-C","debug-assertions=on","-C","metadata=c679aab49e1ab173","-C","extra-filename=-c679aab49e1ab173","--out-dir","/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/jean/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jean/Documents/EDS_project_Alarm_Part/Software/target/rls/thumbv7em-none-eabihf/debug/deps/libpostcard_cobs-c679aab49e1ab173.rmeta"},"prelude":{"crate_id":{"name":"postcard_cobs","disambiguator":[4651363012270455008,10365791892872386414]},"crate_root":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src","external_crates":[{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[6179814377341127279,15810806659018497542]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10095233927134609311,1311941312663600358]}},{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4961934893482737060,7310190255483934973]}}],"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","byte_start":0,"byte_end":496,"line_start":1,"line_end":14,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","byte_start":119,"byte_end":120,"line_start":6,"line_end":6,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","byte_start":119,"byte_end":120,"line_start":6,"line_end":6,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","byte_start":0,"byte_end":496,"line_start":1,"line_end":14,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":30},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","byte_start":38,"byte_end":44,"line_start":1,"line_end":1,"column_start":39,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":61},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":772,"byte_end":783,"line_start":6,"line_end":6,"column_start":12,"column_end":23},"name":"CobsDecoder","qualname":"::dec::CobsDecoder","value":"CobsDecoder {  }","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"decl_id":null,"docs":" The [`CobsDecoder`] type is used to decode a stream of bytes to a\n given mutable output slice. This is often useful when heap data\n structures are not available, or when not all message bytes are\n received at a single point in time.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":70},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":1334,"byte_end":1338,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"Idle","qualname":"::dec::DecoderState::Idle","value":"DecoderState::Idle","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" State machine has not received any non-zero bytes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":72},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":1386,"byte_end":1390,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"Grab","qualname":"::dec::DecoderState::Grab","value":"DecoderState::Grab(u8)","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" 1-254 bytes, can be header or 00\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":75},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":1442,"byte_end":1451,"line_start":30,"line_end":30,"column_start":5,"column_end":14},"name":"GrabChain","qualname":"::dec::DecoderState::GrabChain","value":"DecoderState::GrabChain(u8)","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" 255 bytes, will be a header next\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":69},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":1257,"byte_end":1269,"line_start":22,"line_end":22,"column_start":10,"column_end":22},"name":"DecoderState","qualname":"::dec::DecoderState","value":"DecoderState::{Idle, Grab, GrabChain}","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":75}],"decl_id":null,"docs":" The [`DecoderState`] is used to track the current state of a\n streaming decoder. This struct does not contain the output buffer\n (or a reference to one), and can be used when streaming the decoded\n output to a custom data type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":1973,"byte_end":1979,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"NoData","qualname":"::dec::DecodeResult::NoData","value":"DecodeResult::NoData","parent":{"krate":0,"index":7},"children":[],"decl_id":null,"docs":" The given input byte did not prompt an output byte, either because the\n state machine is still idle, or we have just processed a header byte.\n More data is needed to complete the message.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":10},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":2122,"byte_end":2134,"line_start":49,"line_end":49,"column_start":5,"column_end":17},"name":"DataComplete","qualname":"::dec::DecodeResult::DataComplete","value":"DecodeResult::DataComplete","parent":{"krate":0,"index":7},"children":[],"decl_id":null,"docs":" We have received a complete and well-encoded COBS message. The\n contents of the associated output buffer may now be used\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":12},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":2297,"byte_end":2309,"line_start":54,"line_end":54,"column_start":5,"column_end":17},"name":"DataContinue","qualname":"::dec::DecodeResult::DataContinue","value":"DecodeResult::DataContinue(u8)","parent":{"krate":0,"index":7},"children":[],"decl_id":null,"docs":" The following byte should be appended to the current end of the decoded\n output buffer.\n More data is needed to complete the message.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":1744,"byte_end":1756,"line_start":41,"line_end":41,"column_start":10,"column_end":22},"name":"DecodeResult","qualname":"::dec::DecodeResult","value":"DecodeResult::{NoData, DataComplete, DataContinue}","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12}],"decl_id":null,"docs":" [`DecodeResult`] represents the possible non-error outcomes of\n pushing an encoded data byte into the [`DecoderState`] state machine\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":2911,"byte_end":2915,"line_start":67,"line_end":67,"column_start":12,"column_end":16},"name":"feed","qualname":"<DecoderState>::feed","value":"fn (&mut self, data: u8) -> Result<DecodeResult, ()>","parent":null,"children":[],"decl_id":null,"docs":" Push a single encoded byte into the state machine. If the input was\n unexpected, such as an early end of a framed message segment, an Error will\n be returned, and the current associated output buffer contents should be discarded.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":6439,"byte_end":6442,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"new","qualname":"<CobsDecoder>::new","value":"fn (dest: &'a mut [u8]) -> CobsDecoder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Create a new streaming Cobs Decoder. Provide the output buffer\n for the decoded message to be placed in\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":7031,"byte_end":7035,"line_start":168,"line_end":168,"column_start":12,"column_end":16},"name":"feed","qualname":"<CobsDecoder>::feed","value":"fn (&mut self, data: u8) -> Result<Option<usize>, usize>","parent":null,"children":[],"decl_id":null,"docs":" Push a single byte into the streaming CobsDecoder. Return values mean:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":8037,"byte_end":8041,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"name":"push","qualname":"<CobsDecoder>::push","value":"fn (&mut self, data: &[u8]) -> Result<Option<(usize, usize)>, usize>","parent":null,"children":[],"decl_id":null,"docs":" Push a slice of bytes into the streaming CobsDecoder. Return values mean:","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":9814,"byte_end":9820,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"decode","qualname":"::dec::decode","value":"fn (source: &[u8], dest: &mut [u8]) -> Result<usize, ()>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the `source` buffer into the `dest` buffer.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":27},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":10314,"byte_end":10329,"line_start":267,"line_end":267,"column_start":8,"column_end":23},"name":"decode_in_place","qualname":"::dec::decode_in_place","value":"fn (buff: &mut [u8]) -> Result<usize, ()>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a message in-place.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":28},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":10743,"byte_end":10763,"line_start":276,"line_end":276,"column_start":8,"column_end":28},"name":"decode_with_sentinel","qualname":"::dec::decode_with_sentinel","value":"fn (source: &[u8], dest: &mut [u8], sentinel: u8) -> Result<usize, ()>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the `source` buffer into the `dest` buffer using an arbitrary sentinel value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":29},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":11023,"byte_end":11052,"line_start":284,"line_end":284,"column_start":8,"column_end":37},"name":"decode_in_place_with_sentinel","qualname":"::dec::decode_in_place_with_sentinel","value":"fn (buff: &mut [u8], sentinel: u8) -> Result<usize, ()>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a message in-place using an arbitrary sentinel value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":80},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":12310,"byte_end":12321,"line_start":9,"line_end":9,"column_start":12,"column_end":23},"name":"CobsEncoder","qualname":"::enc::CobsEncoder","value":"CobsEncoder {  }","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" The [`CobsEncoder`] type is used to encode a stream of bytes to a\n given mutable output slice. This is often useful when heap data\n structures are not available, or when not all message bytes are\n received at a single point in time.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":12992,"byte_end":13004,"line_start":26,"line_end":26,"column_start":12,"column_end":24},"name":"EncoderState","qualname":"::enc::EncoderState","value":"EncoderState {  }","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"decl_id":null,"docs":" The [`EncoderState`] is used to track the current state of a\n streaming encoder. This struct does not contain the output buffer\n (or a reference to one), and can be used when streaming the encoded\n output to a custom data type","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":32},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":13326,"byte_end":13335,"line_start":36,"line_end":36,"column_start":5,"column_end":14},"name":"AddSingle","qualname":"::enc::PushResult::AddSingle","value":"PushResult::AddSingle(u8)","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" The returned byte should be placed at the current end of the data buffer\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":35},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":13551,"byte_end":13573,"line_start":41,"line_end":41,"column_start":5,"column_end":27},"name":"ModifyFromStartAndSkip","qualname":"::enc::PushResult::ModifyFromStartAndSkip","value":"PushResult::ModifyFromStartAndSkip((usize, u8))","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" The byte at the given index should be replaced with the given byte.\n Additionally, a placeholder byte should be inserted at the current\n end of the output buffer to be later modified\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":38},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":13893,"byte_end":13922,"line_start":47,"line_end":47,"column_start":5,"column_end":34},"name":"ModifyFromStartAndPushAndSkip","qualname":"::enc::PushResult::ModifyFromStartAndPushAndSkip","value":"PushResult::ModifyFromStartAndPushAndSkip((usize, u8, u8))","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" The byte at the given index should be replaced with the given byte.\n Then, the last u8 in this tuple should be inserted at the end of the\n current output buffer. Finally, a placeholder byte should be inserted at\n the current end of the output buffer to be later modified\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":31},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":13228,"byte_end":13238,"line_start":34,"line_end":34,"column_start":10,"column_end":20},"name":"PushResult","qualname":"::enc::PushResult","value":"PushResult::{AddSingle, ModifyFromStartAndSkip, ModifyFromStartAndPushAndSkip}","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38}],"decl_id":null,"docs":" [`PushResult`] is used to represent the changes to an (encoded)\n output data buffer when an unencoded byte is pushed into [`EncoderState`].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":14288,"byte_end":14292,"line_start":63,"line_end":63,"column_start":12,"column_end":16},"name":"push","qualname":"<EncoderState>::push","value":"fn (&mut self, data: u8) -> PushResult","parent":null,"children":[],"decl_id":null,"docs":" Push a single unencoded byte into the encoder state machine\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":15369,"byte_end":15377,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"finalize","qualname":"<EncoderState>::finalize","value":"fn (self) -> (usize, u8)","parent":null,"children":[],"decl_id":null,"docs":" Finalize the encoding process for a single message.\n The byte at the given index should be replaced with the given value,\n and the sentinel value (typically 0u8) must be inserted at the current\n end of the output buffer, serving as a framing byte.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":15535,"byte_end":15538,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<CobsEncoder>::new","value":"fn (out_buf: &'a mut [u8]) -> CobsEncoder<'a>","parent":null,"children":[],"decl_id":null,"docs":" Create a new streaming Cobs Encoder\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":15772,"byte_end":15776,"line_start":107,"line_end":107,"column_start":12,"column_end":16},"name":"push","qualname":"<CobsEncoder>::push","value":"fn (&mut self, data: &[u8]) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Push a slice of data to be encoded\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":16957,"byte_end":16965,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"finalize","qualname":"<CobsEncoder>::finalize","value":"fn (self) -> Result<usize, ()>","parent":null,"children":[],"decl_id":null,"docs":" Complete encoding of the output message. Does NOT terminate\n the message with the sentinel value\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":17823,"byte_end":17829,"line_start":167,"line_end":167,"column_start":8,"column_end":14},"name":"encode","qualname":"::enc::encode","value":"fn (source: &[u8], dest: &mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Encodes the `source` buffer into the `dest` buffer.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":18400,"byte_end":18420,"line_start":180,"line_end":180,"column_start":8,"column_end":28},"name":"encode_with_sentinel","qualname":"::enc::encode_with_sentinel","value":"fn (source: &[u8], dest: &mut [u8], sentinel: u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Encodes the `source` buffer into the `dest` buffer using an\n arbitrary sentinel value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/lib.rs","byte_start":366,"byte_end":385,"line_start":12,"line_end":12,"column_start":8,"column_end":27},"name":"max_encoding_length","qualname":"::max_encoding_length","value":"fn (source_len: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculates the maximum possible size of an encoded message given the length\n of the source message. This may be useful for calculating how large the\n `dest` buffer needs to be in the encoding functions.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":2323,"byte_end":2335,"line_start":57,"line_end":57,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":6290,"byte_end":6301,"line_start":148,"line_end":148,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":13960,"byte_end":13972,"line_start":50,"line_end":50,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":14194,"byte_end":14206,"line_start":61,"line_end":61,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":15461,"byte_end":15472,"line_start":95,"line_end":95,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":2323,"byte_end":2335,"line_start":57,"line_end":57,"column_start":6,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":69},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/dec.rs","byte_start":6290,"byte_end":6301,"line_start":148,"line_end":148,"column_start":10,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":61},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":13960,"byte_end":13972,"line_start":50,"line_end":50,"column_start":18,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2206}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":14194,"byte_end":14206,"line_start":61,"line_end":61,"column_start":6,"column_end":18},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jean/.cargo/registry/src/github.com-1ecc6299db9ec823/postcard-cobs-0.1.5-pre/src/enc.rs","byte_start":15461,"byte_end":15472,"line_start":95,"line_end":95,"column_start":10,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":80},"to":{"krate":4294967295,"index":4294967295}}]}